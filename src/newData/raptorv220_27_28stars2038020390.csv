name,id,description,language,open_issues,stargazers_count,topics,subscribers_count,fork,forks_url,readme,config,watch,travis0,travis1,travis2,travis3,travis4,travis5,travis6,travis7,travis8,travis9,travis10,travis11,travis12,travis13,travis14,travis15,travis16,travis17,travis18,travis19,travis20,travis21,travis22,travis23,gitlab0,gitlab1,gitlab2,gitlab3,gitlab4,gitlab5,gitlab6,gitlab7,gitlab8,gitlab9,gitlab10,gitlab11,gitlab12,gitlab13,gitlab14,gitlab15,gitlab16,gitlab17,gitlab18,gitlab19,gitlab20,gitlab21,gitlab22,gitlab23,jenkinsPipeline0,jenkinsPipeline1,jenkinsPipeline2,jenkinsPipeline3,jenkinsPipeline4,jenkinsPipeline5,jenkinsPipeline6,jenkinsPipeline7,jenkinsPipeline8,jenkinsPipeline9,jenkinsPipeline10,jenkinsPipeline11,jenkinsPipeline12,jenkinsPipeline13,jenkinsPipeline14,jenkinsPipeline15,jenkinsPipeline16,jenkinsPipeline17,jenkinsPipeline18,jenkinsPipeline19,jenkinsPipeline20,jenkinsPipeline21,jenkinsPipeline22,jenkinsPipeline23,cirrus0,cirrus1,cirrus2,cirrus3,cirrus4,cirrus5,cirrus6,cirrus7,cirrus8,cirrus9,cirrus10,cirrus11,cirrus12,cirrus13,cirrus14,cirrus15,cirrus16,cirrus17,cirrus18,cirrus19,cirrus20,cirrus21,cirrus22,cirrus23,github0,github1,github2,github3,github4,github5,github6,github7,github8,github9,github10,github11,github12,github13,github14,github15,github16,github17,github18,github19,github20,github21,github22,github23,cds0,cds1,cds2,cds3,cds4,cds5,cds6,cds7,cds8,cds9,cds10,cds11,cds12,cds13,cds14,cds15,cds16,cds17,cds18,cds19,cds20,cds21,cds22,cds23,azure0,azure1,azure2,azure3,azure4,azure5,azure6,azure7,azure8,azure9,azure10,azure11,azure12,azure13,azure14,azure15,azure16,azure17,azure18,azure19,azure20,azure21,azure22,azure23,circleci0,circleci1,circleci2,circleci3,circleci4,circleci5,circleci6,circleci7,circleci8,circleci9,circleci10,circleci11,circleci12,circleci13,circleci14,circleci15,circleci16,circleci17,circleci18,circleci19,circleci20,circleci21,circleci22,circleci23
b'devise',308770,b'Flexible authentication solution for Rails with Warden.',b'Ruby',43,20382,,510,False,b'https://api.github.com/repos/plataformatec/devise/forks',"IVtEZXZpc2UgTG9nb10oaHR0cHM6Ly9yYXcuZ2l0aHViLmNvbS9wbGF0YWZv
cm1hdGVjL2RldmlzZS9tYXN0ZXIvZGV2aXNlLnBuZykKCkJ5IFtQbGF0YWZv
cm1hdGVjXShodHRwOi8vcGxhdGFmb3JtYXRlYy5jb20uYnIvKS4KClshW0J1
aWxkIFN0YXR1c10oaHR0cHM6Ly9hcGkudHJhdmlzLWNpLm9yZy9wbGF0YWZv
cm1hdGVjL2RldmlzZS5zdmc/YnJhbmNoPW1hc3RlcildKGh0dHA6Ly90cmF2
aXMtY2kub3JnL3BsYXRhZm9ybWF0ZWMvZGV2aXNlKQpbIVtDb2RlIENsaW1h
dGVdKGh0dHBzOi8vY29kZWNsaW1hdGUuY29tL2dpdGh1Yi9wbGF0YWZvcm1h
dGVjL2RldmlzZS5zdmcpXShodHRwczovL2NvZGVjbGltYXRlLmNvbS9naXRo
dWIvcGxhdGFmb3JtYXRlYy9kZXZpc2UpCgpUaGlzIFJFQURNRSBpcyBbYWxz
byBhdmFpbGFibGUgaW4gYSBmcmllbmRseSBuYXZpZ2FibGUgZm9ybWF0XSho
dHRwOi8vZGV2aXNlLnBsYXRhZm9ybWF0ZWMuY29tLmJyLykuCgpEZXZpc2Ug
aXMgYSBmbGV4aWJsZSBhdXRoZW50aWNhdGlvbiBzb2x1dGlvbiBmb3IgUmFp
bHMgYmFzZWQgb24gV2FyZGVuLiBJdDoKCiogSXMgUmFjayBiYXNlZDsKKiBJ
cyBhIGNvbXBsZXRlIE1WQyBzb2x1dGlvbiBiYXNlZCBvbiBSYWlscyBlbmdp
bmVzOwoqIEFsbG93cyB5b3UgdG8gaGF2ZSBtdWx0aXBsZSBtb2RlbHMgc2ln
bmVkIGluIGF0IHRoZSBzYW1lIHRpbWU7CiogSXMgYmFzZWQgb24gYSBtb2R1
bGFyaXR5IGNvbmNlcHQ6IHVzZSBvbmx5IHdoYXQgeW91IHJlYWxseSBuZWVk
LgoKSXQncyBjb21wb3NlZCBvZiAxMCBtb2R1bGVzOgoKKiBbRGF0YWJhc2Ug
QXV0aGVudGljYXRhYmxlXShodHRwOi8vd3d3LnJ1Ynlkb2MuaW5mby9naXRo
dWIvcGxhdGFmb3JtYXRlYy9kZXZpc2UvbWFzdGVyL0RldmlzZS9Nb2RlbHMv
RGF0YWJhc2VBdXRoZW50aWNhdGFibGUpOiBoYXNoZXMgYW5kIHN0b3JlcyBh
IHBhc3N3b3JkIGluIHRoZSBkYXRhYmFzZSB0byB2YWxpZGF0ZSB0aGUgYXV0
aGVudGljaXR5IG9mIGEgdXNlciB3aGlsZSBzaWduaW5nIGluLiBUaGUgYXV0
aGVudGljYXRpb24gY2FuIGJlIGRvbmUgYm90aCB0aHJvdWdoIFBPU1QgcmVx
dWVzdHMgb3IgSFRUUCBCYXNpYyBBdXRoZW50aWNhdGlvbi4KKiBbT21uaWF1
dGhhYmxlXShodHRwOi8vd3d3LnJ1Ynlkb2MuaW5mby9naXRodWIvcGxhdGFm
b3JtYXRlYy9kZXZpc2UvbWFzdGVyL0RldmlzZS9Nb2RlbHMvT21uaWF1dGhh
YmxlKTogYWRkcyBPbW5pQXV0aCAoaHR0cHM6Ly9naXRodWIuY29tL29tbmlh
dXRoL29tbmlhdXRoKSBzdXBwb3J0LgoqIFtDb25maXJtYWJsZV0oaHR0cDov
L3d3dy5ydWJ5ZG9jLmluZm8vZ2l0aHViL3BsYXRhZm9ybWF0ZWMvZGV2aXNl
L21hc3Rlci9EZXZpc2UvTW9kZWxzL0NvbmZpcm1hYmxlKTogc2VuZHMgZW1h
aWxzIHdpdGggY29uZmlybWF0aW9uIGluc3RydWN0aW9ucyBhbmQgdmVyaWZp
ZXMgd2hldGhlciBhbiBhY2NvdW50IGlzIGFscmVhZHkgY29uZmlybWVkIGR1
cmluZyBzaWduIGluLgoqIFtSZWNvdmVyYWJsZV0oaHR0cDovL3d3dy5ydWJ5
ZG9jLmluZm8vZ2l0aHViL3BsYXRhZm9ybWF0ZWMvZGV2aXNlL21hc3Rlci9E
ZXZpc2UvTW9kZWxzL1JlY292ZXJhYmxlKTogcmVzZXRzIHRoZSB1c2VyIHBh
c3N3b3JkIGFuZCBzZW5kcyByZXNldCBpbnN0cnVjdGlvbnMuCiogW1JlZ2lz
dGVyYWJsZV0oaHR0cDovL3d3dy5ydWJ5ZG9jLmluZm8vZ2l0aHViL3BsYXRh
Zm9ybWF0ZWMvZGV2aXNlL21hc3Rlci9EZXZpc2UvTW9kZWxzL1JlZ2lzdGVy
YWJsZSk6IGhhbmRsZXMgc2lnbmluZyB1cCB1c2VycyB0aHJvdWdoIGEgcmVn
aXN0cmF0aW9uIHByb2Nlc3MsIGFsc28gYWxsb3dpbmcgdGhlbSB0byBlZGl0
IGFuZCBkZXN0cm95IHRoZWlyIGFjY291bnQuCiogW1JlbWVtYmVyYWJsZV0o
aHR0cDovL3d3dy5ydWJ5ZG9jLmluZm8vZ2l0aHViL3BsYXRhZm9ybWF0ZWMv
ZGV2aXNlL21hc3Rlci9EZXZpc2UvTW9kZWxzL1JlbWVtYmVyYWJsZSk6IG1h
bmFnZXMgZ2VuZXJhdGluZyBhbmQgY2xlYXJpbmcgYSB0b2tlbiBmb3IgcmVt
ZW1iZXJpbmcgdGhlIHVzZXIgZnJvbSBhIHNhdmVkIGNvb2tpZS4KKiBbVHJh
Y2thYmxlXShodHRwOi8vd3d3LnJ1Ynlkb2MuaW5mby9naXRodWIvcGxhdGFm
b3JtYXRlYy9kZXZpc2UvbWFzdGVyL0RldmlzZS9Nb2RlbHMvVHJhY2thYmxl
KTogdHJhY2tzIHNpZ24gaW4gY291bnQsIHRpbWVzdGFtcHMgYW5kIElQIGFk
ZHJlc3MuCiogW1RpbWVvdXRhYmxlXShodHRwOi8vd3d3LnJ1Ynlkb2MuaW5m
by9naXRodWIvcGxhdGFmb3JtYXRlYy9kZXZpc2UvbWFzdGVyL0RldmlzZS9N
b2RlbHMvVGltZW91dGFibGUpOiBleHBpcmVzIHNlc3Npb25zIHRoYXQgaGF2
ZSBub3QgYmVlbiBhY3RpdmUgaW4gYSBzcGVjaWZpZWQgcGVyaW9kIG9mIHRp
bWUuCiogW1ZhbGlkYXRhYmxlXShodHRwOi8vd3d3LnJ1Ynlkb2MuaW5mby9n
aXRodWIvcGxhdGFmb3JtYXRlYy9kZXZpc2UvbWFzdGVyL0RldmlzZS9Nb2Rl
bHMvVmFsaWRhdGFibGUpOiBwcm92aWRlcyB2YWxpZGF0aW9ucyBvZiBlbWFp
bCBhbmQgcGFzc3dvcmQuIEl0J3Mgb3B0aW9uYWwgYW5kIGNhbiBiZSBjdXN0
b21pemVkLCBzbyB5b3UncmUgYWJsZSB0byBkZWZpbmUgeW91ciBvd24gdmFs
aWRhdGlvbnMuCiogW0xvY2thYmxlXShodHRwOi8vd3d3LnJ1Ynlkb2MuaW5m
by9naXRodWIvcGxhdGFmb3JtYXRlYy9kZXZpc2UvbWFzdGVyL0RldmlzZS9N
b2RlbHMvTG9ja2FibGUpOiBsb2NrcyBhbiBhY2NvdW50IGFmdGVyIGEgc3Bl
Y2lmaWVkIG51bWJlciBvZiBmYWlsZWQgc2lnbi1pbiBhdHRlbXB0cy4gQ2Fu
IHVubG9jayB2aWEgZW1haWwgb3IgYWZ0ZXIgYSBzcGVjaWZpZWQgdGltZSBw
ZXJpb2QuCgojIyBUYWJsZSBvZiBDb250ZW50cwoKPCEtLSBUT0MgZGVwdGhG
cm9tOjEgZGVwdGhUbzo2IHdpdGhMaW5rczoxIG9yZGVyZWRMaXN0OjAgLS0+
CgotIFtJbmZvcm1hdGlvbl0oI2luZm9ybWF0aW9uKQoJLSBbVGhlIERldmlz
ZSB3aWtpXSgjdGhlLWRldmlzZS13aWtpKQoJLSBbQnVnIHJlcG9ydHNdKCNi
dWctcmVwb3J0cykKCS0gW1N0YWNrT3ZlcmZsb3cgYW5kIE1haWxpbmcgTGlz
dF0oI3N0YWNrb3ZlcmZsb3ctYW5kLW1haWxpbmctbGlzdCkKCS0gW1JEb2Nz
XSgjcmRvY3MpCgktIFtFeGFtcGxlIGFwcGxpY2F0aW9uc10oI2V4YW1wbGUt
YXBwbGljYXRpb25zKQoJLSBbRXh0ZW5zaW9uc10oI2V4dGVuc2lvbnMpCgkt
IFtDb250cmlidXRpbmddKCNjb250cmlidXRpbmcpCi0gW1N0YXJ0aW5nIHdp
dGggUmFpbHM/XSgjc3RhcnRpbmctd2l0aC1yYWlscykKLSBbR2V0dGluZyBz
dGFydGVkXSgjZ2V0dGluZy1zdGFydGVkKQoJLSBbQ29udHJvbGxlciBmaWx0
ZXJzIGFuZCBoZWxwZXJzXSgjY29udHJvbGxlci1maWx0ZXJzLWFuZC1oZWxw
ZXJzKQoJLSBbQ29uZmlndXJpbmcgTW9kZWxzXSgjY29uZmlndXJpbmctbW9k
ZWxzKQoJLSBbU3Ryb25nIFBhcmFtZXRlcnNdKCNzdHJvbmctcGFyYW1ldGVy
cykKCS0gW0NvbmZpZ3VyaW5nIHZpZXdzXSgjY29uZmlndXJpbmctdmlld3Mp
CgktIFtDb25maWd1cmluZyBjb250cm9sbGVyc10oI2NvbmZpZ3VyaW5nLWNv
bnRyb2xsZXJzKQoJLSBbQ29uZmlndXJpbmcgcm91dGVzXSgjY29uZmlndXJp
bmctcm91dGVzKQoJLSBbSTE4bl0oI2kxOG4pCgktIFtUZXN0IGhlbHBlcnNd
KCN0ZXN0LWhlbHBlcnMpCgktIFtDb250cm9sbGVyIHRlc3RzXSgjY29udHJv
bGxlci10ZXN0cykKCS0gW0ludGVncmF0aW9uIHRlc3RzXSgjaW50ZWdyYXRp
b24tdGVzdHMpCgktIFtPbW5pQXV0aF0oI29tbmlhdXRoKQoJLSBbQ29uZmln
dXJpbmcgbXVsdGlwbGUgbW9kZWxzXSgjY29uZmlndXJpbmctbXVsdGlwbGUt
bW9kZWxzKQoJLSBbQWN0aXZlSm9iIEludGVncmF0aW9uXSgjYWN0aXZlam9i
LWludGVncmF0aW9uKQoJLSBbUGFzc3dvcmQgcmVzZXQgdG9rZW5zIGFuZCBS
YWlscyBsb2dzXSgjcGFzc3dvcmQtcmVzZXQtdG9rZW5zLWFuZC1yYWlscy1s
b2dzKQoJLSBbT3RoZXIgT1JNc10oI290aGVyLW9ybXMpCgktIFtSYWlscyBB
UEkgbW9kZV0oI3JhaWxzLWFwaS1tb2RlKQotIFtBZGRpdGlvbmFsIGluZm9y
bWF0aW9uXSgjYWRkaXRpb25hbC1pbmZvcm1hdGlvbikKCS0gW0hlcm9rdV0o
I2hlcm9rdSkKCS0gW1dhcmRlbl0oI3dhcmRlbikKCS0gW0NvbnRyaWJ1dG9y
c10oI2NvbnRyaWJ1dG9ycykKLSBbTGljZW5zZV0oI2xpY2Vuc2UpCgo8IS0t
IC9UT0MgLS0+CgoKCiMjIEluZm9ybWF0aW9uCgojIyMgVGhlIERldmlzZSB3
aWtpCgpUaGUgRGV2aXNlIFdpa2kgaGFzIGxvdHMgb2YgYWRkaXRpb25hbCBp
bmZvcm1hdGlvbiBhYm91dCBEZXZpc2UgaW5jbHVkaW5nIG1hbnkgImhvdy10
byIgYXJ0aWNsZXMgYW5kIGFuc3dlcnMgdG8gdGhlIG1vc3QgZnJlcXVlbnRs
eSBhc2tlZCBxdWVzdGlvbnMuIFBsZWFzZSBicm93c2UgdGhlIFdpa2kgYWZ0
ZXIgZmluaXNoaW5nIHRoaXMgUkVBRE1FOgoKaHR0cHM6Ly9naXRodWIuY29t
L3BsYXRhZm9ybWF0ZWMvZGV2aXNlL3dpa2kKCiMjIyBCdWcgcmVwb3J0cwoK
SWYgeW91IGRpc2NvdmVyIGEgcHJvYmxlbSB3aXRoIERldmlzZSwgd2Ugd291
bGQgbGlrZSB0byBrbm93IGFib3V0IGl0LiBIb3dldmVyLCB3ZSBhc2sgdGhh
dCB5b3UgcGxlYXNlIHJldmlldyB0aGVzZSBndWlkZWxpbmVzIGJlZm9yZSBz
dWJtaXR0aW5nIGEgYnVnIHJlcG9ydDoKCmh0dHBzOi8vZ2l0aHViLmNvbS9w
bGF0YWZvcm1hdGVjL2RldmlzZS93aWtpL0J1Zy1yZXBvcnRzCgpJZiB5b3Ug
aGF2ZSBkaXNjb3ZlcmVkIGEgc2VjdXJpdHkgcmVsYXRlZCBidWcsIHBsZWFz
ZSBkbyAqTk9UKiB1c2UgdGhlIEdpdEh1YiBpc3N1ZSB0cmFja2VyLiBTZW5k
IGFuIGVtYWlsIHRvIG9wZW5zb3VyY2VAcGxhdGFmb3JtYXRlYy5jb20uYnIu
CgojIyMgU3RhY2tPdmVyZmxvdyBhbmQgTWFpbGluZyBMaXN0CgpJZiB5b3Ug
aGF2ZSBhbnkgcXVlc3Rpb25zLCBjb21tZW50cywgb3IgY29uY2VybnMsIHBs
ZWFzZSB1c2UgU3RhY2tPdmVyZmxvdyBpbnN0ZWFkIG9mIHRoZSBHaXRIdWIg
aXNzdWUgdHJhY2tlcjoKCmh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVz
dGlvbnMvdGFnZ2VkL2RldmlzZQoKVGhlIGRlcHJlY2F0ZWQgbWFpbGluZyBs
aXN0IGNhbiBzdGlsbCBiZSByZWFkIG9uCgpodHRwczovL2dyb3Vwcy5nb29n
bGUuY29tL2dyb3VwL3BsYXRhZm9ybWF0ZWMtZGV2aXNlCgojIyMgUkRvY3MK
CllvdSBjYW4gdmlldyB0aGUgRGV2aXNlIGRvY3VtZW50YXRpb24gaW4gUkRv
YyBmb3JtYXQgaGVyZToKCmh0dHA6Ly9ydWJ5ZG9jLmluZm8vZ2l0aHViL3Bs
YXRhZm9ybWF0ZWMvZGV2aXNlL21hc3Rlci9mcmFtZXMKCklmIHlvdSBuZWVk
IHRvIHVzZSBEZXZpc2Ugd2l0aCBwcmV2aW91cyB2ZXJzaW9ucyBvZiBSYWls
cywgeW91IGNhbiBhbHdheXMgcnVuICJnZW0gc2VydmVyIiBmcm9tIHRoZSBj
b21tYW5kIGxpbmUgYWZ0ZXIgeW91IGluc3RhbGwgdGhlIGdlbSB0byBhY2Nl
c3MgdGhlIG9sZCBkb2N1bWVudGF0aW9uLgoKIyMjIEV4YW1wbGUgYXBwbGlj
YXRpb25zCgpUaGVyZSBhcmUgYSBmZXcgZXhhbXBsZSBhcHBsaWNhdGlvbnMg
YXZhaWxhYmxlIG9uIEdpdEh1YiB0aGF0IGRlbW9uc3RyYXRlIHZhcmlvdXMg
ZmVhdHVyZXMgb2YgRGV2aXNlIHdpdGggZGlmZmVyZW50IHZlcnNpb25zIG9m
IFJhaWxzLiBZb3UgY2FuIHZpZXcgdGhlbSBoZXJlOgoKaHR0cHM6Ly9naXRo
dWIuY29tL3BsYXRhZm9ybWF0ZWMvZGV2aXNlL3dpa2kvRXhhbXBsZS1BcHBs
aWNhdGlvbnMKCiMjIyBFeHRlbnNpb25zCgpPdXIgY29tbXVuaXR5IGhhcyBj
cmVhdGVkIGEgbnVtYmVyIG9mIGV4dGVuc2lvbnMgdGhhdCBhZGQgZnVuY3Rp
b25hbGl0eSBhYm92ZSBhbmQgYmV5b25kIHdoYXQgaXMgaW5jbHVkZWQgd2l0
aCBEZXZpc2UuIFlvdSBjYW4gdmlldyBhIGxpc3Qgb2YgYXZhaWxhYmxlIGV4
dGVuc2lvbnMgYW5kIGFkZCB5b3VyIG93biBoZXJlOgoKaHR0cHM6Ly9naXRo
dWIuY29tL3BsYXRhZm9ybWF0ZWMvZGV2aXNlL3dpa2kvRXh0ZW5zaW9ucwoK
IyMjIENvbnRyaWJ1dGluZwoKV2UgaG9wZSB0aGF0IHlvdSB3aWxsIGNvbnNp
ZGVyIGNvbnRyaWJ1dGluZyB0byBEZXZpc2UuIFBsZWFzZSByZWFkIHRoaXMg
c2hvcnQgb3ZlcnZpZXcgZm9yIHNvbWUgaW5mb3JtYXRpb24gYWJvdXQgaG93
IHRvIGdldCBzdGFydGVkOgoKaHR0cHM6Ly9naXRodWIuY29tL3BsYXRhZm9y
bWF0ZWMvZGV2aXNlL3dpa2kvQ29udHJpYnV0aW5nCgpZb3Ugd2lsbCB1c3Vh
bGx5IHdhbnQgdG8gd3JpdGUgdGVzdHMgZm9yIHlvdXIgY2hhbmdlcy4gIFRv
IHJ1biB0aGUgdGVzdCBzdWl0ZSwgZ28gaW50byBEZXZpc2UncyB0b3AtbGV2
ZWwgZGlyZWN0b3J5IGFuZCBydW4gYGJ1bmRsZSBpbnN0YWxsYCBhbmQgYGJp
bi90ZXN0YC4KRGV2aXNlIHdvcmtzIHdpdGggbXVsdGlwbGUgUnVieSBhbmQg
UmFpbHMgdmVyc2lvbnMsIGFuZCBBY3RpdmVSZWNvcmQgYW5kIE1vbmdvaWQg
T1JNcywgd2hpY2ggbWVhbnMgeW91IGNhbiBydW4gdGhlIHRlc3Qgc3VpdGUg
d2l0aCBzb21lIG1vZGlmaWVyczogYERFVklTRV9PUk1gIGFuZCBgQlVORExF
X0dFTUZJTEVgLgoKIyMjIERFVklTRV9PUk0KU2luY2UgRGV2aXNlIHN1cHBv
cnQgYm90aCBNb25nb2lkIGFuZCBBY3RpdmVSZWNvcmQsIHdlIHJlbHkgb24g
dGhpcyB2YXJpYWJsZSB0byBydW4gc3BlY2lmaWMgY29kZSBmb3IgZWFjaCBP
Uk0uClRoZSBkZWZhdWx0IHZhbHVlIG9mIGBERVZJU0VfT1JNYCBpcyBgYWN0
aXZlX3JlY29yZGAuIFRvIHJ1biB0aGUgdGVzdHMgZm9yIG1vbmdvaWQsIHlv
dSBjYW4gcGFzcyBgbW9uZ29pZGA6CmBgYApERVZJU0VfT1JNPW1vbmdvaWQg
YmluL3Rlc3QKCj09PiBEZXZpc2Uub3JtID0gOm1vbmdvaWQKYGBgCldoZW4g
cnVubmluZyB0aGUgdGVzdHMgZm9yIE1vbmdvaWQsIHlvdSB3aWxsIG5lZWQg
dG8gaGF2ZSBhIE1vbmdvREIgc2VydmVyICh2ZXJzaW9uIDIuMCBvciBuZXdl
cikgcnVubmluZyBvbiB5b3VyIHN5c3RlbS4KClBsZWFzZSBub3RlIHRoYXQg
dGhlIGNvbW1hbmQgb3V0cHV0IHdpbGwgc2hvdyB0aGUgdmFyaWFibGUgdmFs
dWUgYmVpbmcgdXNlZC4KCiMjIyBCVU5ETEVfR0VNRklMRQpXZSBjYW4gdXNl
IHRoaXMgdmFyaWFibGUgdG8gdGVsbCBidW5kbGVyIHdoYXQgR2VtZmlsZSBp
dCBzaG91bGQgdXNlIChpbnN0ZWFkIG9mIHRoZSBvbmUgaW4gdGhlIGN1cnJl
bnQgZGlyZWN0b3J5KS4KSW5zaWRlIHRoZSBbZ2VtZmlsZXNdKGh0dHBzOi8v
Z2l0aHViLmNvbS9wbGF0YWZvcm1hdGVjL2RldmlzZS90cmVlL21hc3Rlci9n
ZW1maWxlcykgZGlyZWN0b3J5LCB3ZSBoYXZlIG9uZSBmb3IgZWFjaCB2ZXJz
aW9uIG9mIFJhaWxzIHdlIHN1cHBvcnQuIFdoZW4geW91IHNlbmQgdXMgYSBw
dWxsIHJlcXVlc3QsIGl0IG1heSBoYXBwZW4gdGhhdCB0aGUgdGVzdCBzdWl0
ZSBicmVha3Mgb24gVHJhdmlzIHVzaW5nIHNvbWUgb2YgdGhlbS4gSWYgdGhh
dCdzIHRoZSBjYXNlLCB5b3UgY2FuIHNpbXVsYXRlIHRoZSBzYW1lIGVudmly
b25tZW50IHVzaW5nIHRoZSBgQlVORExFX0dFTUZJTEVgIHZhcmlhYmxlLgpG
b3IgZXhhbXBsZSwgaWYgdGhlIHRlc3RzIGJyb2tlIHVzaW5nIFJ1YnkgMi40
LjIgYW5kIFJhaWxzIDQuMSwgeW91IGNhbiBkbyB0aGUgZm9sbG93aW5nOgpg
YGBiYXNoCnJiZW52IHNoZWxsIDIuNC4yICMgb3IgcnZtIHVzZSAyLjQuMgpC
VU5ETEVfR0VNRklMRT1nZW1maWxlcy9HZW1maWxlLnJhaWxzLTQuMS1zdGFi
bGUgYnVuZGxlIGluc3RhbGwKQlVORExFX0dFTUZJTEU9Z2VtZmlsZXMvR2Vt
ZmlsZS5yYWlscy00LjEtc3RhYmxlIGJpbi90ZXN0CmBgYAoKWW91IGNhbiBh
bHNvIGNvbWJpbmUgYm90aCBvZiB0aGVtIGlmIHRoZSB0ZXN0cyBicm9rZSBm
b3IgTW9uZ29pZDoKYGBgYmFzaApCVU5ETEVfR0VNRklMRT1nZW1maWxlcy9H
ZW1maWxlLnJhaWxzLTQuMS1zdGFibGUgYnVuZGxlIGluc3RhbGwKQlVORExF
X0dFTUZJTEU9Z2VtZmlsZXMvR2VtZmlsZS5yYWlscy00LjEtc3RhYmxlIERF
VklTRV9PUk09bW9uZ29pZCBiaW4vdGVzdApgYGAKCiMjIyBSdW5uaW5nIHRl
c3RzCkRldmlzZSB1c2VzIFtNaW5pIFRlc3RdKGh0dHBzOi8vZ2l0aHViLmNv
bS9zZWF0dGxlcmIvbWluaXRlc3QpIGFzIHRlc3QgZnJhbWV3b3JrLgoKKiBS
dW5uaW5nIGFsbCB0ZXN0czoKYGBgYmFzaApiaW4vdGVzdApgYGAKCiogUnVu
bmluZyB0ZXN0cyBmb3IgYW4gc3BlY2lmaWMgZmlsZToKYGBgYmFzaApiaW4v
dGVzdCB0ZXN0L21vZGVscy90cmFja2FibGVfdGVzdC5yYgpgYGAKCiogUnVu
bmluZyBhIHNwZWNpZmljIHRlc3QgZ2l2ZW4gYSByZWdleDoKYGBgYmFzaApi
aW4vdGVzdCB0ZXN0L21vZGVscy90cmFja2FibGVfdGVzdC5yYjoxNgpgYGAK
CiMjIFN0YXJ0aW5nIHdpdGggUmFpbHM/CgpJZiB5b3UgYXJlIGJ1aWxkaW5n
IHlvdXIgZmlyc3QgUmFpbHMgYXBwbGljYXRpb24sIHdlIHJlY29tbWVuZCB5
b3UgKmRvIG5vdCogdXNlIERldmlzZS4gRGV2aXNlIHJlcXVpcmVzIGEgZ29v
ZCB1bmRlcnN0YW5kaW5nIG9mIHRoZSBSYWlscyBGcmFtZXdvcmsuIEluIHN1
Y2ggY2FzZXMsIHdlIGFkdmlzZSB5b3UgdG8gc3RhcnQgYSBzaW1wbGUgYXV0
aGVudGljYXRpb24gc3lzdGVtIGZyb20gc2NyYXRjaC4gVG9kYXksIHdlIGhh
dmUgdGhyZWUgcmVzb3VyY2VzIHRoYXQgc2hvdWxkIGhlbHAgeW91IGdldCBz
dGFydGVkOgoKKiBNaWNoYWVsIEhhcnRsJ3Mgb25saW5lIGJvb2s6IGh0dHBz
Oi8vd3d3LnJhaWxzdHV0b3JpYWwub3JnL2Jvb2svbW9kZWxpbmdfdXNlcnMK
KiBSeWFuIEJhdGVzJyBSYWlsc2Nhc3Q6IGh0dHA6Ly9yYWlsc2Nhc3RzLmNv
bS9lcGlzb2Rlcy8yNTAtYXV0aGVudGljYXRpb24tZnJvbS1zY3JhdGNoCiog
Q29kZWNhZGVteSdzIFJ1Ynkgb24gUmFpbHM6IEF1dGhlbnRpY2F0aW9uIGFu
ZCBBdXRob3JpemF0aW9uOiBodHRwczovL3d3dy5jb2RlY2FkZW15LmNvbS9s
ZWFybi9yYWlscy1hdXRoCgpPbmNlIHlvdSBoYXZlIHNvbGlkaWZpZWQgeW91
ciB1bmRlcnN0YW5kaW5nIG9mIFJhaWxzIGFuZCBhdXRoZW50aWNhdGlvbiBt
ZWNoYW5pc21zLCB3ZSBhc3N1cmUgeW91IERldmlzZSB3aWxsIGJlIHZlcnkg
cGxlYXNhbnQgdG8gd29yayB3aXRoLiA6c21pbGV5OgoKIyMgR2V0dGluZyBz
dGFydGVkCgpEZXZpc2UgNC4wIHdvcmtzIHdpdGggUmFpbHMgNC4xIG9ud2Fy
ZHMuIEFkZCB0aGUgZm9sbG93aW5nIGxpbmUgdG8geW91ciBHZW1maWxlOgoK
YGBgcnVieQpnZW0gJ2RldmlzZScKYGBgCgpUaGVuIHJ1biBgYnVuZGxlIGlu
c3RhbGxgCgpOZXh0LCB5b3UgbmVlZCB0byBydW4gdGhlIGdlbmVyYXRvcjoK
CmBgYGNvbnNvbGUKJCByYWlscyBnZW5lcmF0ZSBkZXZpc2U6aW5zdGFsbApg
YGAKCkF0IHRoaXMgcG9pbnQsIGEgbnVtYmVyIG9mIGluc3RydWN0aW9ucyB3
aWxsIGFwcGVhciBpbiB0aGUgY29uc29sZS4gQW1vbmcgdGhlc2UgaW5zdHJ1
Y3Rpb25zLCB5b3UnbGwgbmVlZCB0byBzZXQgdXAgdGhlIGRlZmF1bHQgVVJM
IG9wdGlvbnMgZm9yIHRoZSBEZXZpc2UgbWFpbGVyIGluIGVhY2ggZW52aXJv
bm1lbnQuIEhlcmUgaXMgYSBwb3NzaWJsZSBjb25maWd1cmF0aW9uIGZvciBg
Y29uZmlnL2Vudmlyb25tZW50cy9kZXZlbG9wbWVudC5yYmA6CgpgYGBydWJ5
CmNvbmZpZy5hY3Rpb25fbWFpbGVyLmRlZmF1bHRfdXJsX29wdGlvbnMgPSB7
IGhvc3Q6ICdsb2NhbGhvc3QnLCBwb3J0OiAzMDAwIH0KYGBgCgpUaGUgZ2Vu
ZXJhdG9yIHdpbGwgaW5zdGFsbCBhbiBpbml0aWFsaXplciB3aGljaCBkZXNj
cmliZXMgQUxMIG9mIERldmlzZSdzIGNvbmZpZ3VyYXRpb24gb3B0aW9ucy4g
SXQgaXMgKmltcGVyYXRpdmUqIHRoYXQgeW91IHRha2UgYSBsb29rIGF0IGl0
LiBXaGVuIHlvdSBhcmUgZG9uZSwgeW91IGFyZSByZWFkeSB0byBhZGQgRGV2
aXNlIHRvIGFueSBvZiB5b3VyIG1vZGVscyB1c2luZyB0aGUgZ2VuZXJhdG9y
LgoKCkluIHRoZSBmb2xsb3dpbmcgY29tbWFuZCB5b3Ugd2lsbCByZXBsYWNl
IGBNT0RFTGAgd2l0aCB0aGUgY2xhc3MgbmFtZSB1c2VkIGZvciB0aGUgYXBw
bGljYXRpb27igJlzIHVzZXJzIChpdOKAmXMgZnJlcXVlbnRseSBgVXNlcmAg
YnV0IGNvdWxkIGFsc28gYmUgYEFkbWluYCkuIFRoaXMgd2lsbCBjcmVhdGUg
YSBtb2RlbCAoaWYgb25lIGRvZXMgbm90IGV4aXN0KSBhbmQgY29uZmlndXJl
IGl0IHdpdGggdGhlIGRlZmF1bHQgRGV2aXNlIG1vZHVsZXMuIFRoZSBnZW5l
cmF0b3IgYWxzbyBjb25maWd1cmVzIHlvdXIgYGNvbmZpZy9yb3V0ZXMucmJg
IGZpbGUgdG8gcG9pbnQgdG8gdGhlIERldmlzZSBjb250cm9sbGVyLgoKYGBg
Y29uc29sZQokIHJhaWxzIGdlbmVyYXRlIGRldmlzZSBNT0RFTApgYGAKCk5l
eHQsIGNoZWNrIHRoZSBNT0RFTCBmb3IgYW55IGFkZGl0aW9uYWwgY29uZmln
dXJhdGlvbiBvcHRpb25zIHlvdSBtaWdodCB3YW50IHRvIGFkZCwgc3VjaCBh
cyBjb25maXJtYWJsZSBvciBsb2NrYWJsZS4gSWYgeW91IGFkZCBhbiBvcHRp
b24sIGJlIHN1cmUgdG8gaW5zcGVjdCB0aGUgbWlncmF0aW9uIGZpbGUgKGNy
ZWF0ZWQgYnkgdGhlIGdlbmVyYXRvciBpZiB5b3VyIE9STSBzdXBwb3J0cyB0
aGVtKSBhbmQgdW5jb21tZW50IHRoZSBhcHByb3ByaWF0ZSBzZWN0aW9uLiAg
Rm9yIGV4YW1wbGUsIGlmIHlvdSBhZGQgdGhlIGNvbmZpcm1hYmxlIG9wdGlv
biBpbiB0aGUgbW9kZWwsIHlvdSdsbCBuZWVkIHRvIHVuY29tbWVudCB0aGUg
Q29uZmlybWFibGUgc2VjdGlvbiBpbiB0aGUgbWlncmF0aW9uLgoKVGhlbiBy
dW4gYHJhaWxzIGRiOm1pZ3JhdGVgCgpZb3Ugc2hvdWxkIHJlc3RhcnQgeW91
ciBhcHBsaWNhdGlvbiBhZnRlciBjaGFuZ2luZyBEZXZpc2UncyBjb25maWd1
cmF0aW9uIG9wdGlvbnMgKHRoaXMgaW5jbHVkZXMgc3RvcHBpbmcgc3ByaW5n
KS4gT3RoZXJ3aXNlLCB5b3Ugd2lsbCBydW4gaW50byBzdHJhbmdlIGVycm9y
cywgZm9yIGV4YW1wbGUsIHVzZXJzIGJlaW5nIHVuYWJsZSB0byBsb2dpbiBh
bmQgcm91dGUgaGVscGVycyBiZWluZyB1bmRlZmluZWQuCgojIyMgQ29udHJv
bGxlciBmaWx0ZXJzIGFuZCBoZWxwZXJzCgpEZXZpc2Ugd2lsbCBjcmVhdGUg
c29tZSBoZWxwZXJzIHRvIHVzZSBpbnNpZGUgeW91ciBjb250cm9sbGVycyBh
bmQgdmlld3MuIFRvIHNldCB1cCBhIGNvbnRyb2xsZXIgd2l0aCB1c2VyIGF1
dGhlbnRpY2F0aW9uLCBqdXN0IGFkZCB0aGlzIGJlZm9yZV9hY3Rpb24gKGFz
c3VtaW5nIHlvdXIgZGV2aXNlIG1vZGVsIGlzICdVc2VyJyk6CgpgYGBydWJ5
CmJlZm9yZV9hY3Rpb24gOmF1dGhlbnRpY2F0ZV91c2VyIQpgYGAKCkZvciBS
YWlscyA1LCBub3RlIHRoYXQgYHByb3RlY3RfZnJvbV9mb3JnZXJ5YCBpcyBu
byBsb25nZXIgcHJlcGVuZGVkIHRvIHRoZSBgYmVmb3JlX2FjdGlvbmAgY2hh
aW4sIHNvIGlmIHlvdSBoYXZlIHNldCBgYXV0aGVudGljYXRlX3VzZXJgIGJl
Zm9yZSBgcHJvdGVjdF9mcm9tX2ZvcmdlcnlgLCB5b3VyIHJlcXVlc3Qgd2ls
bCByZXN1bHQgaW4gIkNhbid0IHZlcmlmeSBDU1JGIHRva2VuIGF1dGhlbnRp
Y2l0eS4iIFRvIHJlc29sdmUgdGhpcywgZWl0aGVyIGNoYW5nZSB0aGUgb3Jk
ZXIgaW4gd2hpY2ggeW91IGNhbGwgdGhlbSwgb3IgdXNlIGBwcm90ZWN0X2Zy
b21fZm9yZ2VyeSBwcmVwZW5kOiB0cnVlYC4KCklmIHlvdXIgZGV2aXNlIG1v
ZGVsIGlzIHNvbWV0aGluZyBvdGhlciB0aGFuIFVzZXIsIHJlcGxhY2UgIl91
c2VyIiB3aXRoICJfeW91cm1vZGVsIi4gVGhlIHNhbWUgbG9naWMgYXBwbGll
cyB0byB0aGUgaW5zdHJ1Y3Rpb25zIGJlbG93LgoKVG8gdmVyaWZ5IGlmIGEg
dXNlciBpcyBzaWduZWQgaW4sIHVzZSB0aGUgZm9sbG93aW5nIGhlbHBlcjoK
CmBgYHJ1YnkKdXNlcl9zaWduZWRfaW4/CmBgYAoKRm9yIHRoZSBjdXJyZW50
IHNpZ25lZC1pbiB1c2VyLCB0aGlzIGhlbHBlciBpcyBhdmFpbGFibGU6Cgpg
YGBydWJ5CmN1cnJlbnRfdXNlcgpgYGAKCllvdSBjYW4gYWNjZXNzIHRoZSBz
ZXNzaW9uIGZvciB0aGlzIHNjb3BlOgoKYGBgcnVieQp1c2VyX3Nlc3Npb24K
YGBgCgpBZnRlciBzaWduaW5nIGluIGEgdXNlciwgY29uZmlybWluZyB0aGUg
YWNjb3VudCBvciB1cGRhdGluZyB0aGUgcGFzc3dvcmQsIERldmlzZSB3aWxs
IGxvb2sgZm9yIGEgc2NvcGVkIHJvb3QgcGF0aCB0byByZWRpcmVjdCB0by4g
Rm9yIGluc3RhbmNlLCB3aGVuIHVzaW5nIGEgYDp1c2VyYCByZXNvdXJjZSwg
dGhlIGB1c2VyX3Jvb3RfcGF0aGAgd2lsbCBiZSB1c2VkIGlmIGl0IGV4aXN0
czsgb3RoZXJ3aXNlLCB0aGUgZGVmYXVsdCBgcm9vdF9wYXRoYCB3aWxsIGJl
IHVzZWQuIFRoaXMgbWVhbnMgdGhhdCB5b3UgbmVlZCB0byBzZXQgdGhlIHJv
b3QgaW5zaWRlIHlvdXIgcm91dGVzOgoKYGBgcnVieQpyb290IHRvOiAnaG9t
ZSNpbmRleCcKYGBgCgpZb3UgY2FuIGFsc28gb3ZlcnJpZGUgYGFmdGVyX3Np
Z25faW5fcGF0aF9mb3JgIGFuZCBgYWZ0ZXJfc2lnbl9vdXRfcGF0aF9mb3Jg
IHRvIGN1c3RvbWl6ZSB5b3VyIHJlZGlyZWN0IGhvb2tzLgoKTm90aWNlIHRo
YXQgaWYgeW91ciBEZXZpc2UgbW9kZWwgaXMgY2FsbGVkIGBNZW1iZXJgIGlu
c3RlYWQgb2YgYFVzZXJgLCBmb3IgZXhhbXBsZSwgdGhlbiB0aGUgaGVscGVy
cyBhdmFpbGFibGUgYXJlOgoKYGBgcnVieQpiZWZvcmVfYWN0aW9uIDphdXRo
ZW50aWNhdGVfbWVtYmVyIQoKbWVtYmVyX3NpZ25lZF9pbj8KCmN1cnJlbnRf
bWVtYmVyCgptZW1iZXJfc2Vzc2lvbgpgYGAKCiMjIyBDb25maWd1cmluZyBN
b2RlbHMKClRoZSBEZXZpc2UgbWV0aG9kIGluIHlvdXIgbW9kZWxzIGFsc28g
YWNjZXB0cyBzb21lIG9wdGlvbnMgdG8gY29uZmlndXJlIGl0cyBtb2R1bGVz
LiBGb3IgZXhhbXBsZSwgeW91IGNhbiBjaG9vc2UgdGhlIGNvc3Qgb2YgdGhl
IGhhc2hpbmcgYWxnb3JpdGhtIHdpdGg6CgpgYGBydWJ5CmRldmlzZSA6ZGF0
YWJhc2VfYXV0aGVudGljYXRhYmxlLCA6cmVnaXN0ZXJhYmxlLCA6Y29uZmly
bWFibGUsIDpyZWNvdmVyYWJsZSwgc3RyZXRjaGVzOiAxMwpgYGAKCkJlc2lk
ZXMgYDpzdHJldGNoZXNgLCB5b3UgY2FuIGRlZmluZSBgOnBlcHBlcmAsIGA6
ZW5jcnlwdG9yYCwgYDpjb25maXJtX3dpdGhpbmAsIGA6cmVtZW1iZXJfZm9y
YCwgYDp0aW1lb3V0X2luYCwgYDp1bmxvY2tfaW5gIGFtb25nIG90aGVyIG9w
dGlvbnMuIEZvciBtb3JlIGRldGFpbHMsIHNlZSB0aGUgaW5pdGlhbGl6ZXIg
ZmlsZSB0aGF0IHdhcyBjcmVhdGVkIHdoZW4geW91IGludm9rZWQgdGhlICJk
ZXZpc2U6aW5zdGFsbCIgZ2VuZXJhdG9yIGRlc2NyaWJlZCBhYm92ZS4gVGhp
cyBmaWxlIGlzIHVzdWFsbHkgbG9jYXRlZCBhdCBgL2NvbmZpZy9pbml0aWFs
aXplcnMvZGV2aXNlLnJiYC4KCiMjIyBTdHJvbmcgUGFyYW1ldGVycwoKIVtU
aGUgUGFyYW1ldGVyIFNhbml0aXplciBBUEkgaGFzIGNoYW5nZWQgZm9yIERl
dmlzZSA0XShodHRwOi8vbWVzc2FnZXMuaGVsbG9iaXRzLmNvbS93YXJuaW5n
LnN2Zz9tZXNzYWdlPVRoZSUyMFBhcmFtZXRlciUyMFNhbml0aXplciUyMEFQ
SSUyMGhhcyUyMGNoYW5nZWQlMjBmb3IlMjBEZXZpc2UlMjA0KQoKKkZvciBw
cmV2aW91cyBEZXZpc2UgdmVyc2lvbnMgc2VlIGh0dHBzOi8vZ2l0aHViLmNv
bS9wbGF0YWZvcm1hdGVjL2RldmlzZS90cmVlLzMtc3RhYmxlI3N0cm9uZy1w
YXJhbWV0ZXJzKgoKV2hlbiB5b3UgY3VzdG9taXplIHlvdXIgb3duIHZpZXdz
LCB5b3UgbWF5IGVuZCB1cCBhZGRpbmcgbmV3IGF0dHJpYnV0ZXMgdG8gZm9y
bXMuIFJhaWxzIDQgbW92ZWQgdGhlIHBhcmFtZXRlciBzYW5pdGl6YXRpb24g
ZnJvbSB0aGUgbW9kZWwgdG8gdGhlIGNvbnRyb2xsZXIsIGNhdXNpbmcgRGV2
aXNlIHRvIGhhbmRsZSB0aGlzIGNvbmNlcm4gYXQgdGhlIGNvbnRyb2xsZXIg
YXMgd2VsbC4KClRoZXJlIGFyZSBqdXN0IHRocmVlIGFjdGlvbnMgaW4gRGV2
aXNlIHRoYXQgYWxsb3cgYW55IHNldCBvZiBwYXJhbWV0ZXJzIHRvIGJlIHBh
c3NlZCBkb3duIHRvIHRoZSBtb2RlbCwgdGhlcmVmb3JlIHJlcXVpcmluZyBz
YW5pdGl6YXRpb24uIFRoZWlyIG5hbWVzIGFuZCBkZWZhdWx0IHBlcm1pdHRl
ZCBwYXJhbWV0ZXJzIGFyZToKCiogYHNpZ25faW5gIChgRGV2aXNlOjpTZXNz
aW9uc0NvbnRyb2xsZXIjY3JlYXRlYCkgLSBQZXJtaXRzIG9ubHkgdGhlIGF1
dGhlbnRpY2F0aW9uIGtleXMgKGxpa2UgYGVtYWlsYCkKKiBgc2lnbl91cGAg
KGBEZXZpc2U6OlJlZ2lzdHJhdGlvbnNDb250cm9sbGVyI2NyZWF0ZWApIC0g
UGVybWl0cyBhdXRoZW50aWNhdGlvbiBrZXlzIHBsdXMgYHBhc3N3b3JkYCBh
bmQgYHBhc3N3b3JkX2NvbmZpcm1hdGlvbmAKKiBgYWNjb3VudF91cGRhdGVg
IChgRGV2aXNlOjpSZWdpc3RyYXRpb25zQ29udHJvbGxlciN1cGRhdGVgKSAt
IFBlcm1pdHMgYXV0aGVudGljYXRpb24ga2V5cyBwbHVzIGBwYXNzd29yZGAs
IGBwYXNzd29yZF9jb25maXJtYXRpb25gIGFuZCBgY3VycmVudF9wYXNzd29y
ZGAKCkluIGNhc2UgeW91IHdhbnQgdG8gcGVybWl0IGFkZGl0aW9uYWwgcGFy
YW1ldGVycyAodGhlIGxhenkgd2F54oSiKSwgeW91IGNhbiBkbyBzbyB1c2lu
ZyBhIHNpbXBsZSBiZWZvcmUgYWN0aW9uIGluIHlvdXIgYEFwcGxpY2F0aW9u
Q29udHJvbGxlcmA6CgpgYGBydWJ5CmNsYXNzIEFwcGxpY2F0aW9uQ29udHJv
bGxlciA8IEFjdGlvbkNvbnRyb2xsZXI6OkJhc2UKICBiZWZvcmVfYWN0aW9u
IDpjb25maWd1cmVfcGVybWl0dGVkX3BhcmFtZXRlcnMsIGlmOiA6ZGV2aXNl
X2NvbnRyb2xsZXI/CgogIHByb3RlY3RlZAoKICBkZWYgY29uZmlndXJlX3Bl
cm1pdHRlZF9wYXJhbWV0ZXJzCiAgICBkZXZpc2VfcGFyYW1ldGVyX3Nhbml0
aXplci5wZXJtaXQoOnNpZ25fdXAsIGtleXM6IFs6dXNlcm5hbWVdKQogIGVu
ZAplbmQKYGBgCgpUaGUgYWJvdmUgd29ya3MgZm9yIGFueSBhZGRpdGlvbmFs
IGZpZWxkcyB3aGVyZSB0aGUgcGFyYW1ldGVycyBhcmUgc2ltcGxlIHNjYWxh
ciB0eXBlcy4gSWYgeW91IGhhdmUgbmVzdGVkIGF0dHJpYnV0ZXMgKHNheSB5
b3UncmUgdXNpbmcgYGFjY2VwdHNfbmVzdGVkX2F0dHJpYnV0ZXNfZm9yYCks
IHRoZW4geW91IHdpbGwgbmVlZCB0byB0ZWxsIGRldmlzZSBhYm91dCB0aG9z
ZSBuZXN0aW5ncyBhbmQgdHlwZXM6CgpgYGBydWJ5CmNsYXNzIEFwcGxpY2F0
aW9uQ29udHJvbGxlciA8IEFjdGlvbkNvbnRyb2xsZXI6OkJhc2UKICBiZWZv
cmVfYWN0aW9uIDpjb25maWd1cmVfcGVybWl0dGVkX3BhcmFtZXRlcnMsIGlm
OiA6ZGV2aXNlX2NvbnRyb2xsZXI/CgogIHByb3RlY3RlZAoKICBkZWYgY29u
ZmlndXJlX3Blcm1pdHRlZF9wYXJhbWV0ZXJzCiAgICBkZXZpc2VfcGFyYW1l
dGVyX3Nhbml0aXplci5wZXJtaXQoOnNpZ25fdXAsIGtleXM6IFs6Zmlyc3Rf
bmFtZSwgOmxhc3RfbmFtZSwgYWRkcmVzc19hdHRyaWJ1dGVzOiBbOmNvdW50
cnksIDpzdGF0ZSwgOmNpdHksIDphcmVhLCA6cG9zdGFsX2NvZGVdXSkKICBl
bmQKZW5kCmBgYAoKRGV2aXNlIGFsbG93cyB5b3UgdG8gY29tcGxldGVseSBj
aGFuZ2UgRGV2aXNlIGRlZmF1bHRzIG9yIGludm9rZSBjdXN0b20gYmVoYXZp
b3VyIGJ5IHBhc3NpbmcgYSBibG9jazoKClRvIHBlcm1pdCBzaW1wbGUgc2Nh
bGFyIHZhbHVlcyBmb3IgdXNlcm5hbWUgYW5kIGVtYWlsLCB1c2UgdGhpcwoK
YGBgcnVieQpkZWYgY29uZmlndXJlX3Blcm1pdHRlZF9wYXJhbWV0ZXJzCiAg
ZGV2aXNlX3BhcmFtZXRlcl9zYW5pdGl6ZXIucGVybWl0KDpzaWduX2luKSBk
byB8dXNlcl9wYXJhbXN8CiAgICB1c2VyX3BhcmFtcy5wZXJtaXQoOnVzZXJu
YW1lLCA6ZW1haWwpCiAgZW5kCmVuZApgYGAKCklmIHlvdSBoYXZlIHNvbWUg
Y2hlY2tib3hlcyB0aGF0IGV4cHJlc3MgdGhlIHJvbGVzIGEgdXNlciBtYXkg
dGFrZSBvbiByZWdpc3RyYXRpb24sIHRoZSBicm93c2VyIHdpbGwgc2VuZCB0
aG9zZSBzZWxlY3RlZCBjaGVja2JveGVzIGFzIGFuIGFycmF5LiBBbiBhcnJh
eSBpcyBub3Qgb25lIG9mIFN0cm9uZyBQYXJhbWV0ZXJzJyBwZXJtaXR0ZWQg
c2NhbGFycywgc28gd2UgbmVlZCB0byBjb25maWd1cmUgRGV2aXNlIGluIHRo
ZSBmb2xsb3dpbmcgd2F5OgoKYGBgcnVieQpkZWYgY29uZmlndXJlX3Blcm1p
dHRlZF9wYXJhbWV0ZXJzCiAgZGV2aXNlX3BhcmFtZXRlcl9zYW5pdGl6ZXIu
cGVybWl0KDpzaWduX3VwKSBkbyB8dXNlcl9wYXJhbXN8CiAgICB1c2VyX3Bh
cmFtcy5wZXJtaXQoeyByb2xlczogW10gfSwgOmVtYWlsLCA6cGFzc3dvcmQs
IDpwYXNzd29yZF9jb25maXJtYXRpb24pCiAgZW5kCmVuZApgYGAKRm9yIHRo
ZSBsaXN0IG9mIHBlcm1pdHRlZCBzY2FsYXJzLCBhbmQgaG93IHRvIGRlY2xh
cmUgcGVybWl0dGVkIGtleXMgaW4gbmVzdGVkIGhhc2hlcyBhbmQgYXJyYXlz
LCBzZWUKCmh0dHBzOi8vZ2l0aHViLmNvbS9yYWlscy9zdHJvbmdfcGFyYW1l
dGVycyNuZXN0ZWQtcGFyYW1ldGVycwoKSWYgeW91IGhhdmUgbXVsdGlwbGUg
RGV2aXNlIG1vZGVscywgeW91IG1heSB3YW50IHRvIHNldCB1cCBhIGRpZmZl
cmVudCBwYXJhbWV0ZXIgc2FuaXRpemVyIHBlciBtb2RlbC4gSW4gdGhpcyBj
YXNlLCB3ZSByZWNvbW1lbmQgaW5oZXJpdGluZyBmcm9tIGBEZXZpc2U6OlBh
cmFtZXRlclNhbml0aXplcmAgYW5kIGFkZGluZyB5b3VyIG93biBsb2dpYzoK
CmBgYHJ1YnkKY2xhc3MgVXNlcjo6UGFyYW1ldGVyU2FuaXRpemVyIDwgRGV2
aXNlOjpQYXJhbWV0ZXJTYW5pdGl6ZXIKICBkZWYgaW5pdGlhbGl6ZSgqKQog
ICAgc3VwZXIKICAgIHBlcm1pdCg6c2lnbl91cCwga2V5czogWzp1c2VybmFt
ZSwgOmVtYWlsXSkKICBlbmQKZW5kCmBgYAoKQW5kIHRoZW4gY29uZmlndXJl
IHlvdXIgY29udHJvbGxlcnMgdG8gdXNlIGl0OgoKYGBgcnVieQpjbGFzcyBB
cHBsaWNhdGlvbkNvbnRyb2xsZXIgPCBBY3Rpb25Db250cm9sbGVyOjpCYXNl
CiAgcHJvdGVjdGVkCgogIGRlZiBkZXZpc2VfcGFyYW1ldGVyX3Nhbml0aXpl
cgogICAgaWYgcmVzb3VyY2VfY2xhc3MgPT0gVXNlcgogICAgICBVc2VyOjpQ
YXJhbWV0ZXJTYW5pdGl6ZXIubmV3KFVzZXIsIDp1c2VyLCBwYXJhbXMpCiAg
ICBlbHNlCiAgICAgIHN1cGVyICMgVXNlIHRoZSBkZWZhdWx0IG9uZQogICAg
ZW5kCiAgZW5kCmVuZApgYGAKClRoZSBleGFtcGxlIGFib3ZlIG92ZXJyaWRl
cyB0aGUgcGVybWl0dGVkIHBhcmFtZXRlcnMgZm9yIHRoZSB1c2VyIHRvIGJl
IGJvdGggYDp1c2VybmFtZWAgYW5kIGA6ZW1haWxgLiBUaGUgbm9uLWxhenkg
d2F5IHRvIGNvbmZpZ3VyZSBwYXJhbWV0ZXJzIHdvdWxkIGJlIGJ5IGRlZmlu
aW5nIHRoZSBiZWZvcmUgZmlsdGVyIGFib3ZlIGluIGEgY3VzdG9tIGNvbnRy
b2xsZXIuIFdlIGRldGFpbCBob3cgdG8gY29uZmlndXJlIGFuZCBjdXN0b21p
emUgY29udHJvbGxlcnMgaW4gc29tZSBzZWN0aW9ucyBiZWxvdy4KCiMjIyBD
b25maWd1cmluZyB2aWV3cwoKV2UgYnVpbHQgRGV2aXNlIHRvIGhlbHAgeW91
IHF1aWNrbHkgZGV2ZWxvcCBhbiBhcHBsaWNhdGlvbiB0aGF0IHVzZXMgYXV0
aGVudGljYXRpb24uIEhvd2V2ZXIsIHdlIGRvbid0IHdhbnQgdG8gYmUgaW4g
eW91ciB3YXkgd2hlbiB5b3UgbmVlZCB0byBjdXN0b21pemUgaXQuCgpTaW5j
ZSBEZXZpc2UgaXMgYW4gZW5naW5lLCBhbGwgaXRzIHZpZXdzIGFyZSBwYWNr
YWdlZCBpbnNpZGUgdGhlIGdlbS4gVGhlc2Ugdmlld3Mgd2lsbCBoZWxwIHlv
dSBnZXQgc3RhcnRlZCwgYnV0IGFmdGVyIHNvbWUgdGltZSB5b3UgbWF5IHdh
bnQgdG8gY2hhbmdlIHRoZW0uIElmIHRoaXMgaXMgdGhlIGNhc2UsIHlvdSBq
dXN0IG5lZWQgdG8gaW52b2tlIHRoZSBmb2xsb3dpbmcgZ2VuZXJhdG9yLCBh
bmQgaXQgd2lsbCBjb3B5IGFsbCB2aWV3cyB0byB5b3VyIGFwcGxpY2F0aW9u
OgoKYGBgY29uc29sZQokIHJhaWxzIGdlbmVyYXRlIGRldmlzZTp2aWV3cwpg
YGAKCklmIHlvdSBoYXZlIG1vcmUgdGhhbiBvbmUgRGV2aXNlIG1vZGVsIGlu
IHlvdXIgYXBwbGljYXRpb24gKHN1Y2ggYXMgYFVzZXJgIGFuZCBgQWRtaW5g
KSwgeW91IHdpbGwgbm90aWNlIHRoYXQgRGV2aXNlIHVzZXMgdGhlIHNhbWUg
dmlld3MgZm9yIGFsbCBtb2RlbHMuIEZvcnR1bmF0ZWx5LCBEZXZpc2Ugb2Zm
ZXJzIGFuIGVhc3kgd2F5IHRvIGN1c3RvbWl6ZSB2aWV3cy4gQWxsIHlvdSBu
ZWVkIHRvIGRvIGlzIHNldCBgY29uZmlnLnNjb3BlZF92aWV3cyA9IHRydWVg
IGluc2lkZSB0aGUgYGNvbmZpZy9pbml0aWFsaXplcnMvZGV2aXNlLnJiYCBm
aWxlLgoKQWZ0ZXIgZG9pbmcgc28sIHlvdSB3aWxsIGJlIGFibGUgdG8gaGF2
ZSB2aWV3cyBiYXNlZCBvbiB0aGUgcm9sZSBsaWtlIGB1c2Vycy9zZXNzaW9u
cy9uZXdgIGFuZCBgYWRtaW5zL3Nlc3Npb25zL25ld2AuIElmIG5vIHZpZXcg
aXMgZm91bmQgd2l0aGluIHRoZSBzY29wZSwgRGV2aXNlIHdpbGwgdXNlIHRo
ZSBkZWZhdWx0IHZpZXcgYXQgYGRldmlzZS9zZXNzaW9ucy9uZXdgLiBZb3Ug
Y2FuIGFsc28gdXNlIHRoZSBnZW5lcmF0b3IgdG8gZ2VuZXJhdGUgc2NvcGVk
IHZpZXdzOgoKYGBgY29uc29sZQokIHJhaWxzIGdlbmVyYXRlIGRldmlzZTp2
aWV3cyB1c2VycwpgYGAKCklmIHlvdSB3b3VsZCBsaWtlIHRvIGdlbmVyYXRl
IG9ubHkgYSBmZXcgc2V0cyBvZiB2aWV3cywgbGlrZSB0aGUgb25lcyBmb3Ig
dGhlIGByZWdpc3RlcmFibGVgIGFuZCBgY29uZmlybWFibGVgIG1vZHVsZSwK
eW91IGNhbiBwYXNzIGEgbGlzdCBvZiBtb2R1bGVzIHRvIHRoZSBnZW5lcmF0
b3Igd2l0aCB0aGUgYC12YCBmbGFnLgoKYGBgY29uc29sZQokIHJhaWxzIGdl
bmVyYXRlIGRldmlzZTp2aWV3cyAtdiByZWdpc3RyYXRpb25zIGNvbmZpcm1h
dGlvbnMKYGBgCgojIyMgQ29uZmlndXJpbmcgY29udHJvbGxlcnMKCklmIHRo
ZSBjdXN0b21pemF0aW9uIGF0IHRoZSB2aWV3cyBsZXZlbCBpcyBub3QgZW5v
dWdoLCB5b3UgY2FuIGN1c3RvbWl6ZSBlYWNoIGNvbnRyb2xsZXIgYnkgZm9s
bG93aW5nIHRoZXNlIHN0ZXBzOgoKMS4gQ3JlYXRlIHlvdXIgY3VzdG9tIGNv
bnRyb2xsZXJzIHVzaW5nIHRoZSBnZW5lcmF0b3Igd2hpY2ggcmVxdWlyZXMg
YSBzY29wZToKCiAgICBgYGBjb25zb2xlCiAgICAkIHJhaWxzIGdlbmVyYXRl
IGRldmlzZTpjb250cm9sbGVycyBbc2NvcGVdCiAgICBgYGAKCiAgICBJZiB5
b3Ugc3BlY2lmeSBgdXNlcnNgIGFzIHRoZSBzY29wZSwgY29udHJvbGxlcnMg
d2lsbCBiZSBjcmVhdGVkIGluIGBhcHAvY29udHJvbGxlcnMvdXNlcnMvYC4K
ICAgIEFuZCB0aGUgc2Vzc2lvbnMgY29udHJvbGxlciB3aWxsIGxvb2sgbGlr
ZSB0aGlzOgoKICAgIGBgYHJ1YnkKICAgIGNsYXNzIFVzZXJzOjpTZXNzaW9u
c0NvbnRyb2xsZXIgPCBEZXZpc2U6OlNlc3Npb25zQ29udHJvbGxlcgogICAg
ICAjIEdFVCAvcmVzb3VyY2Uvc2lnbl9pbgogICAgICAjIGRlZiBuZXcKICAg
ICAgIyAgIHN1cGVyCiAgICAgICMgZW5kCiAgICAgIC4uLgogICAgZW5kCiAg
ICBgYGAKICAgIChVc2UgdGhlIC1jIGZsYWcgdG8gc3BlY2lmeSBhIGNvbnRy
b2xsZXIsIGZvciBleGFtcGxlOiBgcmFpbHMgZ2VuZXJhdGUgZGV2aXNlOmNv
bnRyb2xsZXJzIHVzZXJzIC1jPXNlc3Npb25zYCkKCjIuIFRlbGwgdGhlIHJv
dXRlciB0byB1c2UgdGhpcyBjb250cm9sbGVyOgoKICAgIGBgYHJ1YnkKICAg
IGRldmlzZV9mb3IgOnVzZXJzLCBjb250cm9sbGVyczogeyBzZXNzaW9uczog
J3VzZXJzL3Nlc3Npb25zJyB9CiAgICBgYGAKCjMuIENvcHkgdGhlIHZpZXdz
IGZyb20gYGRldmlzZS9zZXNzaW9uc2AgdG8gYHVzZXJzL3Nlc3Npb25zYC4g
U2luY2UgdGhlIGNvbnRyb2xsZXIgd2FzIGNoYW5nZWQsIGl0IHdvbid0IHVz
ZSB0aGUgZGVmYXVsdCB2aWV3cyBsb2NhdGVkIGluIGBkZXZpc2Uvc2Vzc2lv
bnNgLgoKNC4gRmluYWxseSwgY2hhbmdlIG9yIGV4dGVuZCB0aGUgZGVzaXJl
ZCBjb250cm9sbGVyIGFjdGlvbnMuCgogICAgWW91IGNhbiBjb21wbGV0ZWx5
IG92ZXJyaWRlIGEgY29udHJvbGxlciBhY3Rpb246CgogICAgYGBgcnVieQog
ICAgY2xhc3MgVXNlcnM6OlNlc3Npb25zQ29udHJvbGxlciA8IERldmlzZTo6
U2Vzc2lvbnNDb250cm9sbGVyCiAgICAgIGRlZiBjcmVhdGUKICAgICAgICAj
IGN1c3RvbSBzaWduLWluIGNvZGUKICAgICAgZW5kCiAgICBlbmQKICAgIGBg
YAoKICAgIE9yIHlvdSBjYW4gc2ltcGx5IGFkZCBuZXcgYmVoYXZpb3VyIHRv
IGl0OgoKICAgIGBgYHJ1YnkKICAgIGNsYXNzIFVzZXJzOjpTZXNzaW9uc0Nv
bnRyb2xsZXIgPCBEZXZpc2U6OlNlc3Npb25zQ29udHJvbGxlcgogICAgICBk
ZWYgY3JlYXRlCiAgICAgICAgc3VwZXIgZG8gfHJlc291cmNlfAogICAgICAg
ICAgQmFja2dyb3VuZFdvcmtlci50cmlnZ2VyKHJlc291cmNlKQogICAgICAg
IGVuZAogICAgICBlbmQKICAgIGVuZAogICAgYGBgCgogICAgVGhpcyBpcyB1
c2VmdWwgZm9yIHRyaWdnZXJpbmcgYmFja2dyb3VuZCBqb2JzIG9yIGxvZ2dp
bmcgZXZlbnRzIGR1cmluZyBjZXJ0YWluIGFjdGlvbnMuCgpSZW1lbWJlciB0
aGF0IERldmlzZSB1c2VzIGZsYXNoIG1lc3NhZ2VzIHRvIGxldCB1c2VycyBr
bm93IGlmIHNpZ24gaW4gd2FzIHN1Y2Nlc3NmdWwgb3IgdW5zdWNjZXNzZnVs
LiBEZXZpc2UgZXhwZWN0cyB5b3VyIGFwcGxpY2F0aW9uIHRvIGNhbGwgYGZs
YXNoWzpub3RpY2VdYCBhbmQgYGZsYXNoWzphbGVydF1gIGFzIGFwcHJvcHJp
YXRlLiBEbyBub3QgcHJpbnQgdGhlIGVudGlyZSBmbGFzaCBoYXNoLCBwcmlu
dCBvbmx5IHNwZWNpZmljIGtleXMuIEluIHNvbWUgY2lyY3Vtc3RhbmNlcywg
RGV2aXNlIGFkZHMgYSBgOnRpbWVkb3V0YCBrZXkgdG8gdGhlIGZsYXNoIGhh
c2gsIHdoaWNoIGlzIG5vdCBtZWFudCBmb3IgZGlzcGxheS4gUmVtb3ZlIHRo
aXMga2V5IGZyb20gdGhlIGhhc2ggaWYgeW91IGludGVuZCB0byBwcmludCB0
aGUgZW50aXJlIGhhc2guCgojIyMgQ29uZmlndXJpbmcgcm91dGVzCgpEZXZp
c2UgYWxzbyBzaGlwcyB3aXRoIGRlZmF1bHQgcm91dGVzLiBJZiB5b3UgbmVl
ZCB0byBjdXN0b21pemUgdGhlbSwgeW91IHNob3VsZCBwcm9iYWJseSBiZSBh
YmxlIHRvIGRvIGl0IHRocm91Z2ggdGhlIGRldmlzZV9mb3IgbWV0aG9kLiBJ
dCBhY2NlcHRzIHNldmVyYWwgb3B0aW9ucyBsaWtlIDpjbGFzc19uYW1lLCA6
cGF0aF9wcmVmaXggYW5kIHNvIG9uLCBpbmNsdWRpbmcgdGhlIHBvc3NpYmls
aXR5IHRvIGNoYW5nZSBwYXRoIG5hbWVzIGZvciBJMThuOgoKYGBgcnVieQpk
ZXZpc2VfZm9yIDp1c2VycywgcGF0aDogJ2F1dGgnLCBwYXRoX25hbWVzOiB7
IHNpZ25faW46ICdsb2dpbicsIHNpZ25fb3V0OiAnbG9nb3V0JywgcGFzc3dv
cmQ6ICdzZWNyZXQnLCBjb25maXJtYXRpb246ICd2ZXJpZmljYXRpb24nLCB1
bmxvY2s6ICd1bmJsb2NrJywgcmVnaXN0cmF0aW9uOiAncmVnaXN0ZXInLCBz
aWduX3VwOiAnY21vbl9sZXRfbWVfaW4nIH0KYGBgCgpCZSBzdXJlIHRvIGNo
ZWNrIGBkZXZpc2VfZm9yYCBbZG9jdW1lbnRhdGlvbl0oaHR0cDovL3d3dy5y
dWJ5ZG9jLmluZm8vZ2l0aHViL3BsYXRhZm9ybWF0ZWMvZGV2aXNlL21hc3Rl
ci9BY3Rpb25EaXNwYXRjaC9Sb3V0aW5nL01hcHBlciUzQWRldmlzZV9mb3Ip
IGZvciBkZXRhaWxzLgoKSWYgeW91IGhhdmUgdGhlIG5lZWQgZm9yIG1vcmUg
ZGVlcCBjdXN0b21pemF0aW9uLCBmb3IgaW5zdGFuY2UgdG8gYWxzbyBhbGxv
dyAiL3NpZ25faW4iIGJlc2lkZXMgIi91c2Vycy9zaWduX2luIiwgYWxsIHlv
dSBuZWVkIHRvIGRvIGlzIGNyZWF0ZSB5b3VyIHJvdXRlcyBub3JtYWxseSBh
bmQgd3JhcCB0aGVtIGluIGEgYGRldmlzZV9zY29wZWAgYmxvY2sgaW4gdGhl
IHJvdXRlcjoKCmBgYHJ1YnkKZGV2aXNlX3Njb3BlIDp1c2VyIGRvCiAgZ2V0
ICdzaWduX2luJywgdG86ICdkZXZpc2Uvc2Vzc2lvbnMjbmV3JwplbmQKYGBg
CgpUaGlzIHdheSwgeW91IHRlbGwgRGV2aXNlIHRvIHVzZSB0aGUgc2NvcGUg
YDp1c2VyYCB3aGVuICIvc2lnbl9pbiIgaXMgYWNjZXNzZWQuIE5vdGljZSBg
ZGV2aXNlX3Njb3BlYCBpcyBhbHNvIGFsaWFzZWQgYXMgYGFzYCBpbiB5b3Vy
IHJvdXRlci4KClBsZWFzZSBub3RlOiBZb3Ugd2lsbCBzdGlsbCBuZWVkIHRv
IGFkZCBgZGV2aXNlX2ZvcmAgaW4geW91ciByb3V0ZXMgaW4gb3JkZXIgdG8g
dXNlIGhlbHBlciBtZXRob2RzIHN1Y2ggYXMgYGN1cnJlbnRfdXNlcmAuCgpg
YGBydWJ5CmRldmlzZV9mb3IgOnVzZXJzLCBza2lwOiA6YWxsCmBgYAoKIyMj
IEkxOG4KCkRldmlzZSB1c2VzIGZsYXNoIG1lc3NhZ2VzIHdpdGggSTE4biwg
aW4gY29uanVuY3Rpb24gd2l0aCB0aGUgZmxhc2gga2V5cyA6bm90aWNlIGFu
ZCA6YWxlcnQuIFRvIGN1c3RvbWl6ZSB5b3VyIGFwcCwgeW91IGNhbiBzZXQg
dXAgeW91ciBsb2NhbGUgZmlsZToKCmBgYHlhbWwKZW46CiAgZGV2aXNlOgog
ICAgc2Vzc2lvbnM6CiAgICAgIHNpZ25lZF9pbjogJ1NpZ25lZCBpbiBzdWNj
ZXNzZnVsbHkuJwpgYGAKCllvdSBjYW4gYWxzbyBjcmVhdGUgZGlzdGluY3Qg
bWVzc2FnZXMgYmFzZWQgb24gdGhlIHJlc291cmNlIHlvdSd2ZSBjb25maWd1
cmVkIHVzaW5nIHRoZSBzaW5ndWxhciBuYW1lIGdpdmVuIGluIHJvdXRlczoK
CmBgYHlhbWwKZW46CiAgZGV2aXNlOgogICAgc2Vzc2lvbnM6CiAgICAgIHVz
ZXI6CiAgICAgICAgc2lnbmVkX2luOiAnV2VsY29tZSB1c2VyLCB5b3UgYXJl
IHNpZ25lZCBpbi4nCiAgICAgIGFkbWluOgogICAgICAgIHNpZ25lZF9pbjog
J0hlbGxvIGFkbWluIScKYGBgCgpUaGUgRGV2aXNlIG1haWxlciB1c2VzIGEg
c2ltaWxhciBwYXR0ZXJuIHRvIGNyZWF0ZSBzdWJqZWN0IG1lc3NhZ2VzOgoK
YGBgeWFtbAplbjoKICBkZXZpc2U6CiAgICBtYWlsZXI6CiAgICAgIGNvbmZp
cm1hdGlvbl9pbnN0cnVjdGlvbnM6CiAgICAgICAgc3ViamVjdDogJ0hlbGxv
IGV2ZXJ5Ym9keSEnCiAgICAgICAgdXNlcl9zdWJqZWN0OiAnSGVsbG8gVXNl
ciEgUGxlYXNlIGNvbmZpcm0geW91ciBlbWFpbCcKICAgICAgcmVzZXRfcGFz
c3dvcmRfaW5zdHJ1Y3Rpb25zOgogICAgICAgIHN1YmplY3Q6ICdSZXNldCBp
bnN0cnVjdGlvbnMnCmBgYAoKVGFrZSBhIGxvb2sgYXQgb3VyIGxvY2FsZSBm
aWxlIHRvIGNoZWNrIGFsbCBhdmFpbGFibGUgbWVzc2FnZXMuIFlvdSBtYXkg
YWxzbyBiZSBpbnRlcmVzdGVkIGluIG9uZSBvZiB0aGUgbWFueSB0cmFuc2xh
dGlvbnMgdGhhdCBhcmUgYXZhaWxhYmxlIG9uIG91ciB3aWtpOgoKaHR0cHM6
Ly9naXRodWIuY29tL3BsYXRhZm9ybWF0ZWMvZGV2aXNlL3dpa2kvSTE4bgoK
Q2F1dGlvbjogRGV2aXNlIENvbnRyb2xsZXJzIGluaGVyaXQgZnJvbSBBcHBs
aWNhdGlvbkNvbnRyb2xsZXIuIElmIHlvdXIgYXBwIHVzZXMgbXVsdGlwbGUg
bG9jYWxlcywgeW91IHNob3VsZCBiZSBzdXJlIHRvIHNldCBJMThuLmxvY2Fs
ZSBpbiBBcHBsaWNhdGlvbkNvbnRyb2xsZXIuCgojIyMgVGVzdCBoZWxwZXJz
CgpEZXZpc2UgaW5jbHVkZXMgc29tZSB0ZXN0IGhlbHBlcnMgZm9yIGNvbnRy
b2xsZXIgYW5kIGludGVncmF0aW9uIHRlc3RzLgpJbiBvcmRlciB0byB1c2Ug
dGhlbSwgeW91IG5lZWQgdG8gaW5jbHVkZSB0aGUgcmVzcGVjdGl2ZSBtb2R1
bGUgaW4geW91ciB0ZXN0CmNhc2VzL3NwZWNzLgoKIyMjIENvbnRyb2xsZXIg
dGVzdHMKCkNvbnRyb2xsZXIgdGVzdHMgcmVxdWlyZSB0aGF0IHlvdSBpbmNs
dWRlIGBEZXZpc2U6OlRlc3Q6OkNvbnRyb2xsZXJIZWxwZXJzYCBvbgp5b3Vy
IHRlc3QgY2FzZSBvciBpdHMgcGFyZW50IGBBY3Rpb25Db250cm9sbGVyOjpU
ZXN0Q2FzZWAgc3VwZXJjbGFzcy4KRm9yIFJhaWxzIDUsIGluY2x1ZGUgYERl
dmlzZTo6VGVzdDo6SW50ZWdyYXRpb25IZWxwZXJzYCBpbnN0ZWFkLCBzaW5j
ZSB0aGUgc3VwZXJjbGFzcwpmb3IgY29udHJvbGxlciB0ZXN0cyBoYXMgYmVl
biBjaGFuZ2VkIHRvIEFjdGlvbkRpc3BhdGNoOjpJbnRlZ3JhdGlvblRlc3QK
KGZvciBtb3JlIGRldGFpbHMsIHNlZSB0aGUgW0ludGVncmF0aW9uIHRlc3Rz
XSgjaW50ZWdyYXRpb24tdGVzdHMpIHNlY3Rpb24pLgoKYGBgcnVieQpjbGFz
cyBQb3N0c0NvbnRyb2xsZXJUZXN0IDwgQWN0aW9uQ29udHJvbGxlcjo6VGVz
dENhc2UKICBpbmNsdWRlIERldmlzZTo6VGVzdDo6Q29udHJvbGxlckhlbHBl
cnMKZW5kCmBgYAoKSWYgeW91J3JlIHVzaW5nIFJTcGVjLCB5b3UgY2FuIHB1
dCB0aGUgZm9sbG93aW5nIGluc2lkZSBhIGZpbGUgbmFtZWQKYHNwZWMvc3Vw
cG9ydC9kZXZpc2UucmJgIG9yIGluIHlvdXIgYHNwZWMvc3BlY19oZWxwZXIu
cmJgIChvcgpgc3BlYy9yYWlsc19oZWxwZXIucmJgIGlmIHlvdSBhcmUgdXNp
bmcgYHJzcGVjLXJhaWxzYCk6CgpgYGBydWJ5ClJTcGVjLmNvbmZpZ3VyZSBk
byB8Y29uZmlnfAogIGNvbmZpZy5pbmNsdWRlIERldmlzZTo6VGVzdDo6Q29u
dHJvbGxlckhlbHBlcnMsIHR5cGU6IDpjb250cm9sbGVyCiAgY29uZmlnLmlu
Y2x1ZGUgRGV2aXNlOjpUZXN0OjpDb250cm9sbGVySGVscGVycywgdHlwZTog
OnZpZXcKZW5kCmBgYAoKSnVzdCBiZSBzdXJlIHRoYXQgdGhpcyBpbmNsdXNp
b24gaXMgbWFkZSAqYWZ0ZXIqIHRoZSBgcmVxdWlyZSAncnNwZWMvcmFpbHMn
YCBkaXJlY3RpdmUuCgpOb3cgeW91IGFyZSByZWFkeSB0byB1c2UgdGhlIGBz
aWduX2luYCBhbmQgYHNpZ25fb3V0YCBtZXRob2RzIG9uIHlvdXIgY29udHJv
bGxlcgp0ZXN0czoKCmBgYHJ1YnkKc2lnbl9pbiBAdXNlcgpzaWduX2luIEB1
c2VyLCBzY29wZTogOmFkbWluCmBgYAoKSWYgeW91IGFyZSB0ZXN0aW5nIERl
dmlzZSBpbnRlcm5hbCBjb250cm9sbGVycyBvciBhIGNvbnRyb2xsZXIgdGhh
dCBpbmhlcml0cwpmcm9tIERldmlzZSdzLCB5b3UgbmVlZCB0byB0ZWxsIERl
dmlzZSB3aGljaCBtYXBwaW5nIHNob3VsZCBiZSB1c2VkIGJlZm9yZSBhCnJl
cXVlc3QuIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgRGV2aXNlIGdldHMg
dGhpcyBpbmZvcm1hdGlvbiBmcm9tIHRoZSByb3V0ZXIsCmJ1dCBzaW5jZSBj
b250cm9sbGVyIHRlc3RzIGRvIG5vdCBwYXNzIHRocm91Z2ggdGhlIHJvdXRl
ciwgaXQgbmVlZHMgdG8gYmUgc3RhdGVkCmV4cGxpY2l0bHkuIEZvciBleGFt
cGxlLCBpZiB5b3UgYXJlIHRlc3RpbmcgdGhlIHVzZXIgc2NvcGUsIHNpbXBs
eSB1c2U6CgpgYGBydWJ5CnRlc3QgJ0dFVCBuZXcnIGRvCiAgIyBNaW1pYyB0
aGUgcm91dGVyIGJlaGF2aW9yIG9mIHNldHRpbmcgdGhlIERldmlzZSBzY29w
ZSB0aHJvdWdoIHRoZSBlbnYuCiAgQHJlcXVlc3QuZW52WydkZXZpc2UubWFw
cGluZyddID0gRGV2aXNlLm1hcHBpbmdzWzp1c2VyXQoKICAjIFVzZSB0aGUg
c2lnbl9pbiBoZWxwZXIgdG8gc2lnbiBpbiBhIGZpeHR1cmUgYFVzZXJgIHJl
Y29yZC4KICBzaWduX2luIHVzZXJzKDphbGljZSkKCiAgZ2V0IDpuZXcKCiAg
IyBhc3NlcnQgc29tZXRoaW5nCmVuZApgYGAKCiMjIyBJbnRlZ3JhdGlvbiB0
ZXN0cwoKSW50ZWdyYXRpb24gdGVzdCBoZWxwZXJzIGFyZSBhdmFpbGFibGUg
YnkgaW5jbHVkaW5nIHRoZQpgRGV2aXNlOjpUZXN0OjpJbnRlZ3JhdGlvbkhl
bHBlcnNgIG1vZHVsZS4KCmBgYHJ1YnkKY2xhc3MgUG9zdHNUZXN0cyA8IEFj
dGlvbkRpc3BhdGNoOjpJbnRlZ3JhdGlvblRlc3QKICBpbmNsdWRlIERldmlz
ZTo6VGVzdDo6SW50ZWdyYXRpb25IZWxwZXJzCmVuZApgYGAKCk5vdyB5b3Ug
Y2FuIHVzZSB0aGUgZm9sbG93aW5nIGBzaWduX2luYCBhbmQgYHNpZ25fb3V0
YCBtZXRob2RzIGluIHlvdXIgaW50ZWdyYXRpb24KdGVzdHM6CgpgYGBydWJ5
CnNpZ25faW4gdXNlcnMoOmJvYikKc2lnbl9pbiB1c2Vycyg6Ym9iKSwgc2Nv
cGU6IDphZG1pbgoKc2lnbl9vdXQgOnVzZXIKYGBgCgpSU3BlYyB1c2VycyBj
YW4gaW5jbHVkZSB0aGUgYEludGVncmF0aW9uSGVscGVyc2AgbW9kdWxlIG9u
IHRoZWlyIGA6ZmVhdHVyZWAgc3BlY3MuCgpgYGBydWJ5ClJTcGVjLmNvbmZp
Z3VyZSBkbyB8Y29uZmlnfAogIGNvbmZpZy5pbmNsdWRlIERldmlzZTo6VGVz
dDo6SW50ZWdyYXRpb25IZWxwZXJzLCB0eXBlOiA6ZmVhdHVyZQplbmQKYGBg
CgpVbmxpa2UgY29udHJvbGxlciB0ZXN0cywgaW50ZWdyYXRpb24gdGVzdHMg
ZG8gbm90IG5lZWQgdG8gc3VwcGx5IHRoZQpgZGV2aXNlLm1hcHBpbmdgIGBl
bnZgIHZhbHVlLCBhcyB0aGUgbWFwcGluZyBjYW4gYmUgaW5mZXJyZWQgYnkg
dGhlIHJvdXRlcyB0aGF0CmFyZSBleGVjdXRlZCBpbiB5b3VyIHRlc3RzLgoK
WW91IGNhbiByZWFkIG1vcmUgYWJvdXQgdGVzdGluZyB5b3VyIFJhaWxzIDMg
LSBSYWlscyA0IGNvbnRyb2xsZXJzIHdpdGggUlNwZWMgaW4gdGhlIHdpa2k6
CgoqIGh0dHBzOi8vZ2l0aHViLmNvbS9wbGF0YWZvcm1hdGVjL2RldmlzZS93
aWtpL0hvdy1UbzotVGVzdC1jb250cm9sbGVycy13aXRoLVJhaWxzLShhbmQt
UlNwZWMpCgojIyMgT21uaUF1dGgKCkRldmlzZSBjb21lcyB3aXRoIE9tbmlB
dXRoIHN1cHBvcnQgb3V0IG9mIHRoZSBib3ggdG8gYXV0aGVudGljYXRlIHdp
dGggb3RoZXIgcHJvdmlkZXJzLiBUbyB1c2UgaXQsIHNpbXBseSBzcGVjaWZ5
IHlvdXIgT21uaUF1dGggY29uZmlndXJhdGlvbiBpbiBgY29uZmlnL2luaXRp
YWxpemVycy9kZXZpc2UucmJgOgoKYGBgcnVieQpjb25maWcub21uaWF1dGgg
OmdpdGh1YiwgJ0FQUF9JRCcsICdBUFBfU0VDUkVUJywgc2NvcGU6ICd1c2Vy
LHB1YmxpY19yZXBvJwpgYGAKCllvdSBjYW4gcmVhZCBtb3JlIGFib3V0IE9t
bmlBdXRoIHN1cHBvcnQgaW4gdGhlIHdpa2k6CgoqIGh0dHBzOi8vZ2l0aHVi
LmNvbS9wbGF0YWZvcm1hdGVjL2RldmlzZS93aWtpL09tbmlBdXRoOi1PdmVy
dmlldwoKIyMjIENvbmZpZ3VyaW5nIG11bHRpcGxlIG1vZGVscwoKRGV2aXNl
IGFsbG93cyB5b3UgdG8gc2V0IHVwIGFzIG1hbnkgRGV2aXNlIG1vZGVscyBh
cyB5b3Ugd2FudC4gSWYgeW91IHdhbnQgdG8gaGF2ZSBhbiBBZG1pbiBtb2Rl
bCB3aXRoIGp1c3QgYXV0aGVudGljYXRpb24gYW5kIHRpbWVvdXQgZmVhdHVy
ZXMsIGluIGFkZGl0aW9uIHRvIHRoZSBVc2VyIG1vZGVsIGFib3ZlLCBqdXN0
IHJ1bjoKCmBgYHJ1YnkKIyBDcmVhdGUgYSBtaWdyYXRpb24gd2l0aCB0aGUg
cmVxdWlyZWQgZmllbGRzCmNyZWF0ZV90YWJsZSA6YWRtaW5zIGRvIHx0fAog
IHQuc3RyaW5nIDplbWFpbAogIHQuc3RyaW5nIDplbmNyeXB0ZWRfcGFzc3dv
cmQKICB0LnRpbWVzdGFtcHMgbnVsbDogZmFsc2UKZW5kCgojIEluc2lkZSB5
b3VyIEFkbWluIG1vZGVsCmRldmlzZSA6ZGF0YWJhc2VfYXV0aGVudGljYXRh
YmxlLCA6dGltZW91dGFibGUKCiMgSW5zaWRlIHlvdXIgcm91dGVzCmRldmlz
ZV9mb3IgOmFkbWlucwoKIyBJbnNpZGUgeW91ciBwcm90ZWN0ZWQgY29udHJv
bGxlcgpiZWZvcmVfYWN0aW9uIDphdXRoZW50aWNhdGVfYWRtaW4hCgojIElu
c2lkZSB5b3VyIGNvbnRyb2xsZXJzIGFuZCB2aWV3cwphZG1pbl9zaWduZWRf
aW4/CmN1cnJlbnRfYWRtaW4KYWRtaW5fc2Vzc2lvbgpgYGAKCkFsdGVybmF0
aXZlbHksIHlvdSBjYW4gc2ltcGx5IHJ1biB0aGUgRGV2aXNlIGdlbmVyYXRv
ci4KCktlZXAgaW4gbWluZCB0aGF0IHRob3NlIG1vZGVscyB3aWxsIGhhdmUg
Y29tcGxldGVseSBkaWZmZXJlbnQgcm91dGVzLiBUaGV5ICoqZG8gbm90Kiog
YW5kICoqY2Fubm90Kiogc2hhcmUgdGhlIHNhbWUgY29udHJvbGxlciBmb3Ig
c2lnbiBpbiwgc2lnbiBvdXQgYW5kIHNvIG9uLiBJbiBjYXNlIHlvdSB3YW50
IHRvIGhhdmUgZGlmZmVyZW50IHJvbGVzIHNoYXJpbmcgdGhlIHNhbWUgYWN0
aW9ucywgd2UgcmVjb21tZW5kIHRoYXQgeW91IHVzZSBhIHJvbGUtYmFzZWQg
YXBwcm9hY2gsIGJ5IGVpdGhlciBwcm92aWRpbmcgYSByb2xlIGNvbHVtbiBv
ciB1c2luZyBhIGRlZGljYXRlZCBnZW0gZm9yIGF1dGhvcml6YXRpb24uCgoj
IyMgQWN0aXZlSm9iIEludGVncmF0aW9uCgpJZiB5b3UgYXJlIHVzaW5nIFJh
aWxzIDQuMiBhbmQgQWN0aXZlSm9iIHRvIGRlbGl2ZXIgQWN0aW9uTWFpbGVy
IG1lc3NhZ2VzIGluIHRoZQpiYWNrZ3JvdW5kIHRocm91Z2ggYSBxdWV1aW5n
IGJhY2stZW5kLCB5b3UgY2FuIHNlbmQgRGV2aXNlIGVtYWlscyB0aHJvdWdo
IHlvdXIKZXhpc3RpbmcgcXVldWUgYnkgb3ZlcnJpZGluZyB0aGUgYHNlbmRf
ZGV2aXNlX25vdGlmaWNhdGlvbmAgbWV0aG9kIGluIHlvdXIgbW9kZWwuCgpg
YGBydWJ5CmRlZiBzZW5kX2RldmlzZV9ub3RpZmljYXRpb24obm90aWZpY2F0
aW9uLCAqYXJncykKICBkZXZpc2VfbWFpbGVyLnNlbmQobm90aWZpY2F0aW9u
LCBzZWxmLCAqYXJncykuZGVsaXZlcl9sYXRlcgplbmQKYGBgCgojIyMgUGFz
c3dvcmQgcmVzZXQgdG9rZW5zIGFuZCBSYWlscyBsb2dzCgpJZiB5b3UgZW5h
YmxlIHRoZSBbUmVjb3ZlcmFibGVdKGh0dHA6Ly9ydWJ5ZG9jLmluZm8vZ2l0
aHViL3BsYXRhZm9ybWF0ZWMvZGV2aXNlL21hc3Rlci9EZXZpc2UvTW9kZWxz
L1JlY292ZXJhYmxlKSBtb2R1bGUsIG5vdGUgdGhhdCBhIHN0b2xlbiBwYXNz
d29yZCByZXNldCB0b2tlbiBjb3VsZCBnaXZlIGFuIGF0dGFja2VyIGFjY2Vz
cyB0byB5b3VyIGFwcGxpY2F0aW9uLiBEZXZpc2UgdGFrZXMgZWZmb3J0IHRv
IGdlbmVyYXRlIHJhbmRvbSwgc2VjdXJlIHRva2VucywgYW5kIHN0b3JlcyBv
bmx5IHRva2VuIGRpZ2VzdHMgaW4gdGhlIGRhdGFiYXNlLCBuZXZlciBwbGFp
bnRleHQuIEhvd2V2ZXIgdGhlIGRlZmF1bHQgbG9nZ2luZyBiZWhhdmlvciBp
biBSYWlscyBjYW4gY2F1c2UgcGxhaW50ZXh0IHRva2VucyB0byBsZWFrIGlu
dG8gbG9nIGZpbGVzOgoKMS4gQWN0aW9uIE1haWxlciBsb2dzIHRoZSBlbnRp
cmUgY29udGVudHMgb2YgYWxsIG91dGdvaW5nIGVtYWlscyB0byB0aGUgREVC
VUcgbGV2ZWwuIFBhc3N3b3JkIHJlc2V0IHRva2VucyBkZWxpdmVyZWQgdG8g
dXNlcnMgaW4gZW1haWwgd2lsbCBiZSBsZWFrZWQuCjIuIEFjdGl2ZSBKb2Ig
bG9ncyBhbGwgYXJndW1lbnRzIHRvIGV2ZXJ5IGVucXVldWVkIGpvYiBhdCB0
aGUgSU5GTyBsZXZlbC4gSWYgeW91IGNvbmZpZ3VyZSBEZXZpc2UgdG8gdXNl
IGBkZWxpdmVyX2xhdGVyYCB0byBzZW5kIHBhc3N3b3JkIHJlc2V0IGVtYWls
cywgcGFzc3dvcmQgcmVzZXQgdG9rZW5zIHdpbGwgYmUgbGVha2VkLgoKUmFp
bHMgc2V0cyB0aGUgcHJvZHVjdGlvbiBsb2dnZXIgbGV2ZWwgdG8gREVCVUcg
YnkgZGVmYXVsdC4gQ29uc2lkZXIgY2hhbmdpbmcgeW91ciBwcm9kdWN0aW9u
IGxvZ2dlciBsZXZlbCB0byBXQVJOIGlmIHlvdSB3aXNoIHRvIHByZXZlbnQg
dG9rZW5zIGZyb20gYmVpbmcgbGVha2VkIGludG8geW91ciBsb2dzLiBJbiBg
Y29uZmlnL2Vudmlyb25tZW50cy9wcm9kdWN0aW9uLnJiYDoKCmBgYHJ1YnkK
Y29uZmlnLmxvZ19sZXZlbCA9IDp3YXJuCmBgYAoKCiMjIyBPdGhlciBPUk1z
CgpEZXZpc2Ugc3VwcG9ydHMgQWN0aXZlUmVjb3JkIChkZWZhdWx0KSBhbmQg
TW9uZ29pZC4gVG8gc2VsZWN0IGFub3RoZXIgT1JNLCBzaW1wbHkgcmVxdWly
ZSBpdCBpbiB0aGUgaW5pdGlhbGl6ZXIgZmlsZS4KCiMjIyBSYWlscyBBUEkg
TW9kZQoKUmFpbHMgNSsgaGFzIGEgYnVpbHQtaW4gW0FQSSBNb2RlXShodHRw
czovL2VkZ2VndWlkZXMucnVieW9ucmFpbHMub3JnL2FwaV9hcHAuaHRtbCkg
d2hpY2ggb3B0aW1pemVzIFJhaWxzIGZvciB1c2UgYXMgYW4gQVBJIChvbmx5
KS4gRGV2aXNlIGlzIF9zb21ld2hhdF8gYWJsZSB0byBoYW5kbGUgYXBwbGlj
YXRpb25zIHRoYXQgYXJlIGJ1aWx0IGluIHRoaXMgbW9kZSB3aXRob3V0IGFk
ZGl0aW9uYWwgbW9kaWZpY2F0aW9ucyBpbiB0aGUgc2Vuc2UgdGhhdCBpdCBz
aG91bGQgbm90IHJhaXNlIGV4Y2VwdGlvbnMgYW5kIHRoZSBsaWtlLiBCdXQg
c29tZSBpc3N1ZXMgbWF5IHN0aWxsIGFyaXNlIGR1cmluZyBgZGV2ZWxvcG1l
bnRgL2B0ZXN0aW5nYCwgYXMgd2Ugc3RpbGwgZG9uJ3Qga25vdyB0aGUgZnVs
bCBleHRlbnQgb2YgdGhpcyBjb21wYXRpYmlsaXR5LiAoRm9yIG1vcmUgaW5m
b3JtYXRpb24sIHNlZSBbaXNzdWUgIzQ5NDddKGh0dHBzOi8vZ2l0aHViLmNv
bS9wbGF0YWZvcm1hdGVjL2RldmlzZS9pc3N1ZXMvNDk0Ny8pKQoKIyMjIyBT
dXBwb3J0ZWQgQXV0aGVudGljYXRpb24gU3RyYXRlZ2llcwpBUEktb25seSBh
cHBsaWNhdGlvbnMgZG9uJ3Qgc3VwcG9ydCBicm93c2VyLWJhc2VkIGF1dGhl
bnRpY2F0aW9uIHZpYSBjb29raWVzLCB3aGljaCBpcyBkZXZpc2UncyBkZWZh
dWx0LiBZZXQsIGRldmlzZSBjYW4gc3RpbGwgcHJvdmlkZSBhdXRoZW50aWNh
dGlvbiBvdXQgb2YgdGhlIGJveCBpbiB0aG9zZSBjYXNlcyB3aXRoIHRoZSBg
aHR0cF9hdXRoZW50aWNhdGFibGVgIHN0cmF0ZWd5LCB3aGljaCB1c2VzIEhU
VFAgQmFzaWMgQXV0aCBhbmQgYXV0aGVudGljYXRlcyB0aGUgdXNlciBvbiBl
YWNoIHJlcXVlc3QuIChGb3IgbW9yZSBpbmZvLCBzZWUgdGhpcyB3aWtpIGFy
dGljbGUgZm9yIFtIb3cgVG86IFVzZSBIVFRQIEJhc2ljIEF1dGhlbnRpY2F0
aW9uXShodHRwczovL2dpdGh1Yi5jb20vcGxhdGFmb3JtYXRlYy9kZXZpc2Uv
d2lraS9Ib3ctVG86LVVzZS1IVFRQLUJhc2ljLUF1dGhlbnRpY2F0aW9uKSkK
ClRoZSBkZXZpc2UgZGVmYXVsdCBmb3IgSFRUUCBBdXRoIGlzIGRpc2FibGVk
LCBzbyBpdCB3aWxsIG5lZWQgdG8gYmUgZW5hYmxlZCBpbiB0aGUgZGV2aXNl
IGluaXRpYWxpemVyIGZvciB0aGUgZGF0YWJhc2Ugc3RyYXRlZ3k6CgpgYGBy
dWJ5CmNvbmZpZy5odHRwX2F1dGhlbnRpY2F0YWJsZSA9IFs6ZGF0YWJhc2Vd
CmBgYAoKVGhpcyByZXN0cmljdGlvbiBkb2VzIG5vdCBsaW1pdCB5b3UgZnJv
bSBpbXBsZW1lbnRpbmcgY3VzdG9tIHdhcmRlbiBzdHJhdGVnaWVzLCBlaXRo
ZXIgaW4geW91ciBhcHBsaWNhdGlvbiBvciB2aWEgZ2VtLWJhc2VkIGV4dGVu
c2lvbnMgZm9yIGRldmlzZS4KQSBjb21tb24gYXV0aGVudGljYXRpb24gc3Ry
YXRlZ3kgZm9yIEFQSXMgaXMgdG9rZW4tYmFzZWQgYXV0aGVudGljYXRpb24u
IEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIGV4dGVuZGluZyBkZXZpc2UgdG8g
c3VwcG9ydCB0aGlzIHR5cGUgb2YgYXV0aGVudGljYXRpb24gYW5kIG90aGVy
cywgc2VlIHRoZSB3aWtpIGFydGljbGUgZm9yIFtTaW1wbGUgVG9rZW4gQXV0
aGVudGljYXRpb24gRXhhbXBsZXMgYW5kIGFsdGVybmF0aXZlc10oaHR0cHM6
Ly9naXRodWIuY29tL3BsYXRhZm9ybWF0ZWMvZGV2aXNlL3dpa2kvSG93LVRv
Oi1TaW1wbGUtVG9rZW4tQXV0aGVudGljYXRpb24tRXhhbXBsZSNhbHRlcm5h
dGl2ZXMpIG9yIHRoaXMgYmxvZyBwb3N0IG9uIFtDdXN0b20gYXV0aGVudGlj
YXRpb24gbWV0aG9kcyB3aXRoIERldmlzZV0oaHR0cDovL2Jsb2cucGxhdGFm
b3JtYXRlYy5jb20uYnIvMjAxOS8wMS9jdXN0b20tYXV0aGVudGljYXRpb24t
bWV0aG9kcy13aXRoLWRldmlzZS8pLgoKIyMjIyBUZXN0aW5nCkFQSSBNb2Rl
IGNoYW5nZXMgdGhlIG9yZGVyIG9mIHRoZSBtaWRkbGV3YXJlIHN0YWNrLCBh
bmQgdGhpcyBjYW4gY2F1c2UgcHJvYmxlbXMgZm9yIGBEZXZpc2U6OlRlc3Q6
OkludGVncmF0aW9uSGVscGVyc2AuIFRoaXMgcHJvYmxlbSB1c3VhbGx5IHN1
cmZhY2VzIGFzIGFuIGBgYHVuZGVmaW5lZCBtZXRob2QgYFtdPScgZm9yIG5p
bDpOaWxDbGFzc2BgYCBlcnJvciB3aGVuIHVzaW5nIGludGVncmF0aW9uIHRl
c3QgaGVscGVycywgc3VjaCBhcyBgI3NpZ25faW5gLiBUaGUgc29sdXRpb24g
aXMgc2ltcGx5IHRvIHJlb3JkZXIgdGhlIG1pZGRsZXdhcmVzIGJ5IGFkZGlu
ZyB0aGUgZm9sbG93aW5nIHRvIHRlc3QucmI6CgpgYGBydWJ5ClJhaWxzLmFw
cGxpY2F0aW9uLmNvbmZpZy5taWRkbGV3YXJlLmluc2VydF9iZWZvcmUgV2Fy
ZGVuOjpNYW5hZ2VyLCBBY3Rpb25EaXNwYXRjaDo6Q29va2llcwpSYWlscy5h
cHBsaWNhdGlvbi5jb25maWcubWlkZGxld2FyZS5pbnNlcnRfYmVmb3JlIFdh
cmRlbjo6TWFuYWdlciwgQWN0aW9uRGlzcGF0Y2g6OlNlc3Npb246OkNvb2tp
ZVN0b3JlCmBgYAoKRm9yIGEgZGVlcGVyIHVuZGVyc3RhbmRpbmcgb2YgdGhp
cywgcmV2aWV3IFt0aGlzIGlzc3VlXShodHRwczovL2dpdGh1Yi5jb20vcGxh
dGFmb3JtYXRlYy9kZXZpc2UvaXNzdWVzLzQ2OTYpLgoKQWRkaXRpb25hbGx5
IGJlIG1pbmRmdWwgdGhhdCB3aXRob3V0IHZpZXdzIHN1cHBvcnRlZCwgc29t
ZSBlbWFpbC1iYXNlZCBmbG93cyBmcm9tIENvbmZpcm1hYmxlLCBSZWNvdmVy
YWJsZSBhbmQgTG9ja2FibGUgYXJlIG5vdCBzdXBwb3J0ZWQgZGlyZWN0bHkg
YXQgdGhpcyB0aW1lLgoKIyMgQWRkaXRpb25hbCBpbmZvcm1hdGlvbgoKIyMj
IEhlcm9rdQoKVXNpbmcgRGV2aXNlIG9uIEhlcm9rdSB3aXRoIFJ1Ynkgb24g
UmFpbHMgMy4yIHJlcXVpcmVzIHNldHRpbmc6CgpgYGBydWJ5CmNvbmZpZy5h
c3NldHMuaW5pdGlhbGl6ZV9vbl9wcmVjb21waWxlID0gZmFsc2UKYGBgCgpS
ZWFkIG1vcmUgYWJvdXQgdGhlIHBvdGVudGlhbCBpc3N1ZXMgYXQgaHR0cDov
L2d1aWRlcy5ydWJ5b25yYWlscy5vcmcvYXNzZXRfcGlwZWxpbmUuaHRtbAoK
IyMjIFdhcmRlbgoKRGV2aXNlIGlzIGJhc2VkIG9uIFdhcmRlbiwgd2hpY2gg
aXMgYSBnZW5lcmFsIFJhY2sgYXV0aGVudGljYXRpb24gZnJhbWV3b3JrIGNy
ZWF0ZWQgYnkgRGFuaWVsIE5laWdobWFuLiBXZSBlbmNvdXJhZ2UgeW91IHRv
IHJlYWQgbW9yZSBhYm91dCBXYXJkZW4gaGVyZToKCmh0dHBzOi8vZ2l0aHVi
LmNvbS9oYXNzb3gvd2FyZGVuCgojIyMgQ29udHJpYnV0b3JzCgpXZSBoYXZl
IGEgbG9uZyBsaXN0IG9mIHZhbHVlZCBjb250cmlidXRvcnMuIENoZWNrIHRo
ZW0gYWxsIGF0OgoKaHR0cHM6Ly9naXRodWIuY29tL3BsYXRhZm9ybWF0ZWMv
ZGV2aXNlL2dyYXBocy9jb250cmlidXRvcnMKCiMjIExpY2Vuc2UKCk1JVCBM
aWNlbnNlLiBDb3B5cmlnaHQgMjAwOS0yMDE5IFBsYXRhZm9ybWF0ZWMuIGh0
dHA6Ly9wbGF0YWZvcm1hdGVjLmNvbS5icgoKWW91IGFyZSBub3QgZ3JhbnRl
ZCByaWdodHMgb3IgbGljZW5zZXMgdG8gdGhlIHRyYWRlbWFya3Mgb2YgUGxh
dGFmb3JtYXRlYywgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUg
RGV2aXNlIG5hbWUgb3IgbG9nby4K
",,20382,"bGFuZ3VhZ2U6IHJ1YnkKCnJ2bToKICAtIDIuMS4xMAogIC0gMi4yLjEwCiAg
LSAyLjMuOAogIC0gMi40LjUKICAtIDIuNS4zCiAgLSAyLjYuMAogIC0gcnVi
eS1oZWFkCgpnZW1maWxlOgogIC0gR2VtZmlsZQogIC0gZ2VtZmlsZXMvR2Vt
ZmlsZS5yYWlscy02LjAtc3RhYmxlCiAgLSBnZW1maWxlcy9HZW1maWxlLnJh
aWxzLTUuMi1zdGFibGUKICAtIGdlbWZpbGVzL0dlbWZpbGUucmFpbHMtNS4w
LXN0YWJsZQogIC0gZ2VtZmlsZXMvR2VtZmlsZS5yYWlscy00LjItc3RhYmxl
CiAgLSBnZW1maWxlcy9HZW1maWxlLnJhaWxzLTQuMS1zdGFibGUKCm1hdHJp
eDoKICBleGNsdWRlOgogICAgLSBydm06IDIuMS4xMAogICAgICBnZW1maWxl
OiBHZW1maWxlCiAgICAtIHJ2bTogMi4xLjEwCiAgICAgIGdlbWZpbGU6IGdl
bWZpbGVzL0dlbWZpbGUucmFpbHMtNi4wLXN0YWJsZQogICAgLSBydm06IDIu
MS4xMAogICAgICBnZW1maWxlOiBnZW1maWxlcy9HZW1maWxlLnJhaWxzLTUu
Mi1zdGFibGUKICAgIC0gcnZtOiAyLjEuMTAKICAgICAgZ2VtZmlsZTogZ2Vt
ZmlsZXMvR2VtZmlsZS5yYWlscy01LjAtc3RhYmxlCiAgICAtIHJ2bTogMi4y
LjEwCiAgICAgIGdlbWZpbGU6IEdlbWZpbGUKICAgIC0gcnZtOiAyLjIuMTAK
ICAgICAgZ2VtZmlsZTogZ2VtZmlsZXMvR2VtZmlsZS5yYWlscy02LjAtc3Rh
YmxlCiAgICAtIHJ2bTogMi4yLjEwCiAgICAgIGdlbWZpbGU6IGdlbWZpbGVz
L0dlbWZpbGUucmFpbHMtNS4yLXN0YWJsZQogICAgLSBydm06IDIuMy44CiAg
ICAgIGdlbWZpbGU6IGdlbWZpbGVzL0dlbWZpbGUucmFpbHMtNi4wLXN0YWJs
ZQogICAgLSBydm06IDIuNC41CiAgICAgIGdlbWZpbGU6IGdlbWZpbGVzL0dl
bWZpbGUucmFpbHMtNC4xLXN0YWJsZQogICAgLSBydm06IDIuNC41CiAgICAg
IGdlbWZpbGU6IGdlbWZpbGVzL0dlbWZpbGUucmFpbHMtNi4wLXN0YWJsZQog
ICAgLSBydm06IDIuNS4zCiAgICAgIGdlbWZpbGU6IGdlbWZpbGVzL0dlbWZp
bGUucmFpbHMtNC4xLXN0YWJsZQogICAgLSBydm06IDIuNi4wCiAgICAgIGdl
bWZpbGU6IGdlbWZpbGVzL0dlbWZpbGUucmFpbHMtNC4xLXN0YWJsZQogICAg
LSBydm06IDIuNi4wCiAgICAgIGdlbWZpbGU6IGdlbWZpbGVzL0dlbWZpbGUu
cmFpbHMtNC4yLXN0YWJsZQogICAgLSBydm06IHJ1YnktaGVhZAogICAgICBn
ZW1maWxlOiBnZW1maWxlcy9HZW1maWxlLnJhaWxzLTQuMS1zdGFibGUKICAg
IC0gcnZtOiBydWJ5LWhlYWQKICAgICAgZ2VtZmlsZTogZ2VtZmlsZXMvR2Vt
ZmlsZS5yYWlscy00LjItc3RhYmxlCiAgICAtIGVudjogREVWSVNFX09STT1t
b25nb2lkCiAgICAgIGdlbWZpbGU6IEdlbWZpbGUKICAgIC0gZW52OiBERVZJ
U0VfT1JNPW1vbmdvaWQKICAgICAgZ2VtZmlsZTogZ2VtZmlsZXMvR2VtZmls
ZS5yYWlscy01LjAtc3RhYmxlCiAgICAtIGVudjogREVWSVNFX09STT1tb25n
b2lkCiAgICAgIGdlbWZpbGU6IGdlbWZpbGVzL0dlbWZpbGUucmFpbHMtNS4y
LXN0YWJsZQogICAgLSBlbnY6IERFVklTRV9PUk09bW9uZ29pZAogICAgICBn
ZW1maWxlOiBnZW1maWxlcy9HZW1maWxlLnJhaWxzLTYuMC1zdGFibGUKICBh
bGxvd19mYWlsdXJlczoKICAgIC0gcnZtOiBydWJ5LWhlYWQKICAgIC0gZ2Vt
ZmlsZTogZ2VtZmlsZXMvR2VtZmlsZS5yYWlscy02LjAtc3RhYmxlCgpzZXJ2
aWNlczoKICAtIG1vbmdvZGIKCmNhY2hlOiBidW5kbGVyCgplbnY6CiAgbWF0
cml4OgogICAgLSBERVZJU0VfT1JNPWFjdGl2ZV9yZWNvcmQKICAgIC0gREVW
SVNFX09STT1tb25nb2lkCgpiZWZvcmVfaW5zdGFsbDoKICAtIGdlbSB1bmlu
c3RhbGwgLXYgJz49IDInIC1pICQocnZtIGdlbWRpcilAZ2xvYmFsIC1heCBi
dW5kbGVyIHx8IHRydWUKICAtIGdlbSBpbnN0YWxsIGJ1bmRsZXIgLXYgJzwg
MicKICAtICJybSAke0JVTkRMRV9HRU1GSUxFfS5sb2NrIgoKYmVmb3JlX3Nj
cmlwdDogImJ1bmRsZSB1cGRhdGUiCgpzY3JpcHQ6ICJiaW4vdGVzdCIKCm5v
dGlmaWNhdGlvbnM6CiAgZW1haWw6IGZhbHNlCiAgc2xhY2s6CiAgICBvbl9w
dWxsX3JlcXVlc3RzOiBmYWxzZQogICAgb25fc3VjY2VzczogY2hhbmdlCiAg
ICBvbl9mYWlsdXJlOiBhbHdheXMKICAgIHNlY3VyZTogUTNNK2ttdWRlM0Zq
aXNpYkVlZUdlMHdTTVhndndMSCt2TDdacng5Ly9xNFF0a2ZuclEvQkJNdlk5
S1h4UEVzTkYrZXlzNFlvcFlqVGtKOHVSbWVib1VBVFcvb1E0SnJ2Myt1M3pr
SUhLMnNGbi9RMmNRV3BLNXcrQ2JnRW5IUGpLWW5VdTM0YjA5bmpYVGdEbHIv
bXF0YlBxcktlWjFkTGxwS1hDQi9xNEdZPQo=
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
