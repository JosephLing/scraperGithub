name,id,description,language,open_issues,stargazers_count,topics,subscribers_count,fork,forks_url,readme,config,watch,travis0,travis1,travis2,travis3,travis4,travis5,travis6,travis7,travis8,travis9,travis10,travis11,travis12,travis13,travis14,travis15,travis16,travis17,travis18,travis19,travis20,travis21,travis22,travis23,gitlab0,gitlab1,gitlab2,gitlab3,gitlab4,gitlab5,gitlab6,gitlab7,gitlab8,gitlab9,gitlab10,gitlab11,gitlab12,gitlab13,gitlab14,gitlab15,gitlab16,gitlab17,gitlab18,gitlab19,gitlab20,gitlab21,gitlab22,gitlab23,jenkinsPipeline0,jenkinsPipeline1,jenkinsPipeline2,jenkinsPipeline3,jenkinsPipeline4,jenkinsPipeline5,jenkinsPipeline6,jenkinsPipeline7,jenkinsPipeline8,jenkinsPipeline9,jenkinsPipeline10,jenkinsPipeline11,jenkinsPipeline12,jenkinsPipeline13,jenkinsPipeline14,jenkinsPipeline15,jenkinsPipeline16,jenkinsPipeline17,jenkinsPipeline18,jenkinsPipeline19,jenkinsPipeline20,jenkinsPipeline21,jenkinsPipeline22,jenkinsPipeline23,cirrus0,cirrus1,cirrus2,cirrus3,cirrus4,cirrus5,cirrus6,cirrus7,cirrus8,cirrus9,cirrus10,cirrus11,cirrus12,cirrus13,cirrus14,cirrus15,cirrus16,cirrus17,cirrus18,cirrus19,cirrus20,cirrus21,cirrus22,cirrus23,github0,github1,github2,github3,github4,github5,github6,github7,github8,github9,github10,github11,github12,github13,github14,github15,github16,github17,github18,github19,github20,github21,github22,github23,cds0,cds1,cds2,cds3,cds4,cds5,cds6,cds7,cds8,cds9,cds10,cds11,cds12,cds13,cds14,cds15,cds16,cds17,cds18,cds19,cds20,cds21,cds22,cds23,azure0,azure1,azure2,azure3,azure4,azure5,azure6,azure7,azure8,azure9,azure10,azure11,azure12,azure13,azure14,azure15,azure16,azure17,azure18,azure19,azure20,azure21,azure22,azure23,circleci0,circleci1,circleci2,circleci3,circleci4,circleci5,circleci6,circleci7,circleci8,circleci9,circleci10,circleci11,circleci12,circleci13,circleci14,circleci15,circleci16,circleci17,circleci18,circleci19,circleci20,circleci21,circleci22,circleci23
b'awesome-falsehood',67687706,b':pill: Curated list of falsehoods programmers believe in.',,4,10936,,329,False,b'https://api.github.com/repos/kdeldycke/awesome-falsehood/forks',"IyBBd2Vzb21lIEZhbHNlaG9vZCBbIVtBd2Vzb21lXShodHRwczovL2Nkbi5y
YXdnaXQuY29tL3NpbmRyZXNvcmh1cy9hd2Vzb21lL2Q3MzA1ZjM4ZDI5ZmVk
NzhmYTg1NjUyZTNhNjNlMTU0ZGQ4ZTg4MjkvbWVkaWEvYmFkZ2Uuc3ZnKV0o
aHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9hd2Vzb21lKSBbIVtC
dWlsZCBTdGF0dXNdKGh0dHBzOi8vdHJhdmlzLWNpLm9yZy9rZGVsZHlja2Uv
YXdlc29tZS1mYWxzZWhvb2Quc3ZnP2JyYW5jaD1tYXN0ZXIpXShodHRwczov
L3RyYXZpcy1jaS5vcmcva2RlbGR5Y2tlL2F3ZXNvbWUtZmFsc2Vob29kKQoK
QSBjdXJhdGVkIGxpc3Qgb2YgYXdlc29tZSBmYWxzZWhvb2RzIHByb2dyYW1t
ZXJzIGJlbGlldmUgaW4uCgo+IFRoZSBsb2dpYyBvZiB0aGUgd29ybGQgaXMg
cHJpb3IgdG8gYWxsIHRydXRoIGFuZCBmYWxzZWhvb2QuCj4gLSBMdWR3aWcg
V2l0dGdlbnN0ZWluCgoKIyMgQ29udGVudHMKCi0gW0ZvcmV3b3JkXSgjZm9y
ZXdvcmQpCi0tLQotIFtNZXRhXSgjbWV0YSkKLSBbQXJ0c10oI2FydHMpCi0g
W0J1c2luZXNzXSgjYnVzaW5lc3MpCi0gW0RhdGVzIGFuZCBUaW1lXSgjZGF0
ZXMtYW5kLXRpbWUpCi0gW0VkdWNhdGlvbl0oI2VkdWNhdGlvbikKLSBbRW1h
aWxzXSgjZW1haWxzKQotIFtHZW9ncmFwaHldKCNnZW9ncmFwaHkpCi0gW0h1
bWFuIElkZW50aXR5XSgjaHVtYW4taWRlbnRpdHkpCi0gW0ludGVybmF0aW9u
YWxpemF0aW9uXSgjaW50ZXJuYXRpb25hbGl6YXRpb24pCi0gW01hbmFnZW1l
bnRdKCNtYW5hZ2VtZW50KQotIFtNdWx0aW1lZGlhXSgjbXVsdGltZWRpYSkK
LSBbTmV0d29ya3NdKCNuZXR3b3JrcykKLSBbUGhvbmUgTnVtYmVyc10oI3Bo
b25lLW51bWJlcnMpCi0gW1Bvc3RhbCBBZGRyZXNzZXNdKCNwb3N0YWwtYWRk
cmVzc2VzKQotIFtTY2llbmNlXSgjc2NpZW5jZSkKLSBbU29jaWV0eV0oI3Nv
Y2lldHkpCi0gW1NvZnR3YXJlIEVuZ2luZWVyaW5nXSgjc29mdHdhcmUtZW5n
aW5lZXJpbmcpCi0gW1R5cG9ncmFwaHldKCN0eXBvZ3JhcGh5KQotLS0KLSBb
Q29udHJpYnV0aW5nXSgjY29udHJpYnV0aW5nKQotIFtHb29kIENhbmRpZGF0
ZXNdKCNnb29kLWNhbmRpZGF0ZXMpCiAgICAtIFsqRmFsc2Vob29kKiBBcnRp
Y2xlc10oI2ZhbHNlaG9vZC1hcnRpY2xlcykKICAgIC0gW0xpYnJhcmllc10o
I2xpYnJhcmllcykKICAgIC0gW0RhdGEgU3RydWN0dXJlc10oI2RhdGEtc3Ry
dWN0dXJlcykKLSBbTGljZW5zZV0oI2xpY2Vuc2UpCgoKIyMgRm9yZXdvcmQK
CipGYWxzZWhvb2QqIGFydGljbGVzIGFyZSBhIGZvcm0gb2YgY29tbWVudGFy
eSBvbiBhIHBhcnRpY3VsYXIgc3ViamVjdCwgYW5kIGFyZQphcHByZWNpYXRl
ZCBieSB0aGUgZGV2ZWxvcGVyIGNvbW11bml0eSBhdCBsYXJnZSBmb3IgdGhl
aXIgZWZmZWN0aXZlbmVzcyBhbmQKdGVyc2VuZXNzLiBUaGV5J3JlIGEgY29u
dmVuaWVudCB3cml0dGVuIGZvcm0gdG8gYXBwcm9hY2ggYW4gdW5mYW1pbGlh
ciBkb21haW4KYnkgZGlzcGVsbGluZyBteXRocywgcG9pbnQgb3V0IGNvbW1v
biBwaXRmYWxscywgc2hvdyBpbmNvbnNpc3RlbmNpZXMgYW5kCnN1YnRsZXRp
ZXMuCgpJbiBhIHNlbnNlLCAqRmFsc2Vob29kKiBhcnRpY2xlcyBhcmUgYSBz
dWl0ZSBvZiB3b3JkeSB1bml0LXRlc3RzIGNvdmVyaW5nCmV4dGVuc2l2ZSBl
ZGdlLWNhc2VzIHByb3ZpZGVkIGJ5IHJlYWwtd29ybGQgdXNhZ2UuCgoKIyMg
TWV0YQoKLSBbRmFsc2Vob29kcyBQcm9ncmFtbWVycwpCZWxpZXZlXShodHRw
czovL3NwYWNlbmluamEuY29tLzIwMTUvMTIvMDcvZmFsc2Vob29kcy1wcm9n
cmFtbWVycy1iZWxpZXZlLykgLSBBCmJyaWVmIGxpc3Qgb2YgY29tbW9uIGZh
bHNlaG9vZHMuIEEgZ3JlYXQgb3ZlcnZpZXcgYW5kIHF1aWNrIGludHJvZHVj
dGlvbiBpbnRvCnRoZSB3b3JsZCBvZiBmYWxzZWhvb2RzLgotIFtGYWxzZWhv
b2RzIEFib3V0ClByb2dyYW1taW5nXShodHRwczovL2NoaXNlbGFwcC5jb20v
dXNlci90dG1yaWNodGVyL3JlcG9zaXRvcnkvZ25nL2RvYy90cnVuay9vdXRw
dXQvZmFsc2Vob29kcy5odG1sKSAtCkEgaHVtYmxpbmcgYW5kIGZ1biBsaXN0
IG9uIHByb2dyYW1taW5nIGFuZCBwcm9ncmFtbWVycyB0aGVtc2VsdmVzLgot
IFtGYWxzZWhvb2RzIEFib3V0IEZhbHNlaG9vZHMKTGlzdHNdKGh0dHBzOi8v
a2V2aW4uZGVsZHlja2UuY29tLzIwMTYvMTIvZmFsc2Vob29kcy1wcm9ncmFt
bWVycy1iZWxpZXZlLWFib3V0LWZhbHNlaG9vZHMtbGlzdHMvKSAtCk1ldGEg
Y29tbWVudGFyeSBvbiBob3cgdGhlc2UgZmFsc2Vob29kcyBzaG91bGRuJ3Qg
YmUgaGFuZGxlZC4KCgojIyBBcnRzCgotIFtGYWxzZWhvb2RzIEFib3V0Ck11
c2ljXShodHRwczovL2xpdGVyYXRlcHJvZ3JhbW1lci5ibG9nc3BvdC5mci8y
MDE2LzA3L2ZhbHNlaG9vZHMtcHJvZ3JhbW1lcnMtYmVsaWV2ZS1hYm91dC5o
dG1sKSAtCkZhbHNlIGFzc3VtcHRpb24gdGhhdCBtaWdodCBiZSBtYWRlIGlu
IGNvZGlmeWluZyBtdXNpYy4KLSBbRmFsc2Vob29kcyBBYm91dCBBcnRdKGh0
dHA6Ly9hcnRzeS5naXRodWIuaW8vYmxvZy8yMDE4LzA0LzE4L3Byb2dyYW1t
ZXItbWlzY29uY2VwdGlvbnMtYWJvdXQtYXJ0Lykg4oCTCkNvbW1vbiBtaXNj
b25jZXB0aW9ucyBhYm91dCBhcnQuCgoKIyMgQnVzaW5lc3MKCi0gW0ZhbHNl
aG9vZHMgQWJvdXQgT25saW5lClNob3BwaW5nXShodHRwOi8vd2llc21hbm4u
Y29kaWZlcmVzLm5ldC93b3JkcHJlc3MvP3A9MjIyMDEpIC0gQ292ZXJzIHBy
aWNlcywKY3VycmVuY2llcyBhbmQgaW52ZW50b3J5LgotIFtGYWxzZWhvb2Rz
IEFib3V0ClByaWNlc10oaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vcmdzLzY1
MDk1ODUpIC0gQ292ZXJzIGN1cnJlbmNpZXMsIGFtb3VudHMgYW5kCmxvY2Fs
aXphdGlvbi4KLSBbRmFsc2Vob29kcyBBYm91dApJQkFOc10oaHR0cHM6Ly9n
aXRodWIuY29tL2dsb2JhbGNpdGl6ZW4vcGhwLWliYW4vYmxvYi9tYXN0ZXIv
ZG9jcy9GQUxTRUhPT0RTLm1kKSAtCkludGVybmF0aW9uYWwgQmFuayBBY2Nv
dW50IE51bWJlcnMgYXJlIG5vdCBpbW11bmUgdG8gbWlzdGFrZXMuCi0gW0Zh
bHNlaG9vZHMgQWJvdXQKRWNvbm9taWNzXShodHRwOi8vZXhwbGUudGl2ZS5v
cmcvYmxhcmcvMjAxNi8wOS8yMi9mYWxzZWhvb2RzLXByb2dyYW1tZXJzLWJl
bGlldmUtYWJvdXQtZWNvbm9taWNzLykgLQpFY29ub21pY3MgYXJlIG5vdCBz
aW1wbGUgb3IgcmF0aW9uYWwuCi0gW0ZhbHNlaG9vZHMgQWJvdXQKQ2Fyc10o
aHR0cHM6Ly9naXRodWIuY29tL2RyaXZldG8vZmFsc2Vob29kcy1hYm91dC1j
YXJzKSAtCkV2ZW4gc29tZXRoaW5nIGFzIGNvbW1vbiBhcyBkZWZpbmluZyBh
IGNhciBpcyBmdWxsIG9mIHBpdGZhbGxzLgotIFtDTERSIGN1cnJlbmN5CmRl
ZmluaXRpb25zXShodHRwOi8vdW5pY29kZS5vcmcvY2xkci90cmFjL2Jyb3dz
ZXIvdGFncy9yZWxlYXNlLTMxL2NvbW1vbi9zdXBwbGVtZW50YWwvc3VwcGxl
bWVudGFsRGF0YS54bWwjTDgxKSAtCkN1cnJlbmN5IHZhbGlkaXR5IGRhdGUg
cmFuZ2VzIG92ZXJsYXAgZHVlIHRvIHJldm9sdHMsIGludmFzaW9ucywgbmV3
CmNvbnN0aXR1dGlvbnMsIGFuZCBzbG93IHBsYW5uZWQgYWRvcHRpb24uCi0g
W2B0YXhgXShodHRwczovL2dpdGh1Yi5jb20vY29tbWVyY2VndXlzL3RheCkg
LSBBIFBIUCA1LjQrIHRheCBtYW5hZ2VtZW50CmxpYnJhcnkuCgoKIyMgRGF0
ZXMgYW5kIFRpbWUKCi0gW0ZhbHNlaG9vZHMgQWJvdXQKVGltZV0oaHR0cDov
L2luZmluaXRldW5kby5jb20vcG9zdC8yNTMyNjk5OTYyOC9mYWxzZWhvb2Rz
LXByb2dyYW1tZXJzLWJlbGlldmUtYWJvdXQtdGltZSkgLQpTZW1pbmFsIGFy
dGljbGUgb24gZGF0ZXMgYW5kIHRpbWUuCi0gW01vcmUgRmFsc2Vob29kcyBB
Ym91dApUaW1lXShodHRwOi8vaW5maW5pdGV1bmRvLmNvbS9wb3N0LzI1NTA5
MzU0MDIyL21vcmUtZmFsc2Vob29kcy1wcm9ncmFtbWVycy1iZWxpZXZlLWFi
b3V0LXRpbWUpIC0KUGFydC4gMiBvZiB0aGUgYXJ0aWNsZSBhYm92ZS4KLSBb
RmFsc2Vob29kcyBBYm91dCBUaW1lIGFuZCBUaW1lClpvbmVzXShodHRwczov
L3d3dy5jcmVhdGl2ZWRlbGV0aW9uLmNvbS8yMDE1LzAxLzI4L2ZhbHNlaG9v
ZHMtcHJvZ3JhbW1lcnMtZGF0ZS10aW1lLXpvbmVzLmh0bWwpIC0KQW5vdGhl
ciB0YWtlcyBvbiB0aW1lLXJlbGF0ZWQgZmFsc2Vob29kcywgd2l0aCBhbiBl
bXBoYXNpcyBvbiB0aW1lIHpvbmVzLgotIFtDcml0aXF1ZSBvZiBGYWxzZWhv
b2RzIEFib3V0ClRpbWVdKGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3RoYW5h
dG9zL2VlZTE3MTAwNDc2YTMzNmE3MTFlKSAtIFRha2VzIG9uIHRoZQpmaXJz
dCBhcnRpY2xlIGFib3ZlIGFuZCBwcm92aWRlcyBhbiBleHBsYW5hdGlvbiBv
ZiBlYWNoIGZhbHNlaG9vZCwgd2l0aCBtb3JlCmNvbnRleHQgYW5kIGV4dGVy
bmFsIHJlc291cmNlcy4KLSBbWW91ciBDYWxlbmRyaWNhbCBGYWxsYWN5IElz
IFRoaW5raW5n4oCmXShodHRwOi8veW91cmNhbGVuZHJpY2FsZmFsbGFjeWlz
LmNvbSkgLQpMaXN0IGNvdmVyaW5nIGludGVyY2FsYXRpb24gYW5kIGN1bHR1
cmFsIGluZmx1ZW5jZSwgbWFkZSBieSBhIGNvbW11bml0eSBvZiBpT1MKYW5k
IG1hY09TIGRldmVsb3BlcnMuCi0gW1RpbWUgWm9uZSBEYXRhYmFzZV0oaHR0
cHM6Ly93d3cuaWFuYS5vcmcvdGltZS16b25lcykgLSBDb2RlIGFuZCBkYXRh
IHRoYXQKcmVwcmVzZW50IHRoZSBoaXN0b3J5IG9mIGxvY2FsIHRpbWUgZm9y
IG1hbnkgcmVwcmVzZW50YXRpdmUgbG9jYXRpb25zIGFyb3VuZAp0aGUgZ2xv
YmUuCi0gW1RoZSBMb25nLCBQYWluZnVsIEhpc3Rvcnkgb2YgVGltZV0oaHR0
cDovL25hZ2d1bS5uby9sdWdtLXRpbWUuaHRtbCkgLSBNb3N0Cm9mIHRoZSBp
ZGlvc3luY3Jhc2llcyBpbiB0aW1lIGtlZXBpbmcgY2FuIGZpbmQgYW4gZXhw
bGFuYXRpb24gaW4gaGlzdG9yeS4KLSBbWW91IEFkdm9jYXRlIGEgQ2FsZW5k
YXIgUmVmb3JtXShodHRwczovL3FudG0ub3JnL2NhbGVuZGFyKSAtIFlvdXIg
aWRlYSB3aWxsCm5vdCB3b3JrLiBUaGlzIGFydGljbGUgdGVsbHMgeW91IHdo
eS4KLSBbU28gWW91IFdhbnQgdG8gQWJvbGlzaCBUaW1lIFpvbmVzXShodHRw
czovL3FudG0ub3JnL2Fib2xpc2gpIOKAkyBBYm9saXNoaW5nCnRpbWV6b25l
cyBtYXkgc291bmQgbGlrZSBhIGdvb2QgaWRlYSwgYnV0IHRoZXJlIGFyZSBx
dWl0ZSBhIGZldyBjb21wbGljYXRpb25zCnRoYXQgbWFrZSBpdCBub3QgcXVp
dGUgc28uCi0gW1RoZSBQcm9ibGVtIHdpdGggVGltZSAmIFRpbWV6b25lc10o
aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0tNXdwbS1nZXNPWSkg
LQpBIHZpZGVvIGFib3V0IHdoeSB5b3Ugc2hvdWxkIG5ldmVyLCBldmVyIGRl
YWwgd2l0aCB0aW1lem9uZXMgaWYgeW91IGNhbiBoZWxwCml0LgotIFskMjYs
MDAwIE92ZXJjb2xsZWN0aW9uIGJ5IExhYm9yCkRlcGFydG1lbnRdKGh0dHA6
Ly9kaWdpdGFsLnZwci5uZXQvcG9zdC9yb3VuZGluZy1lcnJvci1jb21wdXRl
ci1jb2RlLWxlYWRzLTI2MDAwLW92ZXJjb2xsZWN0aW9uLWxhYm9yLWRlcGFy
dG1lbnQpIC0KVGhlIGNvbnNlcXVlbmNlIG9mIHdyb25nIGNhbGVuZGFyIGFj
Y291bnRpbmcuCi0gW0lTTy04NjAxLCBZWVlZLCB5eXl5LCBhbmQgd2h5IHlv
dXIgeWVhciBtYXkgYmUgCndyb25nXShodHRwczovL2VyaWNhc2FkdW4uY29t
LzIwMTgvMTIvMjUvaXNvLTg2MDEteXl5eS15eXl5LWFuZC13aHkteW91ci15
ZWFyLW1heS1iZS13cm9uZy8pIC0KU3RyaW5nIGZvcm1hdHRpbmcgb2YgZGF0
ZSBpcyBoYXJkLgotIFtVVEMgaXMgRW5vdWdoIGZvciBldmVyeW9uZSwgcmln
aHQ/XShodHRwczovL3phY2hob2xtYW4uY29tL3RhbGsvdXRjLWlzLWVub3Vn
aC1mb3ItZXZlcnlvbmUtcmlnaHQpIC0gVGhlcmUgYXJlIGVkZ2UgY2FzZXMg
YWJvdXQgZGF0ZXMgYW5kIHRpbWUgKHNwZWNpZmljYWxseSBVVEMpIHRoYXQg
eW91IHByb2JhYmx5IGhhdmVuJ3QgdGhvdWdodCBvZi4KLSBbU3RvcmluZyBV
VEMgaXMgbm90IGEgc2lsdmVyIGJ1bGxldF0oaHR0cHM6Ly9jb2RlYmxvZy5q
b25za2VldC51ay8yMDE5LzAzLzI3L3N0b3JpbmctdXRjLWlzLW5vdC1hLXNp
bHZlci1idWxsZXQvKSAtICJKdXN0IHN0b3JlIGRhdGVzIGluIFVUQyIgaXMg
bm90IGFsd2F5cyB0aGUgcmlnaHQgYXBwcm9hY2guLgotIFtGYWxzZWhvb2Rz
IGFib3V0IFVuaXggVGltZV0oaHR0cHM6Ly9hbGV4d2xjaGFuLm5ldC8yMDE5
LzA1L2ZhbHNlaG9vZHMtcHJvZ3JhbW1lcnMtYmVsaWV2ZS1hYm91dC11bml4
LXRpbWUvKSAtIE1pbmQgdGhlIGxlYXAgc2Vjb25kIQotIFtXaHkgaXMgc3Vi
dHJhY3RpbmcgdGhlc2UgdHdvIHRpbWVzIChpbiAxOTI3KSBnaXZpbmcgYSBz
dHJhbmdlIHJlc3VsdD9dKGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS82
ODQxNDc5LzU3MzExKSAtIEluZmFtb3VzIFN0YWNrT3ZlcmZsb3cgYW5zd2Vy
IGFib3V0IGJvdGggY29tcGxpY2F0ZWQgaGlzdG9yaWNhbCB0aW1lem9uZXMs
IGFuZCBob3cgaGlzdG9yaWNhbCBkYXRlcyBjYW4gYmUgcmUtaW50ZXJwcmV0
ZWQgYnkgbmV3ZXIgdmVyc2lvbnMgb2Ygc29mdHdhcmUuIAoKCiMjIEVkdWNh
dGlvbgoKLSBbRmFsc2Vob29kcyBDUyBTdHVkZW50cyAoU3RpbGwpIEJlbGll
dmUgVXBvbiBHcmFkdWF0aW5nXShodHRwczovL3d3dy5uZXRtZWlzdGVyLm9y
Zy9ibG9nL2NzLWZhbHNlaG9vZHMuaHRtbCkgLSBBIGxpc3Qgb2YgdGhpbmdz
IChub3Qgb25seSkgY29tcHV0ZXIgc2NpZW5jZSBzdHVkZW50cyB0ZW5kIHRv
IGVycm9uZW91c2x5IGFuZCBhdCB0aW1lcyBzdXJwcmlzaW5nbHkgYmVsaWV2
ZSBldmVuIHRob3VnaCB0aGV5IChwcm9iYWJseSkgc2hvdWxkIGtub3cgYmV0
dGVyLgoKCiMjIEVtYWlscwoKLSBbSSBLbmV3IEhvdyB0byBWYWxpZGF0ZSBh
biBFbWFpbCBBZGRyZXNzIFVudGlsIEkgUmVhZCB0aGUKUkZDXShodHRwczov
L2hhYWNrZWQuY29tL2FyY2hpdmUvMjAwNy8wOC8yMS9pLWtuZXctaG93LXRv
LXZhbGlkYXRlLWFuLWVtYWlsLWFkZHJlc3MtdW50aWwtaS5hc3B4LykgLQpQ
cm92aWRlcyBpbnRyaWNhdGUgZXhhbXBsZXMgdGhhdCBhcmUgdW5zdXNwZWN0
ZWQgdmFsaWQgZW1haWwgYWRkcmVzc2VzCmFjY29yZGluZyB0aGUgUkZDLTgy
Mi4KLSBbU28geW91IHRoaW5rIHlvdSBjYW4gdmFsaWRhdGUgZW1haWwgYWRk
cmVzc2VzIChGT1NERU0gMjAxOCldKGh0dHBzOi8vZm9zZGVtLm9yZy8yMDE4
L3NjaGVkdWxlL2V2ZW50L2VtYWlsX2FkZHJlc3NfcXVpei8pIC0KUHJlc2Vu
dGF0aW9uIG9mIGVkZ2UtY2FzZSBlbWFpbCBhZGRyZXNzZXMgYW5kIHdoeSB5
b3Ugc2hvdWxkIG5vdCB1c2UgcmVnZXggdG8gcGFyc2UgdGhlbS4KCgojIyBH
ZW9ncmFwaHkKCi0gW0ZhbHNlaG9vZHMgQWJvdXQKR2VvZ3JhcGh5XShodHRw
Oi8vd2llc21hbm4uY29kaWZlcmVzLm5ldC93b3JkcHJlc3MvP3A9MTUxODcp
IC0gVGFrZXMgb24gcGxhY2VzLAp0aGVpciBuYW1lcyBhbmQgbG9jYXRpb25z
LgotIFtGYWxzZWhvb2RzIEFib3V0Ck1hcHNdKGh0dHA6Ly93d3cuYXRsZWZy
ZW4ubmV0L3Bvc3QvMjAxNC8wOS9mYWxzZWhvb2RzLXByb2dyYW1tZXJzLWJl
bGlldmUtYWJvdXQtbWFwcy8pIC0KQ292ZXJzIGNvb3JkaW5hdGVzLCBwcm9q
ZWN0aW9uIGFuZCBHSVMuCgoKIyMgSHVtYW4gSWRlbnRpdHkKCi0gW0ZhbHNl
aG9vZHMgQWJvdXQKTmFtZXNdKGh0dHBzOi8vd3d3LmthbHp1bWV1cy5jb20v
MjAxMC8wNi8xNy9mYWxzZWhvb2RzLXByb2dyYW1tZXJzLWJlbGlldmUtYWJv
dXQtbmFtZXMvKSAtClRoZSBhcnRpY2xlIHRoYXQgc3RhcnRlZCBpdCBhbGwu
Ci0gW0ZhbHNlaG9vZHMgQWJvdXQKTmFtZXMg4oCTIFdpdGggRXhhbXBsZXNd
KGh0dHBzOi8vc2hpbmVzb2x1dGlvbnMuY29tLzIwMTgvMDEvMDgvZmFsc2Vo
b29kcy1wcm9ncmFtbWVycy1iZWxpZXZlLWFib3V0LW5hbWVzLXdpdGgtZXhh
bXBsZXMvKSAtCkEgcmV2aXNpdGVkIHZlcnNpb24gb2YgdGhlIGFydGljbGUg
YWJvdmUsIHRoaXMgdGltZSB3aXRoIGRldGFpbGVkIGV4cGxhbmF0aW9ucy4K
LSBGYWxzZWhvb2RzIEFib3V0IEdlbmRlcjogWyMxXShodHRwczovL2dpc3Qu
Z2l0aHViLmNvbS9nYXJiYWRvcy9mODI2MDRlYTYzOWUwZTQ3YmY0NCkgJgpb
IzJdKGh0dHBzOi8vbWVkaXVtLmNvbS9nZW5kZXItMi0wL2ZhbHNlaG9vZHMt
cHJvZ3JhbW1lcnMtYmVsaWV2ZS1hYm91dC1nZW5kZXItZjlhMzUxMmI0Yzlj
KSAtCkdlbmRlciBpcyBwYXJ0IG9mIGh1bWFuIGlkZW50aXR5IGFuZCBoYXMg
aXRzIG93biBzdWJ0bGV0aWVzLgotIFtHYXkgTWFycmlhZ2U6IFRoZSBEYXRh
YmFzZSBFbmdpbmVlcmluZyBQZXJzcGVjdGl2ZV0oaHR0cHM6Ly9xbnRtLm9y
Zy9nYXkpIC0KSG93IHRvIHN0b3JlIGEgbWFycmlhZ2UgaW4gYSBkYXRhYmFz
ZSB3aGlsZSBhZGRyZXNzaW5nIG1vc3Qgb2YgdGhlIGZhbHNlaG9vZHMKYWJv
dXQgZ2VuZGVyLCBuYW1pbmcgYW5kIHJlbGF0aW9uc2hpcHMuCi0gW0ZhbHNl
aG9vZHMgUHJvZ3JhbW1lcnMgQmVsaWV2ZSBBYm91dApGYW1pbGllc10oaHR0
cHM6Ly9zaGtzcHIubW9iaS9ibG9nLzIwMTcvMDMvZmFsc2Vob29kcy1wcm9n
cmFtbWVycy1iZWxpZXZlLWFib3V0LWZhbWlsaWVzLykgLQpZb3UgY2FuJ3Qg
cmVhbGx5IGRlZmluZSBhIGZhbWlseSB3aXRoIHN0cmljdCBydWxlcy4KLSBb
UGVyc29uYWwgTmFtZXMgQXJvdW5kIHRoZQpXb3JsZF0oaHR0cHM6Ly93d3cu
dzMub3JnL0ludGVybmF0aW9uYWwvcXVlc3Rpb25zL3FhLXBlcnNvbmFsLW5h
bWVzKSAtIEhvdyBkbwpwZW9wbGUncyBuYW1lcyBkaWZmZXIgYXJvdW5kIHRo
ZSB3b3JsZCwgYW5kIHdoYXQgYXJlIHRoZSBpbXBsaWNhdGlvbnMgZm9yIHRo
ZQpXZWI/Ci0gW1hLQ0QgIzMyNzogRXhwbG9pdHMgb2YgYQpNb21dKGh0dHBz
Oi8veGtjZC5jb20vMzI3LykgLSBGdW5ueSB0YWtlIG9uIGhvdyBpbXBsZW1l
bnRhdGlvbiBvZiBhIGZhbHNlaG9vZAptaWdodCBsZWFkIHRvIHNlY3VyaXR5
IGhvbGVzLgotIFtIZWxsbywgSeKAmW0gTXIuIE51bGwuIE15IE5hbWUgTWFr
ZXMgTWUgSW52aXNpYmxlIHRvCkNvbXB1dGVyc10oaHR0cHM6Ly93d3cud2ly
ZWQuY29tLzIwMTUvMTEvbnVsbC8pIC0gUmVhbC1saWZlIGV4YW1wbGUgb24g
aG93CmltcGxlbWVudGVkIGZhbHNlaG9vZCBoYXMgbmVnYXRpdmUgaW1wYWN0
IG9uIHNvbWVvbmUncyBsaWZlLgotIFtNeSBuYW1lIGNhdXNlcyBhbiBpc3N1
ZSB3aXRoIGFueSBib29raW5nIV0oaHR0cHM6Ly90cmF2ZWwuc3RhY2tleGNo
YW5nZS5jb20vcXVlc3Rpb25zLzE0OTMyMy9teS1uYW1lLWNhdXNlcy1hbi1p
c3N1ZS13aXRoLWFueS1ib29raW5nLW5hbWVzLWVuZC13aXRoLW1yLWFuZC1t
cnMpIC0KT2xkIGFpcmxpbmUgcmVzZXJ2YXRpb24gc3lzdGVtcyBjb25zaWRl
cnMgdGhlIGBNUmAgc3VmZml4IGFzIGBNaXN0ZXJgIGFuZCBkcm9wcyBpdC4K
LSBbSEw3IHYzClJJTV0oaHR0cHM6Ly93d3cuaGw3Lm9yZy9pbXBsZW1lbnQv
c3RhbmRhcmRzL3Byb2R1Y3RfYnJpZWYuY2ZtP3Byb2R1Y3RfaWQ9MTg2KSAt
CkEgZmxleGlibGUgZGF0YSBtb2RlbCBmb3IgcmVwcmVzZW50aW5nIGh1bWFu
IG5hbWVzLgotIFtBcHBsZSBpT1MKYE5TUGVyc29uTmFtZUNvbXBvbmVudHNG
b3JtYXR0ZXJgXShodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vbGlicmFy
eS9pb3MvZG9jdW1lbnRhdGlvbi9NaXNjZWxsYW5lb3VzL1JlZmVyZW5jZS9O
U1BlcnNvbk5hbWVDb21wb25lbnRzRm9ybWF0dGVyX0NsYXNzL2luZGV4Lmh0
bWwpIC0KTG9jYWxpemVkIHJlcHJlc2VudGF0aW9ucyBvZiB0aGUgY29tcG9u
ZW50cyBvZiBhIHBlcnNvbuKAmXMgbmFtZS4KLSBbRmFsc2Vob29kcyBBYm91
dCBNZV0oaHR0cHM6Ly9za3lsYXJtYWNkb25hbGQuY29tL2ZhbHNlaG9vZHMv
KSAtIElzc3VlcyBhdCB0aGUKaW50ZXJzZWN0aW9uIG9mIG5hbWVzIGFuZCBn
ZW5kZXIgYW5kIGludGVybmF0aW9uYWxpc2F0aW9uLgoKCiMjIEludGVybmF0
aW9uYWxpemF0aW9uCgotIFtGYWxzZWhvb2RzIEFib3V0Ckxhbmd1YWdlXSho
dHRwOi8vZ2FyYmxlZC5iZW5oYW1pbGwuY29tLzIwMTcvMDQvMTgvZmFsc2Vo
b29kcy1wcm9ncmFtbWVycy1iZWxpZXZlLWFib3V0LWxhbmd1YWdlKSAtClRy
YW5zbGF0aW5nIGEgc29mdHdhcmUgZnJvbSBFbmdsaXNoIGlzIG5vdCBhcyBz
dHJhaWdodGZvcndhcmQgYXMgaXQgc2VlbXMgdG8KYmUuCi0gW2kxOG4gVGVz
dGluZyBEYXRhXShodHRwczovL2dpdGh1Yi5jb20vcGF0Y2gvaTE4bi10ZXN0
aW5nKSAtIFJlYWwtd29yZAppbnRlcm5hdGlvbmFsIGFuZCBkaXZlcnNlIG5h
bWUgZGF0YSBmb3IgdW5pdCB0ZXN0aW5nIGFuZCBRQS4KLSBbSW50ZXJuYXRp
b25hbGlzKHopaW5nIENvZGVdKGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dh
dGNoP3Y9MGo3NGpjeFN1blkpIC0KQSB2aWRlbyBhYm91dCB0aGluZ3MgeW91
IG5lZWQgdG8ga2VlcCBpbiBtaW5kIHdoZW4gaW50ZXJuYXRpb25hbGl6aW5n
IHlvdXIKY29kZS4KLSBbTWluaW11bSB0byBLbm93IEFib3V0IFVuaWNvZGUg
YW5kIENoYXJhY3RlciBTZXRzXShodHRwczovL3d3dy5qb2Vsb25zb2Z0d2Fy
ZS5jb20vMjAwMy8xMC8wOC90aGUtYWJzb2x1dGUtbWluaW11bS1ldmVyeS1z
b2Z0d2FyZS1kZXZlbG9wZXItYWJzb2x1dGVseS1wb3NpdGl2ZWx5LW11c3Qt
a25vdy1hYm91dC11bmljb2RlLWFuZC1jaGFyYWN0ZXItc2V0cy1uby1leGN1
c2VzLykgLSBDaGFyYWN0ZXIgZW5jb2RpbmcgZG9lc24ndCBoYXZlIHRvIGJl
IGJhZmZsaW5nLCBidXQgaXQgaGVscHMgdG8gaGF2ZSBhIGJhc2ljIHNldCBv
ZiBrbm93bGVkZ2UKLSBbT2RlIHRvIGEgc2hpcHBpbmcgbGFiZWxdKGh0dHA6
Ly9pLmltZ3VyLmNvbS80SjdJbDBtLmpwZykgLSBDaGFyYWN0ZXIgZW5jb2Rp
bmcgaXMgaGFyZC4KCgojIyBNYW5hZ2VtZW50CgotIFtGYWxzZWhvb2RzIEFi
b3V0IEpvYgpBcHBsaWNhbnRzXShodHRwczovL3dlYi5hcmNoaXZlLm9yZy93
ZWIvMjAxNzAxMTQwMjI4MjAvaHR0cHM6Ly9tZWRpdW0uY29tL0BjcmVhdHJp
eHRpYXJhL2ZhbHNlaG9vZHMtcHJvZ3JhbW1lcnMtYmVsaWV2ZS1hYm91dC1q
b2ItYXBwbGljYW50cy05OTI4MDQzN2M2MTYpIC0KQXNzdW1wdGlvbnMgYWJv
dXQgam9iIGFwcGxpY2FudHMgYW5kIHRoZWlyIGpvYiBoaXN0b3JpZXMgYXJl
buKAmXQgbmVjZXNzYXJpbHkKdHJ1ZS4KCgojIyBNdWx0aW1lZGlhCgotIFtG
YWxzZWhvb2RzIEFib3V0ClZpZGVvXShodHRwczovL2hhYXNuLnh5ei9wb3N0
cy8yMDE2LTEyLTI1LWZhbHNlaG9vZHMtcHJvZ3JhbW1lcnMtYmVsaWV2ZS1h
Ym91dC0lNUJ2aWRlby1zdHVmZiU1RC5odG1sKSAtCkNvdmVyIGl0IGFsbDog
dmlkZW8gZGVjb2RpbmcgYW5kIHBsYXliYWNrLCBmaWxlcywgaW1hZ2Ugc2Nh
bGluZywgY29sb3Igc3BhY2VzCmFuZCBjb252ZXJzaW9uLCBkaXNwbGF5cyBh
bmQgc3VidGl0bGVzLgoKCiMjIE5ldHdvcmtzCgotIFtGYWxzZWhvb2RzIEFi
b3V0Ck5ldHdvcmtzXShodHRwOi8vYmxvZy5lcnJhdGFzZWMuY29tLzIwMTIv
MDYvZmFsc2Vob29kcy1wcm9ncmFtbWVycy1iZWxpZXZlLWFib3V0Lmh0bWwp
IC0KQ292ZXJzIFRDUCwgREhDUCwgRE5TLCBWTEFOcyBhbmQgSVB2NC92Ni4K
LSBbRmFsbGFjaWVzIG9mIERpc3RyaWJ1dGVkCkNvbXB1dGluZ10oaHR0cHM6
Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmFsbGFjaWVzX29mX2Rpc3RyaWJ1
dGVkX2NvbXB1dGluZykgLQpBc3N1bXB0aW9ucyB0aGF0IHByb2dyYW1tZXJz
IG5ldyB0byBkaXN0cmlidXRlZCBhcHBsaWNhdGlvbnMgaW52YXJpYWJseSBt
YWtlLgotIFtUaGVyZeKAmXMgbW9yZSB0aGFuIG9uZSB3YXkgdG8gd3JpdGUg
YW4gSVAgYWRkcmVzc10oaHR0cHM6Ly9tYS50dGlhcy5iZS90aGVyZXMtbW9y
ZS10aGFuLW9uZS13YXktdG8td3JpdGUtYW4taXAtYWRkcmVzcy8pIC0gU29t
ZSBwYXJ0cyBvZiB0aGUgYWRkcmVzcyBhcmUgb3B0aW9uYWwsIG1pbmQgdGhl
IGRlY2ltYWwgYW5kIG9jdGFsIG5vdGF0aW9ucywgYW5kIFtkb24ndCBmb3Jn
ZXQgSVB2Nl0oaHR0cHM6Ly9uZXdzLnljb21iaW5hdG9yLmNvbS9pdGVtP2lk
PTIwMzkwOTgxKSBlaXRoZXIuCi0gW2Bob3N0bmFtZS12YWxpZGF0ZWBdKGh0
dHBzOi8vZ2l0aHViLmNvbS9qYWtlb2doL2hvc3RuYW1lLXZhbGlkYXRlKSAt
IEFuIGF0dGVtcHQgdG8gdmFsaWRhdGUgaG9zdG5hbWVzIGluIFB5dGhvbi4K
CgojIyBQaG9uZSBOdW1iZXJzCgotIFtGYWxzZWhvb2RzIEFib3V0IFBob25l
Ck51bWJlcnNdKGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGVpMThuL2xpYnBo
b25lbnVtYmVyL2Jsb2IvbWFzdGVyL0ZBTFNFSE9PRFMubWQpIC0KQ292ZXJz
IHBob25lIG51bWJlcnMsIHRoZWlyIHJlcHJlc2VudGF0aW9uIGFuZCBtZWFu
aW5nLgotIFtgbGlicGhvbmVudW1iZXJgXShodHRwczovL2dpdGh1Yi5jb20v
Z29vZ2xlaTE4bi9saWJwaG9uZW51bWJlcikgLSBHb29nbGUncwpjb21tb24g
SmF2YSwgQysrIGFuZCBKYXZhU2NyaXB0IGxpYnJhcnkgZm9yIHBhcnNpbmcs
IGZvcm1hdHRpbmcsIGFuZCB2YWxpZGF0aW5nCmludGVybmF0aW9uYWwgcGhv
bmUgbnVtYmVycy4gQWxzbyBhdmFpbGFibGUgZm9yCltDI10oaHR0cHM6Ly9n
aXRodWIuY29tL3R3Y2NsZWdnL2xpYnBob25lbnVtYmVyLWNzaGFycCksCltP
YmplY3RpdmUtQ10oaHR0cHM6Ly9naXRodWIuY29tL2l6aXovbGliUGhvbmVO
dW1iZXItaU9TKSwKW1B5dGhvbl0oaHR0cHM6Ly9naXRodWIuY29tL2Rhdmlk
ZHJ5c2RhbGUvcHl0aG9uLXBob25lbnVtYmVycyksCltSdWJ5XShodHRwczov
L2dpdGh1Yi5jb20vc3N0ZXBoZW5zb24vZ2xvYmFsX3Bob25lKSBhbmQKW1BI
UF0oaHR0cHM6Ly9naXRodWIuY29tL2dpZ2dzZXkvbGlicGhvbmVudW1iZXIt
Zm9yLXBocCkuCgoKIyMgUG9zdGFsIEFkZHJlc3NlcwoKLSBbRmFsc2Vob29k
cyBBYm91dApBZGRyZXNzZXNdKGh0dHBzOi8vd3d3Lm1qdC5tZS51ay9wb3N0
cy9mYWxzZWhvb2RzLXByb2dyYW1tZXJzLWJlbGlldmUtYWJvdXQtYWRkcmVz
c2VzLykgLQpDb3ZlcnMgc3RyZWV0cywgcG9zdGFsIGNvZGVzLCBidWlsZGlu
Z3MsIGNpdGllcyBhbmQgY291bnRyaWVzLgotIFtGYWxzZWhvb2RzIEFib3V0
ClJlc2lkZW5jZV0oaHR0cHM6Ly90d2l0dGVyLmNvbS9zYW1waGlwcGVuL3N0
YXR1cy84MTM4OTY5MTY1MzQ3ODQwMDQpIC0KSXQncyBub3Qgb25seSBhYm91
dCB0aGUgYWRkcmVzcyBpdHNlbGYsIGJ1dCB0aGUgcmVsYXRpb25zaGlwIGJl
dHdlZW4gYSBwZXJzb24gYW5kIGl0cyByZXNpZGVuY2UuCi0gW0xldHRlciBE
ZWxpdmVyZWQgRGVzcGl0ZSBObyBOYW1lLCBObwpBZGRyZXNzXShodHRwczov
L3R3aXR0ZXIuY29tL2xvcmlza3Vtby9zdGF0dXMvNzM1ODUxNTExMzMxMzU2
NjcyKSAtIFVsdGltYXRlCmZhbHNlaG9vZCBhYm91dCBwb3N0YWwgYWRkcmVz
c2VzOiB5b3UgZG8gbm90IG5lZWQgb25lLgotIFtUaGUgQmVhciB3aXRoIEl0
cyBPd24gWklQIENvZGVdKGh0dHBzOi8va290dGtlLm9yZy8xOS8wOC90aGUt
YmVhci13aXRoLWl0cy1vd24temlwLWNvZGUpIC0KU21va2V5IEJlYXIgaGFz
IGhpcyBvd24gWklQIENvZGUgKGAyMDI1MmApIGJlY2F1c2UgaGUgZ2V0cyBz
byBtdWNoIG1haWwuCi0gW1JlZ2V4IGFuZCBQb3N0YWwKQWRkcmVzc2VzXSho
dHRwczovL3NtYXJ0eXN0cmVldHMuY29tL2FydGljbGVzL3JlZ3VsYXItZXhw
cmVzc2lvbnMtZm9yLXN0cmVldC1hZGRyZXNzZXMpIC0KV2h5IHJlZ3VsYXIg
ZXhwcmVzc2lvbnMgYW5kIHN0cmVldCBhZGRyZXNzZXMgZG8gbm90IG1peC4K
LSBbYGxpYmFkZHJlc3NpbnB1dGBdKGh0dHBzOi8vZ2l0aHViLmNvbS9nb29n
bGVpMThuL2xpYmFkZHJlc3NpbnB1dCkgLSBHb29nbGUncwpjb21tb24gQysr
IGFuZCBKYXZhIGxpYnJhcnkgZm9yIHBhcnNpbmcsIGZvcm1hdHRpbmcsIGFu
ZCB2YWxpZGF0aW5nCmludGVybmF0aW9uYWwgcG9zdGFsIGFkZHJlc3Nlcy4K
LSBbYGFkZHJlc3NpbmdgXShodHRwczovL2dpdGh1Yi5jb20vY29tbWVyY2Vn
dXlzL2FkZHJlc3NpbmcpIC0gQSBQSFAgNS40KwphZGRyZXNzaW5nIGxpYnJh
cnksIHBvd2VyZWQgYnkgR29vZ2xlJ3MgZGF0YXNldC4KLSBbYHBvc3RhbC1h
ZGRyZXNzYF0oaHR0cHM6Ly9naXRodWIuY29tL3NjYWxld2F5L3Bvc3RhbC1h
ZGRyZXNzKSAtIFB5dGhvbgptb2R1bGUgdG8gcGFyc2UsIG5vcm1hbGl6ZSBh
bmQgcmVuZGVyIHBvc3RhbCBhZGRyZXNzZXMuCi0gW2BhZGRyZXNzYF0oaHR0
cHM6Ly9naXRodWIuY29tL0Jvb3N0cG9ydC9hZGRyZXNzKSAtIEdvIGxpYnJh
cnkgdG8gdmFsaWRhdGUKYW5kIGZvcm1hdCBhZGRyZXNzZXMgdXNpbmcgR29v
Z2xlJ3MgZGF0YXNldC4KCgojIyBTY2llbmNlCgotIFtGYWxzZWhvb2RzIEFi
b3V0IFN5c3RlbXMgb2YKTWVhc3VyZW1lbnRdKGh0dHBzOi8vd3d3LnN0ZXZl
bW9zZXIub3JnL3Bvc3RzL2Rldi9mYWxzZWhvb2RzLXByb2dyYW1tZXJzLWJl
bGlldmUtYWJvdXQtc3lzdGVtcy1vZi1tZWFzdXJlbWVudC5odG1sKSAtCk9u
IHdvcmtpbmcgd2l0aCBzeXN0ZW1zIG9mIG1lYXN1cmVtZW50IGFuZCBjb252
ZXJ0aW5nIGJldHdlZW4gdGhlbS4KCgojIyBTb2NpZXR5CgotIFtGYWxzZWhv
b2RzIEFib3V0IFBvbGl0aWNhbApBcHBvaW50bWVudHNdKGh0dHBzOi8vdHdp
dHRlci5jb20vb2xpdmVyX2R3L3N0YXR1cy83Mzc5MzA0Mzk1NzU0MDQ1NDQp
IC0KRGVzaWduaW5nIGVsZWN0aW9uIHN5c3RlbXMgaGFzIGl0cyBvd24gdHJp
Y2tzLgotIFtGYWxzZWhvb2RzIEFib3V0IFdvbWVuIEluClRlY2hdKGh0dHBz
Oi8vZ2lzdC5naXRodWIuY29tL1N1LVNoZWUvNWQxYTQxN2ZhOWRlMTljMTU0
NzcpIC0gTXl0aCBhYm91dCB3b21lbgppbiBTVEVNIChTY2llbmNlLCBUZWNo
bm9sb2d5LCBFbmdpbmVlcmluZywgTWF0aCkgaW5kdXN0cmllcy4KCgojIyBT
b2Z0d2FyZSBFbmdpbmVlcmluZwoKLSBbRmFsc2Vob29kcyBBYm91dApWZXJz
aW9uc10oaHR0cHM6Ly9naXRodWIuY29tL3hlbm90ZXJyYWNpZGUvZmFsc2Vo
b29kcy9ibG9iL21hc3Rlci92ZXJzaW9ucy5tZCkgLQpBdHRyaWJ1dGluZyBh
biBpZGVudGl0eSB0byBhIHNvZnR3YXJlIHJlbGVhc2UgbWlnaHQgYmUgaGFy
ZGVyIHRoYW4gdGhvdWdodC4KLSBbRmFsc2Vob29kcyBBYm91dCBCdWlsZApT
eXN0ZW1zXShodHRwczovL3Bvem9ydmxhay5saXZlam91cm5hbC5jb20vMTc0
NzYzLmh0bWwpIC0gQnVpbGRpbmcgc29mdHdhcmUgaXMKaGFyZC4gQnVpbGRp
bmcgc29mdHdhcmUgdGhhdCBidWlsZHMgc29mdHdhcmUgaXMgaGFyZGVyLgot
IFtNeXRocyBBYm91dCBGaWxlClBhdGhzXShodHRwczovL3lha2tpbmcuYnJh
bmNoYWJsZS5jb20vcG9zdHMvZmFsc2Vob29kcy1wcm9ncmFtbWVycy1iZWxp
ZXZlLWFib3V0LWZpbGUtcGF0aHMvKSAtCkRpdmVyc2l0eSBvZiBmaWxlLXN5
c3RlbXMgYW5kIE9TZXMgbWFrZXMgZmlsZSBwYXRocyBhIGxpdHRsZSBoYXJk
ZXIgdGhhbiB3ZQptaWdodCB0aGluayBvZi4KLSBbRmFsc2Vob29kcyBBYm91
dCBSRVNUCkFQSXNdKGh0dHA6Ly9zbGlua3AuY29tL2ZhbHNlaG9vZHMtcHJv
Z3JhbW1lcnMtYmVsaWV2ZS1hYm91dC1hcGlzLmh0bWwpIC0KUGl0ZmFsbHMg
dG8gYmUgbWluZGZ1bCBvZiB3aGVuIGNyZWF0aW5nIGFuZCBkb2N1bWVudGlu
ZyBBUElzLgotIFtGYWxzZWhvb2RzIEFib3V0CkNTVnNdKGh0dHBzOi8vZG9u
YXRzdHVkaW9zLmNvbS9GYWxzZWhvb2RzLVByb2dyYW1tZXJzLUJlbGlldmUt
QWJvdXQtQ1NWcykgLQpXaGlsZSBSRkM0MTgwIHRvIGV4aXN0cywgaXQgaXMg
ZmFyIGZyb20gZGVmaW5pdGl2ZSBhbmQgZ29lcyBsYXJnZWx5IGlnbm9yZWQu
Ci0gW0ZhbHNlaG9vZHMgQWJvdXQgUGFja2FnZQpNYW5hZ2Vyc10oaHR0cHM6
Ly9tZXRhLXBhY2thZ2UtbWFuYWdlci5yZWFkdGhlZG9jcy5pby9lbi9kZXZl
bG9wL2ZhbHNlaG9vZHMuaHRtbCkgLQpDb3ZlcnMgcGFja2FnZSBhbmQgdGhl
aXIgbWFuYWdlcnMuCi0gW0ZhbHNlaG9vZHMgQWJvdXQKVGVzdGluZ10oaHR0
cHM6Ly9jbHViLm1pbmlzdHJ5b2Z0ZXN0aW5nLmNvbS90L2ZhbHNlaG9vZHMt
dGVzdGVycy1iZWxpZXZlLzEzNzEpIC0KQW4gYXR0ZW1wdCB0byBlc3RhYmxp
c2ggYSBsaXN0IG9mIGZhbHNlaG9vZHMgYWJvdXQgdGVzdGluZy4KLSBbQmln
IExpc3Qgb2YgTmF1Z2h0eQpTdHJpbmdzXShodHRwczovL2dpdGh1Yi5jb20v
bWluaW1heGlyL2JpZy1saXN0LW9mLW5hdWdodHktc3RyaW5ncykgLSBDaGFs
bGVuZ2UKeW91ciBhc3N1bXB0aW9ucyBhYm91dCBzdHJpbmdzLgotIFtQb3B1
bGFyIG1pc2NvbmNlcHRpb25zIGFib3V0IG10aW1lXShodHRwczovL2FwZW53
YXJyLmNhL2xvZy8yMDE4MTExMykgLSBQYXJ0Cm9mIGEgcG9zdCBvbiB3aHkg
ZmlsZSBtdGltZSBjb21wYXJpc29uIGNvdWxkIGJlIGNvbnNpZGVyZWQgaGFy
bWZ1bC4KLSBbRmFsc2Vob29kcyBBYm91dApQYWdpbmF0aW9uXShodHRwczov
L3d3dy5oZXptYXR0Lm9yZy9+bXBhbG1lci9ibG9nLzIwMTgvMTIvMTIvZmFs
c2Vob29kcy1wcm9ncmFtbWVycy1iZWxpZXZlLWFib3V0LXBhZ2luYXRpb24u
aHRtbCkgLSAKV2h5IHlvdXIgcGFnaW5hdGlvbiBhbGdvcml0aG0gaXMgZ2l2
aW5nIHNvbWVvbmUgKHBvc3NpYmx5IHlvdSkgYSBoZWFkYWNoZS4KLSBbUnVs
ZXMgZm9yIEF1dG9jb21wbGV0ZV0oaHR0cDovL2plcmVteW1pa2tvbGEuY29t
L3Bvc3RzLzIwMTlfMDNfMTlfcnVsZXNfZm9yX2F1dG9jb21wbGV0ZS5odG1s
KSAtIApOb3QgZmFsc2Vob29kcyAqcGVyLXNlKiwgYnV0IHN0aWxsIGEgZ3Jl
YXQgbGlzdCBvZiBnb29kIHByYWN0aWNlcyB0byBpbXBsZW1lbnQgYXV0b2Nv
bXBsZXRpb24uCi0gWzk5OTk5OTk5OTk5OTk5OTkuMCAtIDk5OTk5OTk5OTk5
OTk5OTguMF0oaHR0cDovL2dlb2Nhci5zZGYxLm9yZy9udW1iZXJzLmh0bWwp
IC0gQQpraW5kIG9mIGZhbHNlaG9vZCBvbiBudW1iZXJzLCBhbmQgZmxvYXRz
IHZzIGRlY2ltYWxzLgotIFtGYWxzZWhvb2RzIEFib3V0IFNlYXJjaF0oaHR0
cHM6Ly9vcGVuc291cmNlY29ubmVjdGlvbnMuY29tL2Jsb2cvMjAxOS8wNS8y
OS9mYWxzZWhvb2RzLXByb2dyYW1tZXJzLWJlbGlldmUtYWJvdXQtc2VhcmNo
LykgLQpXaHkgc2VhcmNoIChpbmNsdWRpbmcgYW5hbHlzaXMsIHRva2VuaXph
dGlvbiwgaGlnaGxpZ2h0aW5nKSBpcyBkZWNlcHRpdmVseQpjb21wbGV4Lgot
IFtIaSEgTXkgbmFtZSBpcy4uLl0oaHR0cHM6Ly93d3cueW91dHViZS5jb20v
d2F0Y2g/dj1OSWViZWxJcGRZaykgLSBUaGlzIHRhbGsgY291bGQgaGF2ZSBi
ZWVuIG5hbWVkIGZhbHNlaG9vZHMgYWJvdXQgaW4gdXNlcm5hbWVzIChhbmQg
b3RoZXIgaWRlbnRpZmllcnMpLgotIFtNeXRocyBhYm91dCAvZGV2L3VyYW5k
b21dKGh0dHBzOi8vd3d3LjJ1by5kZS9teXRocy1hYm91dC11cmFuZG9tKSAt
IFRoZXJlIGFyZSBhIGZldyB0aGluZ3MgYWJvdXQgL2Rldi91cmFuZG9tIGFu
ZCAvZGV2L3JhbmRvbSB0aGF0IGFyZSByZXBlYXRlZCBhZ2FpbiBhbmQgYWdh
aW4uIFN0aWxsIHRoZXkgYXJlIGZhbHNlLgotIFtNeXRocyBhYm91dCBDUFUg
Q2FjaGVzXShodHRwczovL3NvZnR3YXJlLnJhaml2cHJhYi5jb20vMjAxOC8w
NC8yOS9teXRocy1wcm9ncmFtbWVycy1iZWxpZXZlLWFib3V0LWNwdS1jYWNo
ZXMvKSAtIE1pc2NvbmNlcHRpb25zIGFib3V0IGNhY2hlcyBvZnRlbiBsZWFk
IHRvIGZhbHNlIGFzc2VydGlvbnMsIGVzcGVjaWFsbHkgd2hlbiBpdCBjb21l
cyB0byBjb25jdXJyZW5jeSBhbmQgcmFjZSBjb25kaXRpb25zLgoKCiMjIFR5
cG9ncmFwaHkKCi0gW0ZhbHNlaG9vZHMgQWJvdXQgRm9udHNdKGh0dHBzOi8v
Z2l0aHViLmNvbS9Sb2VsTi9Gb250LUZhbHNlaG9vZHMpIC0KQXNzdW1wdGlv
bnMgYWJvdXQgdHlwb2dyYXBoeSBvbiB0aGUgd2ViIGFuZCBpbiBkZXNrdG9w
IGFwcGxpY2F0aW9ucy4KLSBbVHJ1dGhzIHByb2dyYW1tZXJzIHNob3VsZCBr
bm93IGFib3V0IGNhc2VdKGh0dHBzOi8vd3d3LmItbGlzdC5vcmcvd2VibG9n
LzIwMTgvbm92LzI2L2Nhc2UvKSAtIEEgY29tcGxldGUgcmV2ZXJzZSBvZgp0
aGUgZmFsc2hvb2RzIGZvcm1hdCwgb24gdGhlIHRvcGljIG9mIGNhc2UgKGFz
IGluIHVwcGVyY2FzZSBhbmQgbG93ZXJjYXNlIHRleHQpLiAKCgojIyBDb250
cmlidXRpbmcKCllvdXIgY29udHJpYnV0aW9ucyBhcmUgYWx3YXlzIHdlbGNv
bWUhIFBsZWFzZSB0YWtlIGEgbG9vayBhdCB0aGUgW2NvbnRyaWJ1dGlvbgpn
dWlkZWxpbmVzXShDT05UUklCVVRJTkcubWQpIGZpcnN0LgoKCiMjIEdvb2Qg
Q2FuZGlkYXRlcwoKSGVyZSBpcyBhIG5vbi1yZXN0cmljdGl2ZSBsaXN0IG9m
IGl0ZW1zIHdoaWNoIGFyZSBnb29kIGNhbmRpZGF0ZXMgZm9yIGluY2x1c2lv
bgppbiB0aGlzIGF3ZXNvbWUgbGlzdC4KCiMjIyAqRmFsc2Vob29kKiBBcnRp
Y2xlcwoKQXJ0aWNsZXMgZm9sbG93aW5nIHRoZSAqZmFsc2Vob29kKiBzY2hl
bWUgYXJlIHByaW1lIGNhbmRpZGF0ZXMgZm9yIGluY2x1c2lvbiBpbgp0aGlz
IGF3ZXNvbWUgbGlzdC4KClRoZXNlIGFydGljbGVzIHN0YXJ0cyB3aXRoIHRo
ZSBoeXBvdGhlc2lzIHRoYXQgZGV2ZWxvcGVycyBoYXZlIGEgbmFpdmUsIHNp
bXBsZQp2aWV3IG9mIHRoZSBzdWJqZWN0IGF0IGhhbmQuIFRoZW4gcHJvY2Vl
ZCB0byBsaXN0IGEgc2V0IG9mIGNhbmRpZCBhc3N1bXB0aW9ucwp0aGF0IG1p
Z2h0IGJlIGhlbGQgYnkgc3VjaCBwcm9ncmFtbWVycy4gRWFjaCBvbmUgaXMg
aW50ZW50aW9uYWxseSBmYWxzZSwgYW5kCnNvbWV0aW1lcyBpbGx1c3RyYXRl
ZCBieSBhIGNvdW50ZXItZXhhbXBsZS4KCkEgbGlzdCBvZiBmYWxzZWhvb2Qg
aXMgY3JhZnRlZCBhcyBhIHByb2dyZXNzaW9uIHRoYXQgaXMgZGVzaWduZWQg
dG8gcmVmaW5lCmNvbmNlcHRzLiBIYXZpbmcgcmVhZCB0aGUgd2hvbGUgbGlz
dCBvZiBmYWxzZWhvb2QsIHRoZSByZWFkZXIgc2hvdWxkIHBvc3Nlc3MgYQpn
bG9iYWwsIGlmIG5vdCBjb21wbGV0ZSwgb3ZlcnZpZXcgb2YgdGhlIGRvbWFp
biBiZWluZyB0YXJnZXRlZCBieSB0aGUgYXJ0aWNsZSwKaW5jbHVkaW5nIG1v
c3QsIGlmIG5vdCBhbGwsIGl0cyBwaXRmYWxscywgZWRnZXMtY2FzZXMgYW5k
IGluY29uc2lzdGVuY2llcy4KCkluIHRoZSB3b3JzdCBjYXNlLCB0aGVzZSBh
cnRpY2xlcyBtaWdodCBwcm92b2tlIGFuIGVtb3Rpb25hbCByZWFjdGlvbiBh
bmQgY2F1c2UKZmxpcHBpbmcgdGFibGUuIGAo4pWvwrDilqHCsCnila/vuLUg
4pS74pSB4pS7YAoKQXJ0aWNsZXMgZmVhdHVyaW5nIGl0ZW1zIHRoYXQgYXJl
IGFwcGxpY2FibGUgdG8gYSBwcm9kdWN0IGFuZCBhIHByb2R1Y3Qgb25seQpj
YW4ndCByZWFsbHkgYmUgY29uc2lkZXJlZCBhcyBnZW5lcmljIGZhbHNlaG9v
ZCBhcnRpY2xlcyBhbmQgc2hvdWxkIGJlIGF2b2lkZWQuCgojIyMgTGlicmFy
aWVzCgpXaGVuIHBvc3NpYmxlLCB3ZSBwcm92aWRlIGEgbGlzdCBvZiBwcm9n
cmFtbWluZyBsaWJyYXJpZXMgb3IgbW9kdWxlcyB0aGF0IG1heQpzb2x2ZSwg
b3IgdHJ5IHRvLCB0aGUgY29tcGxleGl0aWVzIGFuZCBpZGlvc3luY3Jhc2ll
cyBwb2ludGVkIGJ5IHRoZQoqZmFsc2Vob29kKiBhcnRpY2xlcyBhYm92ZS4K
ClNvIHdlIGNhbiBwdXQgYmFjayB0YWJsZXMgaW4gcGxhY2UuIGDilKzilIDi
lKwg44OOKCDjgpwt44Kc44OOKWAKCiMjIyBEYXRhIFN0cnVjdHVyZXMKCkRh
dGEgbW9kZWxzIGFuZCBzdHJ1Y3R1cmVzIGdlbmVyaWMgZW5vdWdoIHRvIGNv
dmVyIGFuZCBhZGRyZXNzIG1vc3Qgb2YgdGhlCmZhbHNlaG9vZHMgYXJlIGFs
c28gd2VsY29tZSBpbiB0aGlzIHBhZ2UuCgoKIyMgTGljZW5zZQoKWyFbQ0Mw
XShodHRwczovL21pcnJvcnMuY3JlYXRpdmVjb21tb25zLm9yZy9wcmVzc2tp
dC9idXR0b25zLzg4eDMxL3N2Zy9jYy16ZXJvLnN2ZyldKGh0dHBzOi8vY3Jl
YXRpdmVjb21tb25zLm9yZy9wdWJsaWNkb21haW4vemVyby8xLjAvKQoKQ29u
dGVudCBvZiB0aGlzIHJlcG9zaXRvcnkgaXMgbGljZW5zZWQgdW5kZXIgdGhl
IFtDcmVhdGl2ZSBDb21tb25zIENDMApsaWNlbnNlXShodHRwczovL2NyZWF0
aXZlY29tbW9ucy5vcmcvcHVibGljZG9tYWluL3plcm8vMS4wLykuCgpUbyB0
aGUgZXh0ZW50IHBvc3NpYmxlIHVuZGVyIGxhdywgW0tldmluIERlbGR5Y2tl
XShodHRwczovL2tldmluLmRlbGR5Y2tlLmNvbSkKaGFzIHdhaXZlZCBhbGwg
Y29weXJpZ2h0IGFuZCByZWxhdGVkIG9yIG5laWdoYm9yaW5nIHJpZ2h0cyB0
byB0aGlzIHdvcmsuCg==
",,10936,"bGFuZ3VhZ2U6IHJ1YnkKcnZtOgogIC0gMi4yCmJlZm9yZV9zY3JpcHQ6CiAg
LSBnZW0gaW5zdGFsbCBhd2Vzb21lX2JvdApzY3JpcHQ6CiAgLSBhd2Vzb21l
X2JvdCAtLWZpbGVzIC4vUkVBRE1FLm1kIC0tYWxsb3ctc3NsIC0tYWxsb3ct
cmVkaXJlY3QgLS13aGl0ZS1saXN0IGNyZWF0aXZlY29tbW9ucy5vcmcK
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
b'bash-it',957012,b'A community Bash framework.',b'Shell',209,10936,,363,False,b'https://api.github.com/repos/Bash-it/bash-it/forks',"IyBCYXNoLWl0CgpbIVtCdWlsZCBTdGF0dXNdKGh0dHBzOi8vdHJhdmlzLWNp
Lm9yZy9CYXNoLWl0L2Jhc2gtaXQuc3ZnP2JyYW5jaD1tYXN0ZXIpXShodHRw
czovL3RyYXZpcy1jaS5vcmcvQmFzaC1pdC9iYXNoLWl0KSBbIVtKb2luIHRo
ZSBjaGF0IGF0IGh0dHBzOi8vZ2l0dGVyLmltL0Jhc2gtaXQvYmFzaC1pdF0o
aHR0cHM6Ly9iYWRnZXMuZ2l0dGVyLmltL0pvaW4lMjBDaGF0LnN2ZyldKGh0
dHBzOi8vZ2l0dGVyLmltL0Jhc2gtaXQvYmFzaC1pdD91dG1fc291cmNlPWJh
ZGdlJnV0bV9tZWRpdW09YmFkZ2UmdXRtX2NhbXBhaWduPXByLWJhZGdlJnV0
bV9jb250ZW50PWJhZGdlKQoKKipCYXNoLWl0KiogaXMgYSBjb2xsZWN0aW9u
IG9mIGNvbW11bml0eSBCYXNoIGNvbW1hbmRzIGFuZCBzY3JpcHRzIGZvciBC
YXNoIDMuMisuCihBbmQgYSBzaGFtZWxlc3Mgcmlwb2ZmIG9mIFtvaC1teS16
c2hdKGh0dHBzOi8vZ2l0aHViLmNvbS9yb2JieXJ1c3NlbGwvb2gtbXktenNo
KSA6c21pbGV5OikKCkluY2x1ZGVzIGF1dG9jb21wbGV0aW9uLCB0aGVtZXMs
IGFsaWFzZXMsIGN1c3RvbSBmdW5jdGlvbnMsIGEgZmV3IHN0b2xlbiBwaWVj
ZXMgZnJvbSBTdGV2ZSBMb3NoLCBhbmQgbW9yZS4KCkJhc2gtaXQgcHJvdmlk
ZXMgYSBzb2xpZCBmcmFtZXdvcmsgZm9yIHVzaW5nLCBkZXZlbG9waW5nIGFu
ZCBtYWludGFpbmluZyBzaGVsbCBzY3JpcHRzIGFuZCBjdXN0b20gY29tbWFu
ZHMgZm9yIHlvdXIgZGFpbHkgd29yay4KSWYgeW91J3JlIHVzaW5nIHRoZSBf
Qm91cm5lIEFnYWluIFNoZWxsXyAoQmFzaCkgcmVndWxhcmx5IGFuZCBoYXZl
IGJlZW4gbG9va2luZyBmb3IgYW4gZWFzeSB3YXkgb24gaG93IHRvIGtlZXAg
YWxsIG9mIHRoZXNlIG5pY2UgbGl0dGxlIHNjcmlwdHMgYW5kIGFsaWFzZXMg
dW5kZXIgY29udHJvbCwgdGhlbiBCYXNoLWl0IGlzIGZvciB5b3UhClN0b3Ag
cG9sbHV0aW5nIHlvdXIgYH4vYmluYCBkaXJlY3RvcnkgYW5kIHlvdXIgYC5i
YXNocmNgIGZpbGUsIGZvcmsvY2xvbmUgQmFzaC1pdCBhbmQgc3RhcnQgaGFj
a2luZyBhd2F5LgoKLSBbQ29udHJpYnV0aW5nXSgjY29udHJpYnV0aW5nKQot
IFtJbnN0YWxsYXRpb25dKCNpbnN0YWxsYXRpb24pCiAgLSBbSW5zdGFsbCBP
cHRpb25zXSgjaW5zdGFsbC1vcHRpb25zKQogIC0gW3ZpYSBEb2NrZXJdKCNp
bnN0YWxsLXVzaW5nLWRvY2tlcikKICAtIFtVcGRhdGluZ10oI3VwZGF0aW5n
KQotIFtIZWxwXSgjaGVscC1zY3JlZW5zKQotIFtTZWFyY2hdKCNzZWFyY2gp
CiAgLSBbU3ludGF4XSgjc3ludGF4KQogIC0gW1NlYXJjaGluZyB3aXRoIE5l
Z2F0aW9uc10oI3NlYXJjaGluZy13aXRoLW5lZ2F0aW9ucykKICAtIFtVc2lu
ZyBTZWFyY2ggdG8gRW5hYmxlIG9yIERpc2FibGUgQ29tcG9uZW50c10oI3Vz
aW5nLXNlYXJjaC10by1lbmFibGUtb3ItZGlzYWJsZS1jb21wb25lbnRzKQog
IC0gW0Rpc2FibGluZyBBU0NJSSBDb2xvcl0oI2Rpc2FibGluZy1hc2NpaS1j
b2xvcikKLSBbQ3VzdG9tIHNjcmlwdHMsIGFsaWFzZXMsIHRoZW1lcywgYW5k
IGZ1bmN0aW9uc10oI2N1c3RvbS1zY3JpcHRzLWFsaWFzZXMtdGhlbWVzLWFu
ZC1mdW5jdGlvbnMpCi0gW1RoZW1lc10oI3RoZW1lcykKLSBbVW5pbnN0YWxs
aW5nXSgjdW5pbnN0YWxsaW5nKQotIFtNaXNjXSgjbWlzYykKLSBbSGVscCBP
dXRdKCNoZWxwLW91dCkKLSBbQ29udHJpYnV0b3JzXSgjY29udHJpYnV0b3Jz
KQoKIyMgQ29udHJpYnV0aW5nCgpQbGVhc2UgdGFrZSBhIGxvb2sgYXQgdGhl
IFtDb250cmlidXRpb24gR3VpZGVsaW5lc10oQ09OVFJJQlVUSU5HLm1kKSBi
ZWZvcmUgcmVwb3J0aW5nIGEgYnVnIG9yIHByb3ZpZGluZyBhIG5ldyBmZWF0
dXJlLgoKVGhlIFtEZXZlbG9wbWVudCBHdWlkZWxpbmVzXShERVZFTE9QTUVO
VC5tZCkgaGF2ZSBtb3JlIGluZm9ybWF0aW9uIG9uIHNvbWUgb2YgdGhlIGlu
dGVybmFsIHdvcmtpbmdzIG9mIEJhc2gtaXQsCnBsZWFzZSBmZWVsIGZyZWUg
dG8gcmVhZCB0aHJvdWdoIHRoaXMgcGFnZSBpZiB5b3UncmUgaW50ZXJlc3Rl
ZCBpbiBob3cgQmFzaC1pdCBsb2FkcyBpdHMgY29tcG9uZW50cy4KCiMjIElu
c3RhbGxhdGlvbgoKMS4gQ2hlY2sgb3V0IGEgY2xvbmUgb2YgdGhpcyByZXBv
IHRvIGEgbG9jYXRpb24gb2YgeW91ciBjaG9pY2UsIHN1Y2ggYXMKICAgYGdp
dCBjbG9uZSAtLWRlcHRoPTEgaHR0cHM6Ly9naXRodWIuY29tL0Jhc2gtaXQv
YmFzaC1pdC5naXQgfi8uYmFzaF9pdGAKMi4gUnVuIGB+Ly5iYXNoX2l0L2lu
c3RhbGwuc2hgIChpdCBhdXRvbWF0aWNhbGx5IGJhY2tzIHVwIHlvdXIgYH4v
LmJhc2hfcHJvZmlsZWAgb3IgYH4vLmJhc2hyY2AsIGRlcGVuZGluZyBvbiB5
b3VyIE9TKQozLiBFZGl0IHlvdXIgbW9kaWZpZWQgY29uZmlnIChgfi8uYmFz
aF9wcm9maWxlYCBvciBgfi8uYmFzaHJjYCkgZmlsZSBpbiBvcmRlciB0byBj
dXN0b21pemUgQmFzaC1pdC4KNC4gQ2hlY2sgb3V0IGF2YWlsYWJsZSBhbGlh
c2VzLCBjb21wbGV0aW9ucywgYW5kIHBsdWdpbnMgYW5kIGVuYWJsZSB0aGUg
b25lcyB5b3Ugd2FudCB0byB1c2UgKHNlZSB0aGUgbmV4dCBzZWN0aW9uIGZv
ciBtb3JlIGRldGFpbHMpLgoKIyMjIEluc3RhbGwgT3B0aW9ucwoKVGhlIGlu
c3RhbGwgc2NyaXB0IGNhbiB0YWtlIHRoZSBmb2xsb3dpbmcgb3B0aW9uczoK
CiogYC0taW50ZXJhY3RpdmVgOiBBc2tzIHRoZSB1c2VyIHdoaWNoIGFsaWFz
ZXMsIGNvbXBsZXRpb25zIGFuZCBwbHVnaW5zIHRvIGVuYWJsZS4KKiBgLS1z
aWxlbnRgOiBBc2sgbm90aGluZyBhbmQgaW5zdGFsbCB1c2luZyBkZWZhdWx0
IHNldHRpbmdzLgoqIGAtLW5vLW1vZGlmeS1jb25maWdgOiBEbyBub3QgbW9k
aWZ5IHRoZSBleGlzdGluZyBjb25maWcgZmlsZSAoYH4vLmJhc2hfcHJvZmls
ZWAgb3IgYH4vLmJhc2hyY2ApLgoKV2hlbiBydW4gd2l0aG91dCB0aGUgYC0t
aW50ZXJhY3RpdmVgIHN3aXRjaCwgQmFzaC1pdCBvbmx5IGVuYWJsZXMgYSBz
YW5lIGRlZmF1bHQgc2V0IG9mIGZ1bmN0aW9uYWxpdHkgdG8ga2VlcCB5b3Vy
IHNoZWxsIGNsZWFuIGFuZCB0byBhdm9pZCBpc3N1ZXMgd2l0aCBtaXNzaW5n
IGRlcGVuZGVuY2llcy4KRmVlbCBmcmVlIHRvIGVuYWJsZSB0aGUgdG9vbHMg
eW91IHdhbnQgdG8gdXNlIGFmdGVyIHRoZSBpbnN0YWxsYXRpb24uCgpXaGVu
IHlvdSBydW4gd2l0aG91dCB0aGUgYC0tbm8tbW9kaWZ5LWNvbmZpZ2Agc3dp
dGNoLCB0aGUgQmFzaC1pdCBpbnN0YWxsZXIgYXV0b21hdGljYWxseSBtb2Rp
Zmllcy9yZXBsYWNlcyB5b3VyIGV4aXN0aW5nIGNvbmZpZyBmaWxlLgpVc2Ug
dGhlIGAtLW5vLW1vZGlmeS1jb25maWdgIHN3aXRjaCB0byBhdm9pZCB1bndh
bnRlZCBtb2RpZmljYXRpb25zLCBlLmcuIGlmIHlvdXIgQmFzaCBjb25maWcg
ZmlsZSBhbHJlYWR5IGNvbnRhaW5zIHRoZSBjb2RlIHRoYXQgbG9hZHMgQmFz
aC1pdC4KCioqTk9URSoqOiBLZWVwIGluIG1pbmQgaG93IEJhc2ggbG9hZHMg
aXRzIGNvbmZpZ3VyYXRpb24gZmlsZXMsCmAuYmFzaF9wcm9maWxlYCBmb3Ig
bG9naW4gc2hlbGxzIChhbmQgaW4gbWFjT1MgaW4gdGVybWluYWwgZW11bGF0
b3JzIGxpa2UgW1Rlcm1pbmFsLmFwcF0oaHR0cDovL3d3dy5hcHBsZS5jb20v
b3N4L2FwcHMvKSBvcgpbaVRlcm0yXShodHRwczovL3d3dy5pdGVybTIuY29t
LykpIGFuZCBgLmJhc2hyY2AgZm9yIGludGVyYWN0aXZlIHNoZWxscyAoZGVm
YXVsdCBtb2RlIGluIG1vc3Qgb2YgdGhlIEdOVS9MaW51eCB0ZXJtaW5hbCBl
bXVsYXRvcnMpLAp0byBlbnN1cmUgdGhhdCBCYXNoLWl0IGlzIGxvYWRlZCBj
b3JyZWN0bHkuCkEgZ29vZCAicHJhY3RpY2UiIGlzIHNvdXJjaW5nIGAuYmFz
aHJjYCBpbnRvIGAuYmFzaF9wcm9maWxlYCB0byBrZWVwIHRoaW5ncyB3b3Jr
aW5nIGluIGFsbCB0aGUgc2NlbmFyaW9zLgpUbyBhY2hpZXZlIHRoaXMsIHlv
dSBjYW4gYWRkIHRoaXMgc25pcHBldCBpbiB5b3VyIGAuYmFzaF9wcm9maWxl
YDoKCmBgYAppZiBbIC1mIH4vLmJhc2hyYyBdOyB0aGVuCiAgLiB+Ly5iYXNo
cmMKZmkKYGBgCgpSZWZlciB0byB0aGUgb2ZmaWNpYWwgW0Jhc2ggZG9jdW1l
bnRhdGlvbl0oaHR0cHM6Ly93d3cuZ251Lm9yZy9zb2Z0d2FyZS9iYXNoL21h
bnVhbC9iYXNocmVmLmh0bWwjQmFzaC1TdGFydHVwLUZpbGVzKSB0byBnZXQg
bW9yZSBpbmZvLgoKCiMjIyBJbnN0YWxsIHVzaW5nIERvY2tlcgoKWW91IGNh
biB0cnkgQmFzaC1pdCBpbiBhbiBpc29sYXRlZCBlbnZpcm9ubWVudCB3aXRo
b3V0IGNoYW5naW5nIGFueSBsb2NhbCBmaWxlcyB2aWEgYSBbRG9ja2VyXSho
dHRwczovL3d3dy5kb2NrZXIuY29tLykgQ29udGFpbmVyLgooQmFzaCBTaGVs
bCB2NC40IHdpdGggQmFzaC1pdCwgW2JhdHNdKGh0dHBzOi8vZ2l0aHViLmNv
bS9zc3RlcGhlbnNvbi9iYXRzKSxhbmQgYmFzaC1jb21wbGV0aW9uIGJhc2Vk
IG9uIFtBbHBpbmUgTGludXhdKGh0dHBzOi8vYWxwaW5lbGludXgub3JnLykp
LgoKYGRvY2tlciBwdWxsIGVsbGVyYnJvY2svYmFzaC1pdGAKCkhhdmUgYSBs
b29rIGF0IG91ciBbYmFzaC1pdC1kb2NrZXIgcmVwb3NpdG9yeV0oaHR0cHM6
Ly9naXRodWIuY29tL0Jhc2gtaXQvYmFzaC1pdC1kb2NrZXIpIGZvciBmdXJ0
aGVyIGluZm9ybWF0aW9uLgoKCiMjIyBVcGRhdGluZwoKVG8gdXBkYXRlIEJh
c2gtaXQgdG8gdGhlIGxhdGVzdCB2ZXJzaW9uLCBzaW1wbHkgcnVuOgoKYGBg
YmFzaApiYXNoLWl0IHVwZGF0ZQpgYGAKCnRoYXQncyBhbGwuCgpJZiB5b3Ug
YXJlIHVzaW5nIGFuIG9sZGVyIHZlcnNpb24gb2YgQmFzaC1pdCwgaXQncyBw
b3NzaWJsZSB0aGF0IHNvbWUgZnVuY3Rpb25hbGl0eSBoYXMgY2hhbmdlZCwg
b3IgdGhhdCB0aGUgaW50ZXJuYWwgc3RydWN0dXJlIG9mIGhvdyBCYXNoLWl0
IG9yZ2FuaXplcyBpdHMgZnVuY3Rpb25hbGl0eSBoYXMgYmVlbiB1cGRhdGVk
LgpGb3IgdGhlc2UgY2FzZXMsIHdlIHByb3ZpZGUgYSBgbWlncmF0ZWAgY29t
bWFuZDoKCmBgYGJhc2gKYmFzaC1pdCBtaWdyYXRlCmBgYAoKVGhpcyBjb21t
YW5kIHdpbGwgYXV0b21hdGljYWxseSBtaWdyYXRlIHRoZSBCYXNoLWl0IHN0
cnVjdHVyZSB0byB0aGUgbGF0ZXN0IHZlcnNpb24uClRoZSBgbWlncmF0ZWAg
Y29tbWFuZCBpcyBydW4gYXV0b21hdGljYWxseSBpZiB5b3UgcnVuIHRoZSBg
dXBkYXRlYCwgYGVuYWJsZWAgb3IgYGRpc2FibGVgIGNvbW1hbmRzLgoKIyMg
SGVscCBTY3JlZW5zCgpgYGBiYXNoCmJhc2gtaXQgc2hvdyBhbGlhc2VzICAg
ICAgICAjIHNob3dzIGluc3RhbGxlZCBhbmQgYXZhaWxhYmxlIGFsaWFzZXMK
YmFzaC1pdCBzaG93IGNvbXBsZXRpb25zICAgICMgc2hvd3MgaW5zdGFsbGVk
IGFuZCBhdmFpbGFibGUgY29tcGxldGlvbnMKYmFzaC1pdCBzaG93IHBsdWdp
bnMgICAgICAgICMgc2hvd3MgaW5zdGFsbGVkIGFuZCBhdmFpbGFibGUgcGx1
Z2lucwpiYXNoLWl0IGhlbHAgYWxpYXNlcyAgICAgICAgIyBzaG93cyBoZWxw
IGZvciBpbnN0YWxsZWQgYWxpYXNlcwpiYXNoLWl0IGhlbHAgY29tcGxldGlv
bnMgICAgIyBzaG93cyBoZWxwIGZvciBpbnN0YWxsZWQgY29tcGxldGlvbnMK
YmFzaC1pdCBoZWxwIHBsdWdpbnMgICAgICAgICMgc2hvd3MgaGVscCBmb3Ig
aW5zdGFsbGVkIHBsdWdpbnMKYGBgCgojIyBTZWFyY2gKCklmIHlvdSBuZWVk
IHRvIHF1aWNrbHkgZmluZCBvdXQgd2hpY2ggb2YgdGhlIHBsdWdpbnMsIGFs
aWFzZXMgb3IgY29tcGxldGlvbnMgYXJlIGF2YWlsYWJsZSBmb3IgYSBzcGVj
aWZpYyBmcmFtZXdvcmssIHByb2dyYW1taW5nIGxhbmd1YWdlLCBvciBhbiBl
bnZpcm9ubWVudCwgeW91IGNhbiBfc2VhcmNoXyBmb3IgbXVsdGlwbGUgdGVy
bXMgcmVsYXRlZCB0byB0aGUgY29tbWFuZHMgeW91IHVzZSBmcmVxdWVudGx5
LgpTZWFyY2ggd2lsbCBmaW5kIGFuZCBwcmludCBvdXQgbW9kdWxlcyB3aXRo
IHRoZSBuYW1lIG9yIGRlc2NyaXB0aW9uIG1hdGNoaW5nIHRoZSB0ZXJtcyBw
cm92aWRlZC4KCiMjIyBTeW50YXgKCmBgYGJhc2gKICBiYXNoLWl0IHNlYXJj
aCB0ZXJtMSBbWy1ddGVybTJdIFtbLV10ZXJtM10uLi4uCmBgYAoKQXMgYW4g
ZXhhbXBsZSwgYSBydWJ5IGRldmVsb3BlciBtaWdodCB3YW50IHRvIGVuYWJs
ZSBldmVyeXRoaW5nIHJlbGF0ZWQgdG8gdGhlIGNvbW1hbmRzIHN1Y2ggYXMg
YHJ1YnlgLCBgcmFrZWAsIGBnZW1gLCBgYnVuZGxlcmAsIGFuZCBgcmFpbHNg
LgpTZWFyY2ggY29tbWFuZCBoZWxwcyB5b3UgZmluZCByZWxhdGVkIG1vZHVs
ZXMgc28gdGhhdCB5b3UgY2FuIGRlY2lkZSB3aGljaCBvZiB0aGVtIHlvdSdk
IGxpa2UgdG8gdXNlOgoKYGBgYmFzaArina8gYmFzaC1pdCBzZWFyY2ggcnVi
eSByYWtlIGdlbSBidW5kbGUgaXJiIHJhaWxzCiAgICAgIGFsaWFzZXM6ICBi
dW5kbGVyIHJhaWxzCiAgICAgIHBsdWdpbnM6ICBjaHJ1YnkgY2hydWJ5LWF1
dG8gcnVieQogIGNvbXBsZXRpb25zOiAgYnVuZGxlciBnZW0gcmFrZQpgYGAK
CkN1cnJlbnRseSBlbmFibGVkIG1vZHVsZXMgd2lsbCBiZSBzaG93biBpbiBn
cmVlbi4KCiMjIyBTZWFyY2hpbmcgd2l0aCBOZWdhdGlvbnMKCllvdSBjYW4g
cHJlZml4IGEgc2VhcmNoIHRlcm0gd2l0aCBhICItIiB0byBleGNsdWRlIGl0
IGZyb20gdGhlIHJlc3VsdHMuCkluIHRoZSBhYm92ZSBleGFtcGxlLCBpZiB3
ZSB3YW50ZWQgdG8gaGlkZSBgY2hydWJ5YCBhbmQgYGNocnVieS1hdXRvYCwK
d2UgY291bGQgY2hhbmdlIHRoZSBjb21tYW5kIGFzIGZvbGxvd3M6CgpgYGBi
YXNoCuKdryBiYXNoLWl0IHNlYXJjaCBydWJ5IHJha2UgZ2VtIGJ1bmRsZSBp
cmIgcmFpbHMgLWNocnVieQogICAgICBhbGlhc2VzOiAgYnVuZGxlciByYWls
cwogICAgICBwbHVnaW5zOiAgcnVieQogIGNvbXBsZXRpb25zOiAgYnVuZGxl
ciBnZW0gcmFrZQpgYGAKCiMjIyBVc2luZyBTZWFyY2ggdG8gRW5hYmxlIG9y
IERpc2FibGUgQ29tcG9uZW50cwoKQnkgYWRkaW5nIGEgYC0tZW5hYmxlYCBv
ciBgLS1kaXNhYmxlYCB0byB0aGUgc2VhcmNoIGNvbW1hbmQsIHlvdSBjYW4g
YXV0b21hdGljYWxseSBlbmFibGUgYWxsIG1vZHVsZXMgdGhhdCBjb21lIHVw
IGFzIGEgcmVzdWx0IG9mIGEgc2VhcmNoIHF1ZXJ5LgpUaGlzIGNvdWxkIGJl
IHF1aXRlIGhhbmR5IGlmIHlvdSBsaWtlIHRvIGVuYWJsZSBhIGJ1bmNoIG9m
IGNvbXBvbmVudHMgcmVsYXRlZCB0byB0aGUgc2FtZSB0b3BpYy4KCiMjIyBE
aXNhYmxpbmcgQVNDSUkgQ29sb3IKClRvIHJlbW92ZSBub24tcHJpbnRpbmcg
bm9uLUFTQ0lJIGNoYXJhY3RlcnMgcmVzcG9uc2libGUgZm9yIHRoZSBjb2xv
cmluZyBvZiB0aGUgc2VhcmNoIG91dHB1dCwgeW91IGNhbiBzZXQgZW52aXJv
bm1lbnQgdmFyaWFibGUgYE5PX0NPTE9SYC4KRW5hYmxlZCBjb21wb25lbnRz
IHdpbGwgdGhlbiBiZSBzaG93biB3aXRoIGEgY2hlY2ttYXJrOgoKYGBgYmFz
aArina8gTk9fQ09MT1I9MSBiYXNoLWl0IHNlYXJjaCBydWJ5IHJha2UgZ2Vt
IGJ1bmRsZSBpcmIgcmFpbHMgLWNocnVieQogICAgICBhbGlhc2VzICA9PiAg
IOKck2J1bmRsZXIg4pyTcmFpbHMKICAgICAgcGx1Z2lucyAgPT4gICDinJNy
dWJ5CiAgY29tcGxldGlvbnMgID0+ICAgYnVuZGxlciBnZW0gcmFrZQpgYGAK
CiMjIEN1c3RvbSBzY3JpcHRzLCBhbGlhc2VzLCB0aGVtZXMsIGFuZCBmdW5j
dGlvbnMKCkZvciBjdXN0b20gc2NyaXB0cywgYW5kIGFsaWFzZXMsIGp1c3Qg
Y3JlYXRlIHRoZSBmb2xsb3dpbmcgZmlsZXMgKHRoZXknbGwgYmUgaWdub3Jl
ZCBieSB0aGUgZ2l0IHJlcG8pOgoKKiBgYWxpYXNlcy9jdXN0b20uYWxpYXNl
cy5iYXNoYAoqIGBjb21wbGV0aW9uL2N1c3RvbS5jb21wbGV0aW9uLmJhc2hg
CiogYGxpYi9jdXN0b20uYmFzaGAKKiBgcGx1Z2lucy9jdXN0b20ucGx1Z2lu
cy5iYXNoYAoqIGBjdXN0b20vdGhlbWVzLzxjdXN0b20gdGhlbWUgbmFtZT4v
PGN1c3RvbSB0aGVtZSBuYW1lPi50aGVtZS5iYXNoYAoKQW55dGhpbmcgaW4g
dGhlIGN1c3RvbSBkaXJlY3Rvcnkgd2lsbCBiZSBpZ25vcmVkLCB3aXRoIHRo
ZSBleGNlcHRpb24gb2YgYGN1c3RvbS9leGFtcGxlLmJhc2hgLgoKQWx0ZXJu
YXRlbHksIGlmIHlvdSB3b3VsZCBsaWtlIHRvIGtlZXAgeW91ciBjdXN0b20g
c2NyaXB0cyB1bmRlciB2ZXJzaW9uIGNvbnRyb2wsIHlvdSBjYW4gc2V0IGBC
QVNIX0lUX0NVU1RPTWAgaW4geW91ciBgfi8uYmFzaHJjYCB0byBhbm90aGVy
IGxvY2F0aW9uIG91dHNpZGUgb2YgdGhlIGAkQkFTSF9JVGAgZm9sZGVyLgpJ
biB0aGlzIGNhc2UsIGFueSBgKi5iYXNoYCBmaWxlIHVuZGVyIGV2ZXJ5IGRp
cmVjdG9yeSBiZWxvdyBgQkFTSF9JVF9DVVNUT01gIGZvbGRlciB3aWxsIGJl
IHVzZWQuCgojIyBUaGVtZXMKClRoZXJlIGFyZSBvdmVyIDUwKyBCYXNoLWl0
IHRoZW1lcyB0byBwaWNrIGZyb20gaW4gYCRCQVNIX0lUL3RoZW1lc2AuClRo
ZSBkZWZhdWx0IHRoZW1lIGlzIGBib2JieWAuClNldCBgQkFTSF9JVF9USEVN
RWAgdG8gdGhlIHRoZW1lIG5hbWUgeW91IHdhbnQsIG9yIGlmIHlvdSd2ZSBk
ZXZlbG9wZWQgeW91ciBvd24gY3VzdG9tIHRoZW1lIG91dHNpZGUgb2YgYCRC
QVNIX0lUL3RoZW1lc2AsCnBvaW50IHRoZSBgQkFTSF9JVF9USEVNRWAgdmFy
aWFibGUgZGlyZWN0bHkgdG8gdGhlIHRoZW1lIGZpbGUuClRvIGRpc2FibGUg
dGhlbWluZyBjb21wbGV0ZWx5LCBsZWF2ZSB0aGUgdmFyaWFibGUgZW1wdHku
CgpFeGFtcGxlczoKCmBgYGJhc2gKIyBVc2UgdGhlICJwb3dlcmxpbmUtbXVs
dGlsaW5lIiB0aGVtZQpleHBvcnQgQkFTSF9JVF9USEVNRT0icG93ZXJsaW5l
LW11bHRpbGluZSIKCiMgVXNlIGEgdGhlbWUgb3V0c2lkZSBvZiB0aGUgQmFz
aC1pdCBmb2xkZXIKZXhwb3J0IEJBU0hfSVRfVEhFTUU9Ii9ob21lL2Zvby9t
eV90aGVtZS9teV90aGVtZS50aGVtZS5iYXNoIgoKIyBEaXNhYmxlIHRoZW1p
bmcKZXhwb3J0IEJBU0hfSVRfVEhFTUU9IiIKYGBgCgpZb3UgY2FuIGVhc2ls
eSBwcmV2aWV3IHRoZSB0aGVtZXMgaW4geW91ciBvd24gc2hlbGwgdXNpbmcg
YEJBU0hfUFJFVklFVz10cnVlIGJhc2gtaXQgcmVsb2FkYC4KCklmIHlvdSd2
ZSBjcmVhdGVkIHlvdXIgb3duIGN1c3RvbSBwcm9tcHRzLCB3ZSdkIGxvdmUg
aXQgaWYgeW91IHNoYXJlZCB0aGVtIHdpdGggZXZlcnlvbmUgZWxzZSEgSnVz
dCBzdWJtaXQgYSBQdWxsIFJlcXVlc3QuCllvdSBjYW4gc2VlIHRoZW1lIHNj
cmVlbnNob3RzIG9uIFt3aWtpL1RoZW1lc10oaHR0cHM6Ly9naXRodWIuY29t
L0Jhc2gtaXQvYmFzaC1pdC93aWtpL1RoZW1lcykuCgoqKk5PVEUqKjogQmFz
aC1pdCBhbmQgc29tZSB0aGVtZXMgdXNlIFVURi04IGNoYXJhY3RlcnMsIHNv
IHRvIGF2b2lkIHN0cmFuZ2UgYmVoYXZpb3IgaW4geW91ciB0ZXJtaW5hbCwg
c2V0IHlvdXIgbG9jYWxlIHRvIGBMQ19BTEw9ZW5fVVMuVVRGLThgIG9yIHRo
ZSBlcXVpdmFsZW50IHRvIHlvdXIgbGFuZ3VhZ2UgaWYgaXQgaXNuJ3QgQW1l
cmljYW4gRW5nbGlzaC4KCiMjIFVuaW5zdGFsbGluZwoKVG8gdW5pbnN0YWxs
IEJhc2gtaXQsIHJ1biB0aGUgYHVuaW5zdGFsbC5zaGAgc2NyaXB0IGZvdW5k
IGluIHRoZSBgJEJBU0hfSVRgIGRpcmVjdG9yeToKCmBgYApjZCAkQkFTSF9J
VAouL3VuaW5zdGFsbC5zaApgYGAKClRoaXMgd2lsbCByZXN0b3JlIHlvdXIg
cHJldmlvdXMgQmFzaCBwcm9maWxlLgpBZnRlciB0aGUgdW5pbnN0YWxsIHNj
cmlwdCBmaW5pc2hlcywgcmVtb3ZlIHRoZSBCYXNoLWl0IGRpcmVjdG9yeSBm
cm9tIHlvdXIgbWFjaGluZSAoYHJtIC1yZiAkQkFTSF9JVGApIGFuZCBzdGFy
dCBhIG5ldyBzaGVsbC4KCiMjIE1pc2MKCiMjIyBCYXNoIFByb2ZpbGUgQWxp
YXNlcwoKQmFzaC1pdCBjcmVhdGVzIGEgYHJlbG9hZGAgYWxpYXMgdGhhdCBt
YWtlcyBpdCBjb252ZW5pZW50IHRvIHJlbG9hZAp5b3VyIEJhc2ggcHJvZmls
ZSB3aGVuIHlvdSBtYWtlIGNoYW5nZXMuCgpBZGRpdGlvbmFsbHksIGlmIHlv
dSBleHBvcnQgYEJBU0hfSVRfQVVUT01BVElDX1JFTE9BRF9BRlRFUl9DT05G
SUdfQ0hBTkdFYCBhcyBhIG5vbi1udWxsIHZhbHVlLApCYXNoLWl0IHdpbGwg
YXV0b21hdGljYWxseSByZWxvYWQgaXRzZWxmIGFmdGVyIGFjdGl2YXRpbmcg
b3IgZGVhY3RpdmF0aW5nIHBsdWdpbnMsIGFsaWFzZXMsIG9yIGNvbXBsZXRp
b25zLgoKIyMjIFByb21wdCBWZXJzaW9uIENvbnRyb2wgQ2hlY2sKCkJhc2gt
aXQgcHJvdmlkZXMgcHJvbXB0IHRoZW1lcyB3aXRoIHRoZSBhYmlsaXR5IHRv
IGNoZWNrIGFuZCBkaXNwbGF5IHZlcnNpb24gY29udHJvbCBpbmZvcm1hdGlv
biBmb3IgdGhlIGN1cnJlbnQgZGlyZWN0b3J5LgpUaGUgaW5mb3JtYXRpb24g
aXMgcmV0cmlldmVkIGZvciBlYWNoIGRpcmVjdG9yeSBhbmQgY2FuIHNsb3cg
ZG93biB0aGUgbmF2aWdhdGlvbiBvZiBwcm9qZWN0cyB3aXRoIGEgbGFyZ2Ug
bnVtYmVyIG9mIGZpbGVzIGFuZCBmb2xkZXJzLgpUdXJuIHZlcnNpb24gY29u
dHJvbCBjaGVja2luZyBvZmYgdG8gcHJldmVudCBzbG93IGRpcmVjdG9yeSBu
YXZpZ2F0aW9uIHdpdGhpbiBsYXJnZSBwcm9qZWN0cy4KCkJhc2gtaXQgcHJv
dmlkZXMgYSBmbGFnIChgU0NNX0NIRUNLYCkgd2l0aGluIHRoZSBgfi8uYmFz
aF9wcm9maWxlYCBmaWxlIHRoYXQgdHVybnMgb2ZmL29uIHZlcnNpb24gY29u
dHJvbCBpbmZvcm1hdGlvbiBjaGVja2luZyBhbmQgZGlzcGxheSB3aXRoaW4g
YWxsIHRoZW1lcy4KVmVyc2lvbiBjb250cm9sIGNoZWNraW5nIGlzIG9uIGJ5
IGRlZmF1bHQgdW5sZXNzIGV4cGxpY2l0bHkgdHVybmVkIG9mZi4KClNldCBg
U0NNX0NIRUNLYCB0byAnZmFsc2UnIHRvICoqdHVybiBvZmYqKiB2ZXJzaW9u
IGNvbnRyb2wgY2hlY2tzIGZvciBhbGwgdGhlbWVzOgoKKiBgZXhwb3J0IFND
TV9DSEVDSz1mYWxzZWAKClNldCBgU0NNX0NIRUNLYCB0byAndHJ1ZScgKHRo
ZSBkZWZhdWx0IHZhbHVlKSB0byAqKnR1cm4gb24qKiB2ZXJzaW9uIGNvbnRy
b2wgY2hlY2tzIGZvciBhbGwgdGhlbWVzOgoKKiBgZXhwb3J0IFNDTV9DSEVD
Sz10cnVlYAoKKipOT1RFOioqCkl0IGlzIHBvc3NpYmxlIGZvciB0aGVtZXMg
dG8gaWdub3JlIHRoZSBgU0NNX0NIRUNLYCBmbGFnIGFuZCBxdWVyeSBzcGVj
aWZpYyB2ZXJzaW9uIGNvbnRyb2wgaW5mb3JtYXRpb24gZGlyZWN0bHkuCkZv
ciBleGFtcGxlLCB0aGVtZXMgdGhhdCB1c2UgZnVuY3Rpb25zIGxpa2UgYGdp
dF9wcm9tcHRfdmFyc2Agc2tpcCB0aGUgYFNDTV9DSEVDS2AgZmxhZyB0byBy
ZXRyaWV2ZSBhbmQgZGlzcGxheSBnaXQgcHJvbXB0IGluZm9ybWF0aW9uLgpJ
ZiB5b3UgdHVybmVkIHZlcnNpb24gY29udHJvbCBjaGVja2luZyBvZmYgYW5k
IHlvdSBzdGlsbCBzZWUgdmVyc2lvbiBjb250cm9sIGluZm9ybWF0aW9uIHdp
dGhpbiB5b3VyIHByb21wdCwgdGhlbiBmdW5jdGlvbnMgbGlrZSBgZ2l0X3By
b21wdF92YXJzYCBhcmUgbW9zdCBsaWtlbHkgdGhlIHJlYXNvbiB3aHkuCgoj
IyMgR2l0IHByb21wdAoKQmFzaC1pdCBoYXMgc29tZSBuaWNlIGZlYXR1cmVz
IHJlbGF0ZWQgdG8gR2l0LCBjb250aW51ZSByZWFkaW5nIHRvIGtub3cgbW9y
ZSBhYm91dCB0aGVzZSBmZWF0dXJlcy4KCiMjIyBSZXBvc2l0b3J5IGluZm8g
aW4gdGhlIHByb21wdAoKQmFzaC1pdCBjYW4gc2hvdyBzb21lIGluZm9ybWF0
aW9uIGFib3V0IEdpdCByZXBvc2l0b3JpZXMgaW4gdGhlIHNoZWxsIHByb21w
dDogdGhlIGN1cnJlbnQgYnJhbmNoLCB0YWcgb3IgY29tbWl0IHlvdSBhcmUg
YXQsIGhvdyBtYW55IGNvbW1pdHMgdGhlIGxvY2FsIGJyYW5jaCBpcyBhaGVh
ZCBvciBiZWhpbmQgZnJvbSB0aGUgcmVtb3RlIGJyYW5jaCwgYW5kIGlmIHlv
dSBoYXZlIGNoYW5nZXMgc3Rhc2hlZC4KCkFkZGl0aW9uYWxseSwgeW91IGNh
biB2aWV3IHRoZSBzdGF0dXMgb2YgeW91ciB3b3JraW5nIGNvcHkgYW5kIGdl
dCB0aGUgY291bnQgb2YgKnN0YWdlZCosICp1bnN0YWdlZCogYW5kICp1bnRy
YWNrZWQqIGZpbGVzLgpUaGlzIGZlYXR1cmUgaXMgY29udHJvbGxlZCB0aHJv
dWdoIHRoZSBmbGFnIGBTQ01fR0lUX1NIT1dfREVUQUlMU2AgYXMgZm9sbG93
czoKClNldCBgU0NNX0dJVF9TSE9XX0RFVEFJTFNgIHRvICd0cnVlJyAodGhl
IGRlZmF1bHQgdmFsdWUpIHRvICoqc2hvdyoqIHRoZSB3b3JraW5nIGNvcHkg
ZGV0YWlscyBpbiB5b3VyIHByb21wdDoKCiogYGV4cG9ydCBTQ01fR0lUX1NI
T1dfREVUQUlMUz10cnVlYAoKU2V0IGBTQ01fR0lUX1NIT1dfREVUQUlMU2Ag
dG8gJ2ZhbHNlJyB0byAqKmRvbid0IHNob3cqKiBpdDoKCiogYGV4cG9ydCBT
Q01fR0lUX1NIT1dfREVUQUlMUz1mYWxzZWAKCioqTk9URToqKiBJZiB1c2lu
ZyBgU0NNX0dJVF9TSE9XX01JTklNQUxfSU5GTz10cnVlYCwgdGhlbiB0aGUg
dmFsdWUgb2YgYFNDTV9HSVRfU0hPV19ERVRBSUxTYCBpcyBpZ25vcmVkLgoK
IyMjIFJlbW90ZXMgYW5kIHJlbW90ZSBicmFuY2hlcwoKSW4gc29tZSBnaXQg
d29ya2Zsb3dzLCB5b3UgbXVzdCB3b3JrIHdpdGggdmFyaW91cyByZW1vdGVz
LCBmb3IgdGhpcyByZWFzb24sIEJhc2gtaXQgY2FuIHByb3ZpZGUgc29tZSB1
c2VmdWwgaW5mb3JtYXRpb24gYWJvdXQgeW91ciByZW1vdGVzIGFuZCB5b3Vy
IHJlbW90ZSBicmFuY2hlcywgZm9yIGV4YW1wbGUsIHRoZSByZW1vdGUgb24g
eW91IGFyZSB3b3JraW5nLCBvciBpZiB5b3VyIGxvY2FsIGJyYW5jaCBpcyB0
cmFja2luZyBhIHJlbW90ZSBicmFuY2guCgpZb3UgY2FuIGNvbnRyb2wgdGhp
cyBmZWF0dXJlIHdpdGggdGhlIGZsYWcgYFNDTV9HSVRfU0hPV19SRU1PVEVf
SU5GT2AgYXMgZm9sbG93czoKClNldCBgU0NNX0dJVF9TSE9XX1JFTU9URV9J
TkZPYCB0byAnYXV0bycgKHRoZSBkZWZhdWx0IHZhbHVlKSB0byBhY3RpdmF0
ZSBpdCBvbmx5IHdoZW4gbW9yZSB0aGFuIG9uZSByZW1vdGUgaXMgY29uZmln
dXJlZCBpbiB0aGUgY3VycmVudCByZXBvOgoKKiBgZXhwb3J0IFNDTV9HSVRf
U0hPV19SRU1PVEVfSU5GTz1hdXRvYAoKU2V0IGBTQ01fR0lUX1NIT1dfUkVN
T1RFX0lORk9gIHRvICd0cnVlJyB0byBhbHdheXMgYWN0aXZhdGUgdGhlIGZl
YXR1cmU6CgoqIGBleHBvcnQgU0NNX0dJVF9TSE9XX1JFTU9URV9JTkZPPXRy
dWVgCgpTZXQgYFNDTV9HSVRfU0hPV19SRU1PVEVfSU5GT2AgdG8gJ2ZhbHNl
JyB0byAqKmRpc2FibGUgdGhlIGZlYXR1cmUqKjoKCiogYGV4cG9ydCBTQ01f
R0lUX1NIT1dfUkVNT1RFX0lORk89ZmFsc2VgCgoqKk5PVEU6KiogSWYgdXNp
bmcgYFNDTV9HSVRfU0hPV19NSU5JTUFMX0lORk89dHJ1ZWAsIHRoZW4gdGhl
IHZhbHVlIG9mIGBTQ01fR0lUX1NIT1dfUkVNT1RFX0lORk9gIGlzIGlnbm9y
ZWQuCgojIyMgVW50cmFja2VkIGZpbGVzCgpCeSBkZWZhdWx0LCB0aGUgYGdp
dCBzdGF0dXNgIGNvbW1hbmQgc2hvd3MgaW5mb3JtYXRpb24gYWJvdXQgKnVu
dHJhY2tlZCogZmlsZXMuClRoaXMgYmVoYXZpb3IgY2FuIGJlIGNvbnRyb2xs
ZWQgdGhyb3VnaCBjb21tYW5kLWxpbmUgZmxhZ3Mgb3IgZ2l0IGNvbmZpZ3Vy
YXRpb24gZmlsZXMuCkZvciBiaWcgcmVwb3NpdG9yaWVzLCBpZ25vcmluZyAq
dW50cmFja2VkKiBmaWxlcyBjYW4gbWFrZSBnaXQgZmFzdGVyLgpCYXNoLWl0
IHVzZXMgYGdpdCBzdGF0dXNgIHRvIGdhdGhlciB0aGUgcmVwbyBpbmZvcm1h
dGlvbiBpdCBzaG93cyBpbiB0aGUgcHJvbXB0LCBzbyBpbiBzb21lIGNpcmN1
bXN0YW5jZXMsIGl0IGNhbiBiZSB1c2VmdWwgdG8gaW5zdHJ1Y3QgQmFzaC1p
dCB0byBpZ25vcmUgdGhlc2UgZmlsZXMuCllvdSBjYW4gY29udHJvbCB0aGlz
IGJlaGF2aW9yIHdpdGggdGhlIGZsYWcgYFNDTV9HSVRfSUdOT1JFX1VOVFJB
Q0tFRGA6CgpTZXQgYFNDTV9HSVRfSUdOT1JFX1VOVFJBQ0tFRGAgdG8gJ2Zh
bHNlJyAodGhlIGRlZmF1bHQgdmFsdWUpIHRvIGdldCBpbmZvcm1hdGlvbiBh
Ym91dCAqdW50cmFja2VkKiBmaWxlczoKCiogYGV4cG9ydCBTQ01fR0lUX0lH
Tk9SRV9VTlRSQUNLRUQ9ZmFsc2VgCgpTZXQgYFNDTV9HSVRfSUdOT1JFX1VO
VFJBQ0tFRGAgdG8gJ3RydWUnIHRvICoqaWdub3JlKiogKnVudHJhY2tlZCog
ZmlsZXM6CgoqIGBleHBvcnQgU0NNX0dJVF9JR05PUkVfVU5UUkFDS0VEPXRy
dWVgCgpBbHNvLCB3aXRoIHRoaXMgZmxhZyB0byBmYWxzZSwgQmFzaC1pdCB3
aWxsIG5vdCBzaG93IHRoZSByZXBvc2l0b3J5IGFzIGRpcnR5IHdoZW4gdGhl
IHJlcG8gaGFzICp1bnRyYWNrZWQqIGZpbGVzLCBhbmQgd2lsbCBub3QgZGlz
cGxheSB0aGUgY291bnQgb2YgKnVudHJhY2tlZCogZmlsZXMuCgoqKk5PVEU6
KiogSWYgeW91IHNldCBpbiBnaXQgY29uZmlndXJhdGlvbiBmaWxlIHRoZSBv
cHRpb24gdG8gaWdub3JlICp1bnRyYWNrZWQqIGZpbGVzLCB0aGlzIGZsYWcg
aGFzIG5vIGVmZmVjdCwgYW5kIEJhc2gtaXQgd2lsbCBpZ25vcmUgKnVudHJh
Y2tlZCogZmlsZXMgYWx3YXlzLgoKIyMjIFN0YXNoIGl0ZW0gY291bnQKCldo
ZW4gYFNDTV9HSVRfU0hPV19ERVRBSUxTYCBpcyBlbmFibGVkLCB5b3UgY2Fu
IGdldCB0aGUgY291bnQgb2YgKnN0YXNoZWQqIGl0ZW1zLiBUaGlzIGZlYXR1
cmUgY2FuIGJlIHVzZWZ1bCB3aGVuIGEgdXNlciBoYXMgYSBsb3Qgb2Ygc3Rh
c2ggaXRlbXMuClRoaXMgZmVhdHVyZSBpcyBjb250cm9sbGVkIHRocm91Z2gg
dGhlIGZsYWcgYFNDTV9HSVRfU0hPV19TVEFTSF9JTkZPYCBhcyBmb2xsb3dz
OgoKU2V0IGBTQ01fR0lUX1NIT1dfU1RBU0hfSU5GT2AgdG8gJ3RydWUnICh0
aGUgZGVmYXVsdCB2YWx1ZSkgdG8gKipzaG93KiogdGhlIGNvdW50IG9mIHN0
YXNoZWQgaXRlbXM6CgoqIGBleHBvcnQgU0NNX0dJVF9TSE9XX1NUQVNIX0lO
Rk89dHJ1ZWAKClNldCBgU0NNX0dJVF9TSE9XX1NUQVNIX0lORk9gIHRvICdm
YWxzZScgdG8gKipkb24ndCBzaG93KiogaXQ6CgoqIGBleHBvcnQgU0NNX0dJ
VF9TSE9XX1NUQVNIX0lORk89ZmFsc2VgCgojIyMgQWhlYWQvQmVoaW5kIENv
dW50CgpXaGVuIGRpc3BsYXlpbmcgaW5mb3JtYXRpb24gcmVnYXJkaW5nIHdo
ZXRoZXIgb3Igbm90IHRoZSBsb2NhbCBicmFuY2ggaXMgYWhlYWQgb3IgYmVo
aW5kIGl0cyByZW1vdGUgY291bnRlcnBhcnQsIHlvdSBjYW4gb3B0IHRvIGRp
c3BsYXkgdGhlIG51bWJlciBvZiBjb21taXRzIGFoZWFkL2JlaGluZC4KVGhp
cyBpcyB1c2VmdWwgaWYgeW91IG9ubHkgY2FyZSB3aGV0aGVyIG9yIG5vdCB5
b3UgYXJlIGFoZWFkIG9yIGJlaGluZCBhbmQgZG8gbm90IGNhcmUgaG93IGZh
ciBhaGVhZC9iZWhpbmQgeW91IGFyZS4KClNldCBgU0NNX0dJVF9TSE9XX0NP
TU1JVF9DT1VOVGAgdG8gJ3RydWUnICh0aGUgZGVmYXVsdCB2YWx1ZSkgdG8g
KipzaG93KiogdGhlIGNvdW50IG9mIGNvbW1pdHMgYWhlYWQvYmVoaW5kOgoK
KiBgZXhwb3J0IFNDTV9HSVRfU0hPV19DT01NSVRfQ09VTlQ9dHJ1ZWAKClNl
dCBgU0NNX0dJVF9TSE9XX0NPTU1JVF9DT1VOVGAgdG8gJ2ZhbHNlJyB0byAq
KmRvbid0IHNob3cqKiBpdDoKCiogYGV4cG9ydCBTQ01fR0lUX1NIT1dfQ09N
TUlUX0NPVU5UPWZhbHNlYAoKIyMjIEdpdCB1c2VyCgpJbiBzb21lIGVudmly
b25tZW50cywgaXQgaXMgdXNlZnVsIHRvIGtub3cgdGhlIHZhbHVlIG9mIHRo
ZSBjdXJyZW50IGdpdCB1c2VyLCB3aGljaCBpcyB1c2VkIHRvIG1hcmsgYWxs
IG5ldyBjb21taXRzLgpGb3IgZXhhbXBsZSwgYW55IG9yZ2FuaXphdGlvbiB0
aGF0IHVzZXMgdGhlIHByYWN0aWNlIG9mIHBhaXIgcHJvZ3JhbW1pbmcgd2ls
bCB0eXBpY2FsbHkgYXV0aG9yIGVhY2ggY29tbWl0IHdpdGggW2NvbWJpbmVk
IG5hbWVzIG9mIHRoZSB0d28gYXV0aG9yc10oaHR0cHM6Ly9naXRodWIuY29t
L3Bpdm90YWwvZ2l0X3NjcmlwdHMpLgpXaGVuIGFub3RoZXIgcGFpciB1c2Vz
IHRoZSBzYW1lIHBhaXJpbmcgc3RhdGlvbiwgdGhlIGF1dGhvcnMgYXJlIGNo
YW5nZWQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgc2Vzc2lvbi4KClRvIGdl
dCB1cCBhbmQgcnVubmluZyB3aXRoIHRoaXMgdGVjaG5pcXVlLCBydW4gYGdl
bSBpbnN0YWxsIHBpdm90YWxfZ2l0X3NjcmlwdHNgLCBhbmQgdGhlbiBlZGl0
IHlvdXIgYH4vLnBhaXJzYCBmaWxlLCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNp
ZmljYXRpb24gb24gdGhlIFtnZW0ncyBob21lcGFnZV0oaHR0cHM6Ly9naXRo
dWIuY29tL3Bpdm90YWwvZ2l0X3NjcmlwdHMpLgpBZnRlciB0aGF0LCB5b3Ug
c2hvdWxkIGJlIGFibGUgdG8gcnVuIGBnaXQgcGFpciBrZyBhc2AgdG8gc2V0
IHRoZSBhdXRob3IgdG8sIGVnLiAiS29uc3RhbnRpbiBHcmVkZXNrb3VsIGFu
ZCBBbGV4IFNheGJ5IiwgYXNzdW1pbmcgdGhleSd2ZSBiZWVuIGFkZGVkIHRv
IHRoZSBgfi8ucGFpcnNgIGZpbGUuClBsZWFzZSBzZWUgZ2VtJ3MgZG9jdW1l
bnRhdGlvbiBmb3IgbW9yZSBpbmZvcm1hdGlvbi4KClRvIGVuYWJsZSB0aGUg
ZGlzcGxheSBvZiB0aGUgY3VycmVudCBwYWlyIGluIHRoZSBwcm9tcHQsIHlv
dSBtdXN0IHNldCBgU0NNX0dJVF9TSE9XX0NVUlJFTlRfVVNFUmAgdG8gYHRy
dWVgLgpPbmNlIHNldCwgdGhlIGBTQ01fQ1VSUkVOVF9VU0VSYCB2YXJpYWJs
ZSB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgcG9wdWxhdGVkIHdpdGggdGhlIGlu
aXRpYWxzIG9mIHRoZSBnaXQgYXV0aG9yKHMpLgpJdCB3aWxsIGFsc28gYmUg
aW5jbHVkZWQgaW4gdGhlIGRlZmF1bHQgZ2l0IHByb21wdC4KRXZlbiBpZiB5
b3UgZG8gbm90IGhhdmUgYGdpdCBwYWlyYCBpbnN0YWxsZWQsIGFzIGxvbmcg
YXMgeW91ciBgdXNlci5uYW1lYCBpcyBzZXQsIHlvdXIgaW5pdGlhbHMgd2ls
bCBiZSBjb21wdXRlZCBmcm9tIHlvdXIgbmFtZSBhbmQgc2hvd24gaW4gdGhl
IHByb21wdC4KCllvdSBjYW4gY29udHJvbCB0aGUgcHJlZml4IGFuZCB0aGUg
c3VmZml4IG9mIHRoaXMgY29tcG9uZW50IHVzaW5nIHRoZSB0d28gdmFyaWFi
bGVzOgoKKiBgZXhwb3J0IFNDTV9USEVNRV9DVVJSRU5UX1VTRVJfUFJFRkZJ
WD0nIOKYuu+4jiAnYAoKQW5kCgoqIGBleHBvcnQgU0NNX1RIRU1FX0NVUlJF
TlRfVVNFUl9TVUZGSVg9JyDimLrvuI4gJ2AKCioqTk9URToqKiBJZiB1c2lu
ZyBgU0NNX0dJVF9TSE9XX01JTklNQUxfSU5GTz10cnVlYCwgdGhlbiB0aGUg
dmFsdWUgb2YgYFNDTV9HSVRfU0hPV19DVVJSRU5UX1VTRVJgIGlzIGlnbm9y
ZWQuCgojIyMgR2l0IHNob3cgbWluaW1hbCBzdGF0dXMgaW5mbwoKVG8gc3Bl
ZWQgdXAgdGhlIHByb21wdCB3aGlsZSBzdGlsbCBnZXR0aW5nIG1pbmltYWwg
Z2l0IHN0YXR1cyBpbmZvcm1hdGlvbiBkaXNwbGF5ZWQgc3VjaCBhcyB0aGUg
dmFsdWUgb2YgYEhFQURgIGFuZCB3aGV0aGVyIHRoZXJlIGFyZSBhbnkgZGly
dHkgb2JqZWN0cywgeW91IGNhbiBzZXQ6CgpgYGAKZXhwb3J0IFNDTV9HSVRf
U0hPV19NSU5JTUFMX0lORk89dHJ1ZQpgYGAKCiMjIyBJZ25vcmUgcmVwbyBz
dGF0dXMKCldoZW4gd29ya2luZyBpbiByZXBvcyB3aXRoIGEgbGFyZ2UgY29k
ZWJhc2UsIEJhc2gtaXQgY2FuIHNsb3cgZG93biB5b3VyIHByb21wdCB3aGVu
IGNoZWNraW5nIHRoZSByZXBvIHN0YXR1cy4KVG8gYXZvaWQgaXQsIHRoZXJl
IGlzIGFuIG9wdGlvbiB5b3UgY2FuIHNldCB2aWEgR2l0IGNvbmZpZyB0byBk
aXNhYmxlIGNoZWNraW5nIHJlcG8gc3RhdHVzIGluIEJhc2gtaXQuCgpUbyBk
aXNhYmxlIGNoZWNraW5nIHRoZSBzdGF0dXMgaW4gdGhlIGN1cnJlbnQgcmVw
bzoKCmBgYAokIGdpdCBjb25maWcgLS1hZGQgYmFzaC1pdC5oaWRlLXN0YXR1
cyAxCmBgYAoKQnV0IGlmIHlvdSB3b3VsZCBsaWtlIHRvIGRpc2FibGUgaXQg
Z2xvYmFsbHksIGFuZCBzdG9wIGNoZWNraW5nIHRoZSBzdGF0dXMgZm9yIGFs
bCBvZiB5b3VyIHJlcG9zOgoKYGBgCiQgZ2l0IGNvbmZpZyAtLWdsb2JhbCAt
LWFkZCBiYXNoLWl0LmhpZGUtc3RhdHVzIDEKYGBgCgpTZXR0aW5nIHRoaXMg
ZmxhZyBnbG9iYWxseSBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzIGBTQ01fQ0hF
Q0s9dHJ1ZWAsIGJ1dCBvbmx5IGZvciBHaXQgcmVwb3MuCgojIyMgUGFzcyBm
dW5jdGlvbiByZW5hbWVkIHRvIHBhc3NnZW4KClRoZSBCYXNoLWl0IGBwYXNz
YCBmdW5jdGlvbiBoYXMgYmVlbiByZW5hbWVkIHRvIGBwYXNzZ2VuYCBpbiBv
cmRlciB0byBhdm9pZCBhIG5hbWluZyBjb25mbGljdCB3aXRoIHRoZSBbcGFz
cyBwYXNzd29yZCBtYW5hZ2VyXShodHRwczovL3d3dy5wYXNzd29yZHN0b3Jl
Lm9yZy8pLgpJbiBvcmRlciB0byBtaW5pbWl6ZSB0aGUgaW1wYWN0IG9uIHVz
ZXJzIG9mIHRoZSBsZWdhY3kgQmFzaC1pdCBgcGFzc2AgZnVuY3Rpb24sIEJh
c2gtaXQgd2lsbCBjcmVhdGUgdGhlIGFsaWFzIGBwYXNzYCB0aGF0IGNhbGxz
IHRoZSBuZXcgYHBhc3NnZW5gIGZ1bmN0aW9uIGlmIHRoZSBgcGFzc2AgcGFz
c3dvcmQgbWFuYWdlciBjb21tYW5kIGlzIG5vdCBmb3VuZCBvbiB0aGUgYFBB
VEhgIChkZWZhdWx0IGJlaGF2aW9yKS4KClRoaXMgYmVoYXZpb3IgY2FuIGJl
IG92ZXJyaWRkZW4gd2l0aCB0aGUgYEJBU0hfSVRfTEVHQUNZX1BBU1NgIGZs
YWcgYXMgZm9sbG93czoKClNldCBgQkFTSF9JVF9MRUdBQ1lfUEFTU2AgdG8g
J3RydWUnIHRvIGZvcmNlIEJhc2gtaXQgdG8gYWx3YXlzICoqY3JlYXRlKiog
dGhlIGBwYXNzYCBhbGlhcyB0byBgcGFzc2dlbmA6CgoqIGBleHBvcnQgQkFT
SF9JVF9MRUdBQ1lfUEFTUz10cnVlYAoKVW5zZXQgYEJBU0hfSVRfTEVHQUNZ
X1BBU1NgIHRvIGhhdmUgQmFzaC1pdCAqKnJldHVybiB0byBkZWZhdWx0IGJl
aGF2aW9yKio6CgoqIGB1bnNldCBCQVNIX0lUX0xFR0FDWV9QQVNTYAoKIyMj
IFByb3h5IFN1cHBvcnQKCklmIHlvdSBhcmUgd29ya2luZyBpbiBhIGNvcnBv
cmF0ZSBlbnZpcm9ubWVudCB3aGVyZSB5b3UgaGF2ZSB0byBnbyB0aHJvdWdo
IGEgcHJveHkgc2VydmVyIGZvciBpbnRlcm5ldCBhY2Nlc3MsCnRoZW4geW91
IGtub3cgaG93IHBhaW5mdWwgaXQgaXMgdG8gY29uZmlndXJlIHRoZSBPUyBw
cm94eSB2YXJpYWJsZXMgaW4gdGhlIHNoZWxsLAplc3BlY2lhbGx5IGlmIHlv
dSBhcmUgc3dpdGNoaW5nIGJldHdlZW4gZW52aXJvbm1lbnRzLCBlLmcuIG9m
ZmljZSAod2l0aCBwcm94eSkgYW5kIGhvbWUgKHdpdGhvdXQgcHJveHkpLgoK
VGhlIEJhc2ggc2hlbGwgKGFuZCBtYW55IHNoZWxsIHRvb2xzKSB1c2UgdGhl
IGZvbGxvd2luZyB2YXJpYWJsZXMgdG8gZGVmaW5lIHRoZSBwcm94eSB0byB1
c2U6CgoqIGBIVFRQX1BST1hZYCAoYW5kIGBodHRwX3Byb3h5YCk6IERlZmlu
ZXMgdGhlIHByb3h5IHNlcnZlciBmb3IgSFRUUCByZXF1ZXN0cwoqIGBIVFRQ
U19QUk9YWWAgKGFuZCBgaHR0cHNfcHJveHlgKTogRGVmaW5lcyB0aGUgcHJv
eHkgc2VydmVyIGZvciBIVFRQUyByZXF1ZXN0cwoqIGBBTExfUFJPWFlgIChh
bmQgYGFsbF9wcm94eWApOiBVc2VkIGJ5IHNvbWUgdG9vbHMgZm9yIHRoZSBz
YW1lIHB1cnBvc2UgYXMgYWJvdmUKKiBgTk9fUFJPWFlgIChhbmQgYG5vX3By
b3h5YCk6IENvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGhvc3RuYW1lcyB0aGF0
IGRvbid0IGhhdmUgdG8gZ28gdGhyb3VnaCB0aGUgcHJveHkKCkJhc2gtaXQn
cyBgcHJveHlgIHBsdWdpbiBhbGxvd3MgdG8gZW5hYmxlIGFuZCBkaXNhYmxl
IHRoZXNlIHZhcmlhYmxlcyB3aXRoIGEgc2ltcGxlIGNvbW1hbmQuClRvIHN0
YXJ0IHVzaW5nIHRoZSBgcHJveHlgIHBsdWdpbiwgcnVuIHRoZSBmb2xsb3dp
bmc6CgpgYGBiYXNoCmJhc2gtaXQgZW5hYmxlIHBsdWdpbiBwcm94eQpgYGAK
CkJhc2gtaXQgYWxzbyBwcm92aWRlcyBzdXBwb3J0IGZvciBlbmFibGluZy9k
aXNhYmxpbmcgcHJveHkgc2V0dGluZ3MgZm9yIHZhcmlvdXMgc2hlbGwgdG9v
bHMuClRoZSBmb2xsb3dpbmcgYmFja2VuZHMgYXJlIGN1cnJlbnRseSBzdXBw
b3J0ZWQgKGluIGFkZGl0aW9uIHRvIHRoZSBzaGVsbCdzIGVudmlyb25tZW50
IHZhcmlhYmxlcyk6IEdpdCwgU1ZOLCBucG0sIHNzaC4KVGhlIGBwcm94eWAg
cGx1Z2luIGNoYW5nZXMgdGhlIGNvbmZpZ3VyYXRpb24gZmlsZXMgb2YgdGhl
c2UgdG9vbHMgdG8gZW5hYmxlIG9yIGRpc2FibGUgdGhlIHByb3h5IHNldHRp
bmdzLgoKQmFzaC1pdCB1c2VzIHRoZSBmb2xsb3dpbmcgdmFyaWFibGVzIHRv
IHNldCB0aGUgc2hlbGwncyBwcm94eSBzZXR0aW5ncyB3aGVuIHlvdSBjYWxs
IGBlbmFibGUtcHJveHlgLgpUaGVzZSB2YXJpYWJsZXMgYXJlIGJlc3QgZGVm
aW5lZCBpbiBhIGN1c3RvbSBzY3JpcHQgaW4gQmFzaC1pdCdzIGN1c3RvbSBz
Y3JpcHQgZm9sZGVyIChgJEJBU0hfSVQvY3VzdG9tYCksIGUuZy4gYCRCQVNI
X0lUL2N1c3RvbS9wcm94eS5lbnYuYmFzaGAKKiBgQkFTSF9JVF9IVFRQX1BS
T1hZYCBhbmQgYEJBU0hfSVRfSFRUUFNfUFJPWFlgOiBEZWZpbmUgdGhlIHBy
b3h5IFVSTCB0byBiZSB1c2VkLCBlLmcuICdodHRwOi8vbG9jYWxob3N0OjEy
MzQnCiogYEJBU0hfSVRfTk9fUFJPWFlgOiBBIGNvbW1hLXNlcGFyYXRlZCBs
aXN0IG9mIHByb3h5IGV4Y2x1c2lvbnMsIGUuZy4gYDEyNy4wLjAuMSxsb2Nh
bGhvc3RgCgpPbmNlIHlvdSBoYXZlIGRlZmluZWQgdGhlc2UgdmFyaWFibGVz
IChhbmQgaGF2ZSBydW4gYHJlbG9hZGAgdG8gbG9hZCB0aGUgY2hhbmdlcyks
IHlvdSBjYW4gdXNlIHRoZSBmb2xsb3dpbmcgY29tbWFuZHMgdG8gZW5hYmxl
IG9yIGRpc2FibGUgdGhlIHByb3h5IHNldHRpbmdzIGluIHlvdXIgY3VycmVu
dCBzaGVsbDoKCiogYGVuYWJsZS1wcm94eWA6IFRoaXMgc2V0cyB0aGUgc2hl
bGwncyBwcm94eSBlbnZpcm9ubWVudCB2YXJpYWJsZXMgYW5kIGNvbmZpZ3Vy
ZXMgcHJveHkgc3VwcG9ydCBpbiB5b3VyIFNWTiwgbnBtLCBhbmQgU1NIIGNv
bmZpZ3VyYXRpb24gZmlsZXMuCiogYGRpc2FibGUtcHJveHlgOiBUaGlzIHVu
c2V0cyB0aGUgc2hlbGwncyBwcm94eSBlbnZpcm9ubWVudCB2YXJpYWJsZXMg
YW5kIGRpc2FibGVzIHByb3h5IHN1cHBvcnQgaW4geW91ciBTVk4sIG5wbSwg
YW5kIFNTSCBjb25maWd1cmF0aW9uIGZpbGVzLgoKVGhlcmUgYXJlIG1hbnkg
bW9yZSBwcm94eSBjb21tYW5kcywgZS5nLiBmb3IgY2hhbmdpbmcgdGhlIGxv
Y2FsIEdpdCBwcm9qZWN0J3MgcHJveHkgc2V0dGluZ3MuClJ1biBgZ2xvc3Nh
cnkgcHJveHlgIHRvIHNob3cgdGhlIGF2YWlsYWJsZSBwcm94eSBmdW5jdGlv
bnMgd2l0aCBhIHNob3J0IGRlc2NyaXB0aW9uLgoKIyMgSGVscCBvdXQKCldl
IHRoaW5rIGV2ZXJ5b25lIGhhcyB0aGVpciBvd24gY3VzdG9tIHNjcmlwdHMg
YWNjdW11bGF0ZWQgb3ZlciB0aW1lLgpBbmQgc28sIGZvbGxvd2luZyBpbiB0
aGUgZm9vdHN0ZXBzIG9mIG9oLW15LXpzaCwgQmFzaC1pdCBpcyBhIGZyYW1l
d29yayBmb3IgZWFzaWx5IGN1c3RvbWl6aW5nIHlvdXIgQmFzaCBzaGVsbC4K
RXZlcnlvbmUncyBnb3QgYSBjdXN0b20gdG9vbGJveCwgc28gbGV0J3Mgc3Rh
cnQgbWFraW5nIHRoZW0gZXZlbiBiZXR0ZXIsICoqYXMgYSBjb21tdW5pdHkh
KioKClNlbmQgdXMgYSBwdWxsIHJlcXVlc3QgYW5kIHdlJ2xsIG1lcmdlIGl0
IGFzIGxvbmcgYXMgaXQgbG9va3MgZ29vZC4KSWYgeW91IGNoYW5nZSBhbiBl
eGlzdGluZyBjb21tYW5kLCBwbGVhc2UgZ2l2ZSBhbiBleHBsYW5hdGlvbiB3
aHkuClRoYXQgd2lsbCBoZWxwIGEgbG90IHdoZW4gd2UgbWVyZ2UgeW91ciBj
aGFuZ2VzIGluLgoKUGxlYXNlIHRha2UgYSBsb29rIGF0IHRoZSBbQ29udHJp
YnV0aW9uIEd1aWRlbGluZXNdKENPTlRSSUJVVElORy5tZCkgYmVmb3JlIHJl
cG9ydGluZyBhIGJ1ZyBvciBwcm92aWRpbmcgYSBuZXcgZmVhdHVyZS4KClRo
YW5rcywgYW5kIGhhcHBpbmcgYmFzaGluZyEKCgojIyBDb250cmlidXRvcnMK
CiogW0xpc3Qgb2YgY29udHJpYnV0b3JzXVtjb250cmlidXRlXQoKW2NvbnRy
aWJ1dGVdOiBodHRwczovL2dpdGh1Yi5jb20vQmFzaC1pdC9iYXNoLWl0L2Nv
bnRyaWJ1dG9ycwpbcGFzcyBwYXNzd29yZCBtYW5hZ2VyXTogaHR0cDovL3d3
dy5wYXNzd29yZHN0b3JlLm9yZy8K
",,10936,"c3VkbzogZmFsc2UKc2NyaXB0OiB0ZXN0L3J1bgpsYW5ndWFnZTogYwpvczoK
ICAtIGxpbnV4CiAgLSBvc3gK
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
b'CheatSheetSeries',162723104,b'The OWASP Cheat Sheet Series was created to provide a concise collection of high value information on specific application security topics.',b'Python',51,10936,,367,False,b'https://api.github.com/repos/OWASP/CheatSheetSeries/forks',"WyFbT1dBU1AgRmxhZ3NoaXBdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFk
Z2Uvb3dhc3AtZmxhZ3NoaXAlMjBwcm9qZWN0LTQ4QTY0Ni5zdmcpXShodHRw
czovL3d3dy5vd2FzcC5vcmcvaW5kZXgucGhwL09XQVNQX1Byb2plY3RfSW52
ZW50b3J5I3RhYj1GbGFnc2hpcF9Qcm9qZWN0cykKIVtDU0NvdW50ZXJCYWRn
ZV0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9iYWRnZS9jaGVhdF9zaGVldHNf
YXZhaWxhYmxlLTYzLW9yYW5nZS5zdmcpCiFbTGljZW5zZUJhZGdlXShodHRw
czovL2ltZy5zaGllbGRzLmlvL2JhZGdlL2xpY2Vuc2UtQ19DLWJsdWUuc3Zn
KQpbIVtQdXNoQW5kUHVsbFJlcXVlc3RJbnRlZ3JpdHlDaGVja10oaHR0cHM6
Ly90cmF2aXMtY2kub3JnL09XQVNQL0NoZWF0U2hlZXRTZXJpZXMuc3ZnP2Jy
YW5jaD1tYXN0ZXIpXShodHRwczovL3RyYXZpcy1jaS5vcmcvT1dBU1AvQ2hl
YXRTaGVldFNlcmllcykKWyFbT2ZmbGluZVdlYnNpdGVCdWlsZF0oaHR0cHM6
Ly9jaXJjbGVjaS5jb20vZ2gvT1dBU1AvQ2hlYXRTaGVldFNlcmllcy90cmVl
L21hc3Rlci5zdmc/c3R5bGU9c3ZnKV0oaHR0cHM6Ly9jaXJjbGVjaS5jb20v
Z2gvT1dBU1AvQ2hlYXRTaGVldFNlcmllcy90cmVlL21hc3RlcikKCiFbT1dB
U1BIZWFkZXJdKGFzc2V0cy9QcmVmYWNlX0NoZWF0c2hlZXRfSGVhZGVyLnBu
ZykKCiFbUHJvamVjdExvZ29PZmZpY2lhbF0oYXNzZXRzL1ByZWZhY2VfQ2hl
YXRzaGVldF9Mb2dvLnBuZykKCiMgV2VsY29tZSB0byBPV0FTUCBDaGVhdCBT
aGVldCBTZXJpZXMgVjIKClRoaXMgcmVwb3NpdG9yeSBjb250YWlucyBhbGwg
dGhlIGNoZWF0IHNoZWV0cyBvZiB0aGUgcHJvamVjdCBhbmQgcmVwcmVzZW50
IHRoZSBWMiBvZiB0aGUgKipPV0FTUCBDaGVhdCBTaGVldCBTZXJpZXMqKiBw
cm9qZWN0LgoKTGlua3M6CiogW09XQVNQIGhvbWUgcGFnZSBvZiB0aGUgcHJv
amVjdF0oaHR0cHM6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9PV0FTUF9D
aGVhdF9TaGVldF9TZXJpZXMpCiogW09mZmljaWFsIHdlYnNpdGVdKGh0dHBz
Oi8vY2hlYXRzaGVldHNlcmllcy5vd2FzcC5vcmcpCiogW0dpdGh1YiByZXBv
c2l0b3J5XShodHRwczovL2dpdGh1Yi5jb20vT1dBU1AvQ2hlYXRTaGVldFNl
cmllcykKCiMgVGFibGUgb2YgQ29udGVudHMKCi0gW1JlZmVyZW5jZSB0byB0
aGUgQ2hlYXQgU2hlZXRzXSgjcmVmZXJlbmNlLXRvLXRoZS1jaGVhdC1zaGVl
dHMpCi0gW0NoZWF0IFNoZWV0cyBpbmRleF0oI2NoZWF0LXNoZWV0cy1pbmRl
eCkKLSBbU3BlY2lhbCB0aGFua3NdKCNzcGVjaWFsLXRoYW5rcykKLSBbRWRp
dG9yICYgdmFsaWRhdGlvbiBwb2xpY3ldKCNlZGl0b3ItLXZhbGlkYXRpb24t
cG9saWN5KQotIFtDb252ZXJzaW9uIHJ1bGVzXSgjY29udmVyc2lvbi1ydWxl
cykKLSBbSG93IHRvIHNldHVwIG15IGNvbnRyaWJ1dG9yIGVudmlyb25tZW50
P10oI2hvdy10by1zZXR1cC1teS1jb250cmlidXRvci1lbnZpcm9ubWVudCkK
LSBbSG93IHRvIGNvbnRyaWJ1dGU/XSgjaG93LXRvLWNvbnRyaWJ1dGUpCi0g
W0NvbnRyaWJ1dG9yc10oI2NvbnRyaWJ1dG9ycykKLSBbT2ZmbGluZSB3ZWJz
aXRlXSgjb2ZmbGluZS13ZWJzaXRlKQotIFtQcm9qZWN0IGxlYWRlcnNdKCNw
cm9qZWN0LWxlYWRlcnMpCi0gW0NvcmUgdGVhbV0oI2NvcmUtdGVhbSkKLSBb
UFIgdXNhZ2UgZm9yIGNvcmUgY29tbWl0dGVyc10oI3ByLXVzYWdlLWZvci1j
b3JlLWNvbW1pdHRlcnMpCi0gW1Byb2plY3QgbG9nb10oI3Byb2plY3QtbG9n
bykKLSBbRm9sZGVyc10oI2ZvbGRlcnMpCi0gW0xpY2Vuc2VdKCNsaWNlbnNl
KQotIFtDb2RlIG9mIGNvbmR1Y3RdKENPREVfT0ZfQ09ORFVDVC5tZCkKLSBb
RE5TIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSB3ZWJzaXRlXSgjZG5zLWNvbmZp
Z3VyYXRpb24tZm9yLXRoZS13ZWJzaXRlKQotIFtGbGFnc2hpcCBncmFkdWF0
aW9uXSgjZmxhZ3NoaXAtZ3JhZHVhdGlvbikKCiMgUmVmZXJlbmNlIHRvIHRo
ZSBDaGVhdCBTaGVldHMKCldoZW4gYSByZWZlcmVuY2UgdG8gYSBjaGVhdCBz
aGVldCBuZWVkcyB0byBiZSBjcmVhdGVkLCB0aGVuIGEgbGluayBwb2ludGlu
ZyB0byB0aGUgcHJvamVjdCAoZ2VuZXJhdGVkKSBvZmZpY2lhbCB3ZWIgc2l0
ZSBob3N0ZWQgb24gKipodHRwczovL2NoZWF0c2hlZXRzZXJpZXMub3dhc3Au
b3JnKiogbXVzdCBiZSB1c2VkLgoKOnRyaWFuZ3VsYXJfZmxhZ19vbl9wb3N0
OiBNYXJrZG93biBmaWxlcyBhcmUgdGhlIHdvcmtpbmcgc291cmNlcyBhbmQg
YXJlIG5vdCBpbnRlbmRlZCB0byBiZSByZWZlcmVuY2VkIGluIGFueSBleHRl
cm5hbCBkb2N1bWVudGF0aW9uL2Jvb2svd2Vic2l0ZS9ldGMuCgojIENoZWF0
IFNoZWV0cyBpbmRleAoKVGhlIGZvbGxvd2luZyBpbmRleGVzIGFyZSBwcm92
aWRlZDoKKiBUaGlzIFtpbmRleF0oSW5kZXgubWQpIHJlZmVyZW5jZXMgYWxs
IHJlbGVhc2VkIGNoZWF0IHNoZWV0cyBzb3J0ZWQgYWxwaGFiZXRpY2FsbHku
CiAgICAqIFRoaXMgaW5kZXggaXMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQg
YnkgdGhpcyBbc2NyaXB0XShzY3JpcHRzL1VwZGF0ZV9DaGVhdFNoZWV0c19J
bmRleC5weSkuCiogVGhpcyBbaW5kZXhdKEluZGV4QVNWUy5tZCkgcmVmZXJl
bmNlcyBhbGwgcmVsZWFzZWQgY2hlYXQgc2hlZXRzIHVzaW5nIHRoZSBbT1dB
U1AgQVNWU10oaHR0cHM6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9DYXRl
Z29yeTpPV0FTUF9BcHBsaWNhdGlvbl9TZWN1cml0eV9WZXJpZmljYXRpb25f
U3RhbmRhcmRfUHJvamVjdCkgcHJvamVjdCBhcyByZWFkaW5nIHNvdXJjZS4K
ICAgICogVGhpcyBpbmRleCBpcyBtYW51YWxseSBtYW5hZ2VkIGluIG9yZGVy
IHRvIGFsbG93IGNvbnRyaWJ1dGlvbiBhbG9uZyB3aXRoIGN1c3RvbSBjb250
ZW50LgoqIFRoaXMgW2luZGV4XShJbmRleFByb2FjdGl2ZUNvbnRyb2xzLm1k
KSByZWZlcmVuY2VzIGFsbCByZWxlYXNlZCBjaGVhdCBzaGVldHMgdXNpbmcg
dGhlIFtPV0FTUCBQcm9hY3RpdmUgQ29udHJvbHNdKGh0dHBzOi8vd3d3Lm93
YXNwLm9yZy9pbmRleC5waHAvT1dBU1BfUHJvYWN0aXZlX0NvbnRyb2xzKSBw
cm9qZWN0IGFzIHRoZSByZWFkaW5nIHNvdXJjZS4KICAgICogVGhpcyBpbmRl
eCBpcyBtYW51YWxseSBtYW5hZ2VkIGluIG9yZGVyIHRvIGFsbG93IGNvbnRy
aWJ1dGlvbiBhbG9uZyB3aXRoIGN1c3RvbSBjb250ZW50LgoKVGhlIG9mZmlj
aWFsIHdlYnNpdGUgcHJvdmlkZXMgYSBzZWFyY2ggYmFyICh0b3AgbGVmdCBj
b3JuZXIpIHRoYXQgY2FuIGJlIHVzZWQuCgojIFByb2plY3QgbGVhZGVycwoK
KiBbSmltIE1hbmljb10oaHR0cHM6Ly9naXRodWIuY29tL2ptYW5pY28pLgoK
IyBDb3JlIHRlYW0KCioqQW55IEdpdEh1YiBtZW1iZXIgaXMgZnJlZSB0byBh
ZGQgYSBjb21tZW50IG9uIGFueSBQcm9wb3NhbCAoaXNzdWUpIG9yIFBSLioq
CgpIb3dldmVyLCB3ZSBoYXZlIGNyZWF0ZWQgYW4gb2ZmaWNpYWwgY29yZSB0
ZWFtIChjb3JlIGNvbW1pdHRlcnMpIGluIG9yZGVyIHRvOgoqIFJldmlldyBh
bGwgUFIvUHJvcG9zYWwgaW4gYSBjb25zaXN0ZW50L3JlZ3VsYXIgd2F5IHVz
aW5nIFtHaXRIdWIncyByZXZpZXcgZmVhdHVyZV0oaHR0cHM6Ly9oZWxwLmdp
dGh1Yi5jb20vZW4vYXJ0aWNsZXMvcmV2aWV3aW5nLXByb3Bvc2VkLWNoYW5n
ZXMtaW4tYS1wdWxsLXJlcXVlc3QpLgoqIEV4dGVuZCB0aGUgZmllbGQgb2Yg
dGVjaG5vbG9naWVzIGtub3duIGJ5IHRoZSByZXZpZXcgdGVhbS4KKiBBbGxv
dyBzZXZlcmFsIHRlY2huaWNhbCBvcGluaW9ucyBvbiBhIFByb3Bvc2FsL1BS
LCBhbGwgZXhjaGFuZ2VzIGFyZSBwdWJsaWMgYmVjYXVzZSB3ZSB1c2UgdGhl
IEdpdEh1YiBjb21tZW50IGZlYXR1cmUuCgpBIGRlY2lzaW9uIGZyb20gYSBt
ZW1iZXIgb2YgdGhlIGNvcmUgdGVhbSBoYXMgdGhlIHNhbWUgd2VpZ2h0IHRv
IHRob3NlIG9mIHRoZSBwcm9qZWN0J3MgbGVhZGVycywgc28gaWYgYSBjb3Jl
IHRlYW0gbWVtYmVyIHJlamVjdHMgYSBQUiAoKnJlamVjdGlvbiBtdXN0IGJl
IHRlY2huaWNhbGx5IGRvY3VtZW50ZWQgYW5kIGV4cGxhaW5lZCopLCB0aGVu
IHRoZSBwcm9qZWN0J3MgbGVhZGVycyB3aWxsIGNhcnJ5IG9uIHRoYXQgc2Ft
ZSBkZWNpc2lvbi4KCk1lbWJlcnM6CiogW0VsaWUgU2FhZF0oaHR0cHM6Ly9n
aXRodWIuY29tL1RodW5kZXJTb24pLgoqIFtKYWt1YiBNYcSHa293c2tpXSho
dHRwczovL2dpdGh1Yi5jb20vbWFja293c2tpKS4KKiBbUm9iaW4gQmFpbGV5
XShodHRwczovL2dpdGh1Yi5jb20vcmJzZWMpLgoqIFtKaW0gTWFuaWNvXSho
dHRwczovL2dpdGh1Yi5jb20vam1hbmljbykuCgojIFBSIHVzYWdlIGZvciBj
b3JlIGNvbW1pdHRlcnMKCkZvciB0aGUgZm9sbG93aW5nIGtpbmQgb2YgbW9k
aWZpY2F0aW9ucywgdGhlIFBSIHN5c3RlbSB3aWxsIGJlIHVzZWQgYnkgdGhl
IGNvcmUgY29tbWl0dGVycyBpbiBvcmRlciB0byBhbGxvdyBwZWVyIHJldmll
dyB1c2luZyB0aGUgR2l0SHViIFBSIHJldmlldyBzeXN0ZW06CiogQWRkaXRp
b24gb2YgYSBuZXcgY2hlYXQgc2hlZXQuCiogRGVlcCBtb2RpZmljYXRpb24g
b2YgYW4gZXhpc3RpbmcgY2hlYXQgc2hlZXQuCgpCZWxvdyBhcmUgdGhlIHN0
ZXBzIHRvIHByb3Blcmx5IHN1Ym1pdCBhIFBSOgoxLiBDbG9uZSB0aGUgcHJv
amVjdC4KMi4gTW92ZSBvbiB0byB0aGUgYG1hc3RlcmAgYnJhbmNoOiAKICAg
ID4gYGdpdCBjaGVja291dCBtYXN0ZXJgCjMuIEVuc3VyZSB0aGF0IHlvdSBo
YXZlIHRoZSBsYXRlc3QgZmlsZXM6CiAgICA+IGBnaXQgcHVsbGAKNC4gQ3Jl
YXRlIGEgYnJhbmNoIG5hbWVkIGBDU1MtW0lEXWAgd2hlcmUgKipbSURdKiog
aXMgdGhlIG51bWJlciBvZiB0aGUgbGlua2VkIGlzc3VlIG9wZW5lZCBwcmlv
ciB0byB0aGUgUFIgdG8gZm9sbG93IHRoZSBjb250cmlidXRpb24gcHJvY2Vz
czoKICAgID4gYGdpdCBjaGVja291dCAtYiBDU1MtW0lEXWAKNS4gU3dpdGNo
IHRvIHRoaXMgbmV3IGJyYW5jaCAobm9ybWFsbHkgaXQncyBhbHJlYWR5IHRo
ZSBjYXNlKToKICAgID4gYGdpdCBjaGVja291dCBDU1MtW0lEXWAKNi4gRG8g
dGhlIGV4cGVjdGVkIHdvcmsuCjcuIFB1c2ggdGhlIG5ldyBicmFuY2g6CiAg
ICA+IGBnaXQgcHVzaCBvcmlnaW4gQ1NTLVtJRF1gICAgCjguIFdoZW4gdGhl
IHdvcmsgaXMgcmVhZHkgZm9yIHRoZSByZXZpZXcsIGNyZWF0ZSBhIHB1bGwg
cmVxdWVzdCBieSB2aXNpdGluZyB0aGlzIGxpbms6CiAgICA+IGBodHRwczov
L2dpdGh1Yi5jb20vT1dBU1AvQ2hlYXRTaGVldFNlcmllcy9wdWxsL25ldy9D
U1MtW0lEXWAKOS4gSW1wbGVtZW50IHRoZSBtb2RpZmljYXRpb25zIHJlcXVl
c3RlZCBieSB0aGUgcmV2aWV3ZXJzLiBPbmNlIHRoZSByZXZpZXdlcnMgYXBw
cm92ZSB0aGUgUFIsIGl0IGlzIHRoZW4gbWVyZ2VkIHRvIHRoZSBgbWFzdGVy
YCBicmFuY2guCjEwLiBPbmNlIG1lcmdlZCwgZGVsZXRlIHRoZSBicmFuY2gg
dXNpbmcgdGhpcyBbR2l0SHViIGZlYXR1cmVdKGh0dHBzOi8vaGVscC5naXRo
dWIuY29tL2VuL2FydGljbGVzL2NyZWF0aW5nLWFuZC1kZWxldGluZy1icmFu
Y2hlcy13aXRoaW4teW91ci1yZXBvc2l0b3J5I2RlbGV0aW5nLWEtYnJhbmNo
KS4KClNlZSBwcm9qZWN0IGN1cnJlbnQgW2JyYW5jaGVzXShodHRwczovL2dp
dGh1Yi5jb20vT1dBU1AvQ2hlYXRTaGVldFNlcmllcy9icmFuY2hlcykuCgoj
IFByb2plY3QgbG9nbwoKVGhlIHByb2plY3QncyBvZmZpY2lhbCBsb2dvIGZp
bGVzIGFyZSBob3N0ZWQgW2hlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9PV0FT
UC9vd2FzcC1zd2FnL3RyZWUvbWFzdGVyL3Byb2plY3RzL2NoZWF0LXNoZWV0
LXNlcmllcykuCgojIEZvbGRlcnMKCioqY2hlYXRzaGVldHNfZXhjbHVkZWQq
KjoKKiBDb250YWlucyB0aGUgY2hlYXQgc2hlZXRzIG1hcmtkb3duIGZpbGVz
IGNvbnZlcnRlZCB3aXRoIFBBTkRPQy4gQmVmb3JlIGluY2x1c2lvbiBpbnRv
IFYyIG9mIHRoaXMgcHJvamVjdCwgYSBkaXNjdXNzaW9uIG11c3Qgb2NjdXIg
dG8gZGVjaWRlIGlmIHRoaXMgY29udGVudCBpcyBzdGlsbCByZWxldmFudCwg
YXMgaXQgaGFzIG5vdCBiZWVuIHJlY2VudGx5IHVwZGF0ZWQuIFNlZSB0aGlz
IFtkaXNjdXNzaW9uXShodHRwczovL2dpdGh1Yi5jb20vT1dBU1AvQ2hlYXRT
aGVldFNlcmllcy9pc3N1ZXMvMTMpLiAKCioqY2hlYXRzaGVldHMqKjogCiog
Q29udGFpbnMgdGhlIGZpbmFsIGNoZWF0IHNoZWV0cyBmaWxlcy4gCiogQW55
IGAubWRgIGZpbGUgcHJlc2VudCBpbiB0aGlzIGZvbGRlciBpcyBjb25zaWRl
cmVkIHJlbGVhc2VkLgoKKiphc3NldHMqKjogCiogQ29udGFpbnMgdGhlIGFz
c2V0cyB1c2VkIGJ5IHRoZSBjaGVhdCBzaGVldHMgKGltYWdlcywgUERGJ3Ms
IFpJUCBmaWxlcyBldGMuKS4KICAgICogTmFtaW5nIGNvbnZlbnRpb24gaXMg
YFtDSEVBVF9TSEVFVF9NQVJLRE9XTl9GSUxFX05BTUVdX1tJREVOVElGSUVS
XS5bRVhURU5TSU9OXWAKICAgICogVXNlIGBQTkdgIGZvcm1hdCBmb3IgdGhl
IGltYWdlcy4KCioqc2NyaXB0cyoqOgoqIENvbnRhaW5zIGFsbCB0aGUgdXRp
bGl0eSBzY3JpcHRzIHVzZWQgdG8gb3BlcmF0ZSB0aGUgcHJvamVjdCAobWFy
a2Rvd24gbGludGVyIGF1ZGl0LCBkZWFkIGxpbmsgaWRlbnRpZmljYXRpb24g
ZXRjLikuICAgIAoKKip0ZW1wbGF0ZXMqKjoKKiBDb250YWlucyB0ZW1wbGF0
ZXMgdXNlZCBmb3IgZGlmZmVyZW50IGtpbmRzIG9mIGZpbGVzIChjaGVhdHNo
ZWV0cyBldGMuKS4KCioqLmdpdGh1YioqOgoqIENvbnRhaW5zIG1hdGVyaWFs
cyB1c2VkIHRvIGNvbmZpZ3VyZSBkaWZmZXJlbnQgYmVoYXZpb3JzIG9mIEdp
dEh1Yi4KCioqLmNpcmNsZWNpKiogLyAqKi50cmF2aXMueW1sKiogKGZpbGUp
OgoqIENvbnRhaW5zIHRoZSBkZWZpbml0aW9uIG9mIHRoZSBpbnRlZ3JhdGlv
biBqb2JzIHVzZWQgdG8gY29udHJvbCB0aGUgaW50ZWdyaXR5IGFuZCBjb25z
aXN0ZW5jeSBvZiB0aGUgd2hvbGUgcHJvamVjdDoKICAgICogKipbVHJhdmlz
Q0ldKGh0dHBzOi8vdHJhdmlzLWNpLm9yZy9PV0FTUC9DaGVhdFNoZWV0U2Vy
aWVzKSoqIGlzIHVzZWQgdG8gcGVyZm9ybSBjb21wbGlhbmNlIGNoZWNrIGFj
dGlvbnMgYXQgZWFjaCBQdXNoL1B1bGwgUmVxdWVzdC4gKipJdCBtdXN0IGJl
L3N0YXkgdGhlIGZhc3Rlc3QgcG9zc2libGUqKiAoY3VycmVudGx5IGluZmVy
aW9yIHRvIDIgbWludXRlcykgaW4gb3JkZXIgdG8gcHJvdmlkZSBhIHJhcGlk
IGNvbXBsaWFuY2UgZmVlZGJhY2sgYWJvdXQgdGhlIFB1c2gvUHVsbCBSZXF1
ZXN0LgogICAgKiAqKltDaXJjbGVDSV0oaHR0cHM6Ly9jaXJjbGVjaS5jb20v
Z2gvT1dBU1AvQ2hlYXRTaGVldFNlcmllcykqKiBpcyB1c2VkIHRvIHBlcmZv
cm0gb3BlcmF0aW9ucyB0YWtpbmcgKmxvbmdlciB0aW1lKiBsaWtlIGJ1aWxk
LCBwdWJsaXNoIGFuZCBkZXBsb3kgYWN0aW9ucy4KCiMgT2ZmbGluZSB3ZWJz
aXRlCgpVbmZvcnR1bmF0ZWx5LCBhIFBERiBmaWxlIGdlbmVyYXRpb24gaXMg
bm90IHBvc3NpYmxlIGJlY2F1c2UgdGhlIGNvbnRlbnQgaXMgY3V0IGluIHNv
bWUgY2hlYXQgc2hlZXRzLCBmb3IgZXhhbXBsZSwgdGhlIGFidXNlIGNhc2Ug
b25lLgoKSG93ZXZlciwgdG8gcHJvcG9zZSB0aGUgcG9zc2liaWxpdHkgdGhl
IGNvbnN1bHQsIGluIGEgZnVsbCBvZmZsaW5lIG1vZGUsIHRoZSBjb2xsZWN0
aW9uIG9mIGFsbCBjaGVhdCBzaGVldHMsIGEgc2NyaXB0IHRvIGdlbmVyYXRl
IGFuIG9mZmxpbmUgc2l0ZSB1c2luZyBbR2l0Qm9va10oaHR0cHM6Ly90b29s
Y2hhaW4uZ2l0Ym9vay5jb20vKSBoYXMgYmVlbiBjcmVhdGVkLiBUaGUgc2Ny
aXB0IGlzIFtoZXJlXShzY3JpcHRzL0dlbmVyYXRlX1NpdGUuc2gpLgoKKiAq
KmJvb2suanNvbioqOiBHaXRib29rIGNvbmZpZ3VyYXRpb24gZmlsZS4KKiAq
KlByZWZhY2UubWQqKjogUHJvamVjdCBwcmVmYWNlIGRlc2NyaXB0aW9uIGFw
cGxpZWQgdG8gdGhlIGdlbmVyYXRlZCBzaXRlLgoKOmluZm9ybWF0aW9uX3Nv
dXJjZTogSXQgaXMgdGhpcyBnZW5lcmF0ZWQgY29udGVudCB0aGF0IGlzIGhv
c3RlZCBvbiB0aGUgW29mZmljaWFsIHdlYiBzaXRlXShodHRwczovL2NoZWF0
c2hlZXRzZXJpZXMub3dhc3Aub3JnKSBvZiB0aGUgcHJvamVjdC4KCiMjIEF1
dG9tYXRlZCBidWlsZAoKVGhpcyBbbGlua10oaHR0cHM6Ly9jaGVhdHNoZWV0
c2VyaWVzLm93YXNwLm9yZy9idW5kbGUuemlwKSBhbGxvd3MgeW91IHRvIGRv
d25sb2FkIGEgYnVpbGQgKFpJUCBhcmNoaXZlKSBvZiB0aGUgb2ZmbGluZSB3
ZWJzaXRlLgoKIyMgTWFudWFsIGJ1aWxkCgpVc2UgdGhlIGNvbW1hbmRzIGJl
bG93IHRvIGdlbmVyYXRlIHRoZSBzaXRlOgoKYGBgYmFzaAojIFlvdXIgcHl0
aG9uIHZlcnNpb24gbXVzdCBiZSA+PSAzLjUKJCBweXRob24gLS12ZXJzaW9u
ClB5dGhvbiAzLjUuMwojIERlcGVuZGVuY2llczoKIyAgc3VkbyBhcHQgaW5z
dGFsbCAteSBub2RlanMKIyAgc3VkbyBucG0gaW5zdGFsbCBnaXRib29rLWNs
aSAtZwokIGNkIHNjcmlwdHMKJCBiYXNoIEdlbmVyYXRlX1NpdGUuc2gKR2Vu
ZXJhdGUgYSBvZmZsaW5lIHBvcnRhYmxlIHdlYnNpdGUgd2l0aCBhbGwgdGhl
IGNoZWF0IHNoZWV0cy4uLgpTdGVwIDEvNTogSW5pdCB3b3JrIGZvbGRlci4K
U3RlcCAyLzU6IEdlbmVyYXRlIHRoZSBzdW1tYXJ5IG1hcmtkb3duIHBhZ2Uu
CkluZGV4IHVwZGF0ZWQuClN1bW1hcnkgbWFya2Rvd24gcGFnZSBnZW5lcmF0
ZWQuClN0ZXAgMy81OiBDcmVhdGUgdGhlIGV4cGVjdGVkIEdpdEJvb2sgZm9s
ZGVyIHN0cnVjdHVyZS4KU3RlcCA0LzU6IEdlbmVyYXRlIHRoZSBzaXRlLgpp
bmZvOiBmb3VuZCA0NSBwYWdlcwppbmZvOiBmb3VuZCA4NiBhc3NldCBmaWxl
cwppbmZvOiA+PiBnZW5lcmF0aW9uIGZpbmlzaGVkIHdpdGggc3VjY2VzcyBp
biAxNC4ycyAhClN0ZXAgNS81OiBDbGVhbnVwLgpHZW5lcmF0aW9uIGZpbmlz
aGVkIHRvIHRoZSBmb2xkZXI6IC4uL2dlbmVyYXRlZC9zaXRlCiQgY2QgLi4v
Z2VuZXJhdGVkL3NpdGUvCiQgbHMgLWwKZHJ3eHIteHIteCAxIEZlYiAgMyAx
MTowNSBhc3NldHMKZHJ3eHIteHIteCAxIEZlYiAgMyAxMTowNSBjaGVhdHNo
ZWV0cwpkcnd4ci14ci14IDEgRmViICAzIDExOjA1IGdpdGJvb2sKLXJ3LXIt
LXItLSAxIEZlYiAgMyAxMTowNSBpbmRleC5odG1sCi1ydy1yLS1yLS0gMSBG
ZWIgIDMgMTE6MDUgc2VhcmNoX2luZGV4Lmpzb24KYGBgCgojIENvbnZlcnNp
b24gcnVsZXMKCiogVXNlIHRoZSBtYXJrZG93biBzeW50YXggZGVzY3JpYmVk
IGluIHRoaXMgW2d1aWRlXShodHRwczovL2d1aWRlcy5naXRodWIuY29tL2Zl
YXR1cmVzL21hc3RlcmluZy1tYXJrZG93bi8pLgoqIFVzZSB0aGlzIFtzaGVl
dF0oaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vbW9sb21ieS85YmMwOTJlNGEx
MjVmNTI5YWUzNjJkZTdlNDZlODE3NikgZm9yIHN1cGVyc2NyaXB0IGFuZCBz
dWJzY3JpcHQgY2hhcmFjdGVycy4KKiBVc2UgdGhpcyBbc2hlZXRdKGh0dHBz
Oi8vbWV0YS5hc2t1YnVudHUuY29tL2EvNzM4MykgZm9yIGFycm93cyAobGVm
dCwgcmlnaHQsIHRvcCwgZG93bikgY2hhcmFjdGVycy4KKiBTdG9yZSBhbGwg
YXNzZXRzIGluIHRoZSAqKmFzc2V0cyoqIGZvbGRlciBhbmQgdXNlIHRoZSBm
b2xsb3dpbmcgc3ludGF4OgogICAgKiBgIVtBTFRFUk5BVEVfTkFNRV0oLi4v
YXNzZXRzL0FTU0VUX05BTUUucG5nKWAgZm9yIHRoZSBpbnNlcnRpb24gb2Yg
YW4gaW1hZ2UuIFVzZSBgUE5HYCBmb3JtYXQgZm9yIHRoZSBpbWFnZXMgKHRo
aXMgW3NvZnR3YXJlXShodHRwczovL3d3dy5naW1wLm9yZy9kb3dubG9hZHMv
KSBjYW4gYmUgdXNlZCB0byBoYW5kbGUgZm9ybWF0IGNvbnZlcnNpb24pLgog
ICAgKiBgW0FMVEVSTkFURV9OQU1FXSguLi9hc3NldHMvQVNTRVRfTkFNRS5F
WFQpYCBmb3IgdGhlIGluc2VydGlvbiBvZiBvdGhlciBraW5kcyBvZiBtZWRp
YSAoUERGLCBaSVAgZXRjLikuCiogVXNlIEFUWCBzdHlsZSAoYCNgIHN5bnRh
eCkgZm9yIHNlY3Rpb24gaGVhZC4gCiogVXNlIGAqKmJvbGQqKmAgc3ludGF4
IGZvciAqKmJvbGQqKiB0ZXh0LgoqIFVzZSBgKml0YWxpYypgIHN5bnRheCBm
b3IgKml0YWxpYyogdGV4dC4KKiBVc2UgYFRBQmAgZm9yIG5lc3RlZCBsaXN0
cyBhbmQgbm90IHNwYWNlcy4KKiBVc2UgW2NvZGUgZmVuY2luZyBzeW50YXgg
YWxvbmcgc3ludGF4IGhpZ2hsaWdodGluZ10oaHR0cHM6Ly9oZWxwLmdpdGh1
Yi5jb20vYXJ0aWNsZXMvY3JlYXRpbmctYW5kLWhpZ2hsaWdodGluZy1jb2Rl
LWJsb2Nrcy8pIGZvciBjb2RlIHNuaXBwZXQgKHByZXZlbnQgd2hlbiBwb3Nz
aWJsZSBob3Jpem9udGFsIHNjcm9sbGJhcikuCiogSWYgeW91IHVzZSBge3tg
IG9yIGB9fWAgcGF0dGVybiBpbiBjb2RlIGZlbmNpbmcgdGhlbiBhZGQgYSBz
cGFjZSBiZXR3ZWVuIGJvdGggY3VybHkgYnJhY2VzIChleDogYHsge2ApIG90
aGVyd2lzZSBpdCB3aWxsIGJyZWFrIHRoZSBHaXRCb29rIGdlbmVyYXRpb24g
cHJvY2Vzcy4KKiBTYW1lIHJlbWFyayBhYm91dCB0aGUgY2hlYXQgc2hlZXQg
ZmlsZSBuYW1lLCBvbmx5IHRoZSBmb2xsb3dpbmcgc3ludGF4IGlzIGFsbG93
ZWQ6IGBbYS16QS1aX10rYC4KKiBObyBIVE1MIGNvZGUgaXMgYWxsb3dlZCwg
b25seSBtYXJrZG93biBzeW50YXggaXMgYWxsb3dlZC4KKiBVc2UgdGhpcyBb
c2l0ZV0oaHR0cHM6Ly93d3cudGFibGVzZ2VuZXJhdG9yLmNvbS9tYXJrZG93
bl90YWJsZXMpIGZvciBnZW5lcmF0aW9uIG9mIHRhYmxlcy4KKiBVc2UgYSBz
aW5nbGUgbmV3IGxpbmUgYmV0d2VlbiBhIHNlY3Rpb24gaGVhZCBhbmQgdGhl
IGJlZ2lubmluZyBvZiBpdHMgY29udGVudC4KCiMgRWRpdG9yICYgdmFsaWRh
dGlvbiBwb2xpY3kKCltWaXN1YWwgU3R1ZGlvIENvZGVdKGh0dHBzOi8vY29k
ZS52aXN1YWxzdHVkaW8uY29tLykgaXMgdXNlZCBmb3IgdGhlIHdvcmsgb24g
dGhlIG1hcmtkb3duIGZpbGVzLiBJdCBpcyBhbHNvIHVzZWQgZm9yIHRoZSB3
b3JrIG9uIHRoZSBzY3JpcHRzLgoKVGhlIGZpbGUgKipQcm9qZWN0LmNvZGUt
d29ya3NwYWNlKiogaXMgdGhlIHdvcmtzcGFjZSBmaWxlIGluIG9yZGVyIHRv
IG9wZW4gdGhlIHByb2plY3QgaW4gVlNDb2RlLgoKVGhlIGZvbGxvd2luZyBb
cGx1Z2luXShodHRwczovL2dpdGh1Yi5jb20vRGF2aWRBbnNvbi92c2NvZGUt
bWFya2Rvd25saW50KSBpcyB1c2VkIHRvIHZhbGlkYXRlIHRoZSBtYXJrZG93
biBjb250ZW50LgoKVGhlIGZpbGUgKioubWFya2Rvd25saW50Lmpzb24qKiBk
ZWZpbmVzIHRoZSBjZW50cmFsIHZhbGlkYXRpb24gcG9saWN5IGFwcGxpZWQg
YXQgVlNDb2RlIChJREUpIGFuZCBUcmF2aXNDSSAoQ0kpIGxldmVscy4KCkRl
dGFpbHMgYWJvdXQgcnVsZXMgY2FuIGJlIGZvdW5kIFtoZXJlXShodHRwczov
L2dpdGh1Yi5jb20vRGF2aWRBbnNvbi9tYXJrZG93bmxpbnQvYmxvYi9tYXN0
ZXIvZG9jL1J1bGVzLm1kKS4KClRoZSBmaWxlICoqLm1hcmtkb3dubGlua2No
ZWNrLmpzb24qKiBkZWZpbmVzIHRoZSBjb25maWd1cmF0aW9uIHVzZWQgdG8g
dmFsaWRhdGUgdXNpbmcgdGhpcyBbdG9vbF0oaHR0cHM6Ly9naXRodWIuY29t
L3Rjb3J0L21hcmtkb3duLWxpbmstY2hlY2spLCBhdCBUcmF2aXNDSSBsZXZl
bCwgYWxsIHdlYiBhbmQgcmVsYXRpdmVzIGxpbmtzIHVzZWQgaW4gY2hlYXQg
c2hlZXRzLgoKIyBIb3cgdG8gc2V0dXAgbXkgY29udHJpYnV0b3IgZW52aXJv
bm1lbnQ/CgpTZWUgW2hlcmVdKENPTlRSSUJVVElORy5tZCNob3ctdG8tc2V0
dXAtbXktY29udHJpYnV0b3ItZW52aXJvbm1lbnQpLgoKIyBIb3cgdG8gY29u
dHJpYnV0ZT8KClNlZSBbaGVyZV0oQ09OVFJJQlVUSU5HLm1kI2hvdy10by1j
b250cmlidXRlKS4KCiMgQ29udHJpYnV0b3JzCgoqICoqRnJvbSAyMDE0IHRv
IDIwMTg6KiogW1YxXShDT05UUklCVVRPUi1WMS5tZCkgLSBJbml0aWFsIHZl
cnNpb24gb2YgdGhlIHByb2plY3QgaG9zdGVkIG9uIHRoZSBbT1dBU1AgV0lL
SV0oaHR0cHM6Ly93d3cub3dhc3Aub3JnKS4KKiAqKkZyb20gMjAxOToqKiBb
VjJdKGh0dHBzOi8vZ2l0aHViLmNvbS9PV0FTUC9DaGVhdFNoZWV0U2VyaWVz
L2dyYXBocy9jb250cmlidXRvcnMpIC0gSG9zdGVkIG9uIFtHaXRIdWJdKGh0
dHBzOi8vZ2l0aHViLmNvbS9PV0FTUC9DaGVhdFNoZWV0U2VyaWVzKS4KCiMg
U3BlY2lhbCB0aGFua3MKCkEgc3BlY2lhbCB0aGFuayB5b3UgdG8gdGhlIGZv
bGxvd2luZyBwZW9wbGUgZm9yIHRoZWlyIGhlbHAgcHJvdmlkZWQgZHVyaW5n
IHRoZSBtaWdyYXRpb246CgoqIFtEb21pbmlxdWUgUmlnaGV0dG9dKGh0dHBz
Oi8vZ2l0aHViLmNvbS9yaWdoZXR0b2QpOiBGb3IgaGlzIHNwZWNpYWwgbGVh
ZGVyc2hpcCBhbmQgZ3VpZGFuY2UuCiogW0VsaWUgU2FhZF0oaHR0cHM6Ly9n
aXRodWIuY29tL1RodW5kZXJTb24pOiBGb3IgdmFsdWFibGUgaGVscCBpbiB1
cGRhdGluZyB0aGUgT1dBU1AgV2lraSBsaW5rcyBmb3IgYWxsIHRoZSBtaWdy
YXRlZCBjaGVhdCBzaGVldHMuCiogW0pha3ViIE1hxIdrb3dza2ldKGh0dHBz
Oi8vZ2l0aHViLmNvbS9tYWNrb3dza2kpOiBGb3IgdmFsdWFibGUgaGVscCBp
biB1cGRhdGluZyB0aGUgT1dBU1AgV2lraSBsaW5rcyBmb3IgYWxsIHRoZSBt
aWdyYXRlZCBjaGVhdCBzaGVldHMuCgojIExpY2Vuc2UKClRoZSBlbnRpcmUg
cHJvamVjdCBjb250ZW50IGlzIHVuZGVyIHRoZSAqKltDcmVhdGl2ZSBDb21t
b25zIHYzLjBdKGh0dHBzOi8vY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNl
cy9ieS1zYS8zLjAvKSoqIGxpY2Vuc2UuCgojIEROUyBjb25maWd1cmF0aW9u
IGZvciB0aGUgd2Vic2l0ZQoKfCBUeXBlIHwgUmVjb3JkIHwgVmFsdWUgfAp8
LS0tLS0tfC0tLS0tLS0tfC0tLS0tLS18CnwgQ05BTUUgfCBjaGVhdHNoZWV0
c2VyaWVzLm93YXNwLm9yZyB8IG93YXNwLmdpdGh1Yi5pbyB8CnwgQSB8IG93
YXNwLmdpdGh1Yi5pbyB8IDE4NS4xOTkuMTA4LjE1MyB8CnwgQSB8IG93YXNw
LmdpdGh1Yi5pbyB8IDE4NS4xOTkuMTA5LjE1MyB8CnwgQSB8IG93YXNwLmdp
dGh1Yi5pbyB8IDE4NS4xOTkuMTEwLjE1MyB8CnwgQSB8IG93YXNwLmdpdGh1
Yi5pbyB8IDE4NS4xOTkuMTExLjE1MyB8CgpUaGUgY3VzdG9tIHN1YmRvbWFp
biB0aGVuIG5lZWRzIHRvIGJlIFtjb25maWd1cmVkIG9uIEdpdEh1Yl0oaHR0
cHM6Ly9oZWxwLmdpdGh1Yi5jb20vZW4vZ2l0aHViL3dvcmtpbmctd2l0aC1n
aXRodWItcGFnZXMvYWJvdXQtY3VzdG9tLWRvbWFpbnMtYW5kLWdpdGh1Yi1w
YWdlcykuCgojIEZsYWdzaGlwIGdyYWR1YXRpb24KClRoZSByZXN1bHQgb2Yg
dGhlIHByb2plY3QgcmV2aWV3LCBieSB0aGUgZm91bmRhdGlvbiwgaXMgYXZh
aWxhYmxlIFtoZXJlXShhc3NldHMvUkVBRE1FX0ZsYWdzaGlwQ29tYmluZWRS
ZXZpZXdzLnBkZikuCg==
",,10936,"bGFuZ3VhZ2U6IG5vZGVfanMKbm9kZV9qczoKICAtICJub2RlIgpiZWZvcmVf
c2NyaXB0OgogIC0gc3VkbyBhcHQtZ2V0IGluc3RhbGwgcHl0aG9uMy41IHB5
dGhvbjMtcGlwIHB5dGhvbjMtc2V0dXB0b29scyBweXRob24zLXdoZWVsCiAg
LSBwaXAzIGluc3RhbGwgcmVxdWVzdHMgZmVlZGdlbiB3aGVlbAogIC0gbnBt
IGluc3RhbGwgLWcgbWFya2Rvd24tbGluay1jaGVjawogIC0gbnBtIGluc3Rh
bGwgLWcgZ2l0Ym9vay1jbGkKICAtIGNobW9kICt4IHNjcmlwdHMvR2VuZXJh
dGVfU2l0ZS5zaApzY3JpcHQ6CiAgLSBjZCBzY3JpcHRzCiAgLSBlY2hvICJU
cnkgdG8gZ2VuZXJhdGUgdGhlIG9mZmxpbmUgd2Vic2l0ZS4uLiIKICAtIHNl
ZCAtaSAncy9weXRob24vcHl0aG9uM1wuNS9nJyBHZW5lcmF0ZV9TaXRlLnNo
CiAgLSBiYXNoIEdlbmVyYXRlX1NpdGUuc2gKICAtIGxzIC1sIC4uL2dlbmVy
YXRlZC9zaXRlLw==
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"bmFtZTogTWFya2Rvd24gTGludCBDaGVjawoKb246CiAgcHVzaDoKICBwdWxs
X3JlcXVlc3Q6CiAgICBicmFuY2hlczoKICAgIC0gbWFzdGVyCgpqb2JzOgog
IGxpbnQ6CiAgICBydW5zLW9uOiB1YnVudHUtbGF0ZXN0CiAgICBlbnY6CiAg
ICAgIENJOiB0cnVlCiAgICBzdGVwczoKICAgIC0gbmFtZTogU2V0dXAgQWN0
aW9uCiAgICAgIHVzZXM6IGFjdGlvbnMvY2hlY2tvdXRAdjEKICAgIC0gbmFt
ZTogU2V0dXAgTm9kZQogICAgICB1c2VzOiBhY3Rpb25zL3NldHVwLW5vZGVA
djEKICAgICAgd2l0aDoKICAgICAgICBub2RlLXZlcnNpb246IDEyLngKICAg
IC0gbmFtZTogSW5zdGFsbCBkZXBlbmRlbmNpZXMKICAgICAgcnVuOiBucG0g
aW5zdGFsbCAtZyBtYXJrZG93bmxpbnQtY2xpCiAgICAtIG5hbWU6IFJ1biBs
aW50ZXIKICAgICAgcnVuOiBucG0gdGVzdAo=
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"dmVyc2lvbjogMi4xCmV4ZWN1dG9yczoKICBteS1leGVjdXRvcjoKICAgIGRv
Y2tlcjoKICAgICAgLSBpbWFnZTogJ2NpcmNsZWNpL25vZGU6MTAtc3RyZXRj
aCcKICAgIHdvcmtpbmdfZGlyZWN0b3J5OiB+L3JlcG8Kam9iczoKICBpZGVu
dGlmeS1vbGQtaXNzdWVzLWFuZC1wcjoKICAgIGV4ZWN1dG9yOiBteS1leGVj
dXRvcgogICAgc3RlcHM6CiAgICAtIGFkZF9zc2hfa2V5czoKICAgICAgICBm
aW5nZXJwcmludHM6CiAgICAgICAgICAtICJiMzo4NzphYzpkZjowZDozYTo4
ZjpmZDplMTowYTphYjplNDoyNzpjMDo4Mzo4NyIgICAgIAogICAgLSBjaGVj
a291dAogICAgLSBydW46ICdzdWRvIGFwdC1nZXQgaW5zdGFsbCAteSBweXRo
b24zLjUgcHl0aG9uMy1waXAgcHl0aG9uMy1zZXR1cHRvb2xzIHB5dGhvbjMt
d2hlZWwnCiAgICAtIHJ1bjogJ3N1ZG8gcGlwMyBpbnN0YWxsIHJlcXVlc3Rz
JyAgCiAgICAtIHJ1bjogJ2NobW9kICt4IHNjcmlwdHMvSWRlbnRpZnlfT2xk
X0lzc3VlX0FuZF9QUi5weScKICAgIC0gcnVuOiAnY2Qgc2NyaXB0cztweXRo
b24zLjUgSWRlbnRpZnlfT2xkX0lzc3VlX0FuZF9QUi5weSAke1NMQUNLX1dF
QkhPT0t9JwogIGJ1aWxkLW9mZmxpbmUtd2Vic2l0ZToKICAgIGV4ZWN1dG9y
OiBteS1leGVjdXRvcgogICAgc3RlcHM6CiAgICAtIGFkZF9zc2hfa2V5czoK
ICAgICAgICBmaW5nZXJwcmludHM6CiAgICAgICAgICAtICJiMzo4NzphYzpk
ZjowZDozYTo4ZjpmZDplMTowYTphYjplNDoyNzpjMDo4Mzo4NyIgICAgICAg
IAogICAgLSBjaGVja291dAogICAgLSBydW46ICdzdWRvIGFwdC1nZXQgaW5z
dGFsbCAteSBweXRob24zLjUgcHl0aG9uMy1waXAgcHl0aG9uMy1zZXR1cHRv
b2xzIHB5dGhvbjMtd2hlZWwnCiAgICAtIHJ1bjogJ3N1ZG8gcGlwMyBpbnN0
YWxsIHJlcXVlc3RzIGZlZWRnZW4nCiAgICAtIHJ1bjogJ3N1ZG8gbnBtIGlu
c3RhbGwgLWcgbWFya2Rvd25saW50LWNsaScKICAgIC0gcnVuOiAnc3VkbyBu
cG0gaW5zdGFsbCAtZyBtYXJrZG93bi1saW5rLWNoZWNrJwogICAgLSBydW46
ICdzdWRvIG5wbSBpbnN0YWxsIC1nIGdpdGJvb2stY2xpJwogICAgLSBydW46
ICdjaG1vZCAreCBzY3JpcHRzL0dlbmVyYXRlX1NpdGUuc2gnCiAgICAtIHJ1
bjogJ3NlZCAtaSAicy9weXRob24vcHl0aG9uM1wuNS9nIiBzY3JpcHRzL0dl
bmVyYXRlX1NpdGUuc2gnCiAgICAtIHJ1bjogJ2NkIHNjcmlwdHM7YmFzaCBH
ZW5lcmF0ZV9TaXRlLnNoJwogICAgLSBydW46ICdscyAtbCBnZW5lcmF0ZWQv
c2l0ZS8nCiAgICAtIHJ1bjogJ2NkIGdlbmVyYXRlZDt6aXAgLXIgLi4vYnVu
ZGxlLnppcCBzaXRlJwogICAgLSBydW46ICd6aXAgLVQgYnVuZGxlLnppcCcK
ICAgIC0gcGVyc2lzdF90b193b3Jrc3BhY2U6CiAgICAgICAgcm9vdDogfi9y
ZXBvCiAgICAgICAgcGF0aHM6CiAgICAgICAgICAtIGJ1bmRsZS56aXAKICBk
ZXBsb3ktb2ZmbGluZS13ZWJzaXRlOgogICAgZXhlY3V0b3I6IG15LWV4ZWN1
dG9yCiAgICBzdGVwczoKICAgIC0gYWRkX3NzaF9rZXlzOgogICAgICAgIGZp
bmdlcnByaW50czoKICAgICAgICAgIC0gIjk1OmQ3OjQ4OjdkOjFmOjhjOjRj
OjVkOjU5OmZlOjdlOjRmOmI3OjlhOmE1OmIyIiAgICAKICAgIC0gYXR0YWNo
X3dvcmtzcGFjZToKICAgICAgICBhdDogL3RtcC93b3Jrc3BhY2UgICAgICAg
ICAgCiAgICAtIGNoZWNrb3V0CiAgICAtIHJ1bjogJ3N1ZG8gYXB0LWdldCBp
bnN0YWxsIC15IHVuemlwIHppcCcKICAgIC0gcnVuOiAnZ2l0IGNoZWNrb3V0
IGdoLXBhZ2VzJwogICAgLSBydW46ICdjcCAvdG1wL3dvcmtzcGFjZS9idW5k
bGUuemlwIC4nCiAgICAtIHJ1bjogJ3ppcCAtVCBidW5kbGUuemlwJwogICAg
LSBydW46ICd1bnppcCBidW5kbGUuemlwJyAgICAKICAgIC0gcnVuOiAncm0g
LXJmIGFzc2V0cyAxPi9kZXYvbnVsbCAyPiYxJwogICAgLSBydW46ICdybSAt
cmYgY2hlYXRzaGVldHMgMT4vZGV2L251bGwgMj4mMScKICAgIC0gcnVuOiAn
cm0gLXJmIGdpdGJvb2sgMT4vZGV2L251bGwgMj4mMScKICAgIC0gcnVuOiAn
cm0gaW5kZXguaHRtbCAxPi9kZXYvbnVsbCAyPiYxJwogICAgLSBydW46ICdy
bSBzZWFyY2hfaW5kZXguanNvbiAxPi9kZXYvbnVsbCAyPiYxJwogICAgLSBy
dW46ICdtdiBzaXRlLyogLicKICAgIC0gcnVuOiAndXBkPWBkYXRlICsiJVkt
JW0tJWQgYXQgJVQiYDsgZWNobyAiV2Vic2l0ZSBsYXN0IHVwZGF0ZTogJHVw
ZC4iID4gUkVBRE1FLm1kJwogICAgLSBydW46ICdybSAtcmYgc2l0ZScKICAg
IC0gcnVuOiAnZ2l0IGNvbmZpZyAtLWdsb2JhbCB1c2VyLmVtYWlsICJPV0FT
UC1DaGVhdFNoZWV0U2VyaWVzQGNpcmNsZWNpLmNvbSInCiAgICAtIHJ1bjog
J2dpdCBjb25maWcgLS1nbG9iYWwgdXNlci5uYW1lICJDaXJjbGVDSS1DaGVh
dFNoZWV0U2VyaWVzIicKICAgIC0gcnVuOiAnZ2l0IGFkZCAtLWFsbCAuJwog
ICAgLSBydW46ICdnaXQgY29tbWl0IC1hIC1tICJEZXBsb3kgdGhlIGdlbmVy
YXRlZCB3ZWJzaXRlIHZpYSBDaXJjbGVDSSBwaXBlbGluZS4iJwogICAgLSBy
dW46ICdnaXQgcHVzaCcgICAgCndvcmtmbG93czoKICB2ZXJzaW9uOiAyCiAg
b2xkLWlzc3Vlcy1hbmQtcHItaWRlbnRpZmljYXRpb246CiAgICB0cmlnZ2Vy
czoKICAgICAgLSBzY2hlZHVsZToKICAgICAgICAgIGNyb246ICIwIDAgKiAq
IDAiCiAgICAgICAgICBmaWx0ZXJzOgogICAgICAgICAgICBicmFuY2hlczoK
ICAgICAgICAgICAgICBvbmx5OiBtYXN0ZXIKICAgIGpvYnM6CiAgICAgIC0g
aWRlbnRpZnktb2xkLWlzc3Vlcy1hbmQtcHIKICBidWlsZC1wdWJsaXNoLWRl
cGxveToKICAgIGpvYnM6CiAgICAgIC0gYnVpbGQtb2ZmbGluZS13ZWJzaXRl
OgogICAgICAgICAgZmlsdGVyczoKICAgICAgICAgICAgYnJhbmNoZXM6CiAg
ICAgICAgICAgICAgb25seTogbWFzdGVyICAgICAgCiAgICAgIC0gZGVwbG95
LW9mZmxpbmUtd2Vic2l0ZToKICAgICAgICAgIHJlcXVpcmVzOgogICAgICAg
ICAgICAtIGJ1aWxkLW9mZmxpbmUtd2Vic2l0ZQogICAgICAgICAgZmlsdGVy
czoKICAgICAgICAgICAgYnJhbmNoZXM6CiAgICAgICAgICAgICAgb25seTog
bWFzdGVyCg==
",,,,,,,,,,,,,,,,,,,,,,,
b'PayloadsAllTheThings',71220757,b'A list of useful payloads and bypass for Web Application Security and Pentest/CTF',b'Python',6,10933,,705,False,b'https://api.github.com/repos/swisskyrepo/PayloadsAllTheThings/forks',"IyBQYXlsb2FkcyBBbGwgVGhlIFRoaW5ncwoKQSBsaXN0IG9mIHVzZWZ1bCBw
YXlsb2FkcyBhbmQgYnlwYXNzZXMgZm9yIFdlYiBBcHBsaWNhdGlvbiBTZWN1
cml0eS4KRmVlbCBmcmVlIHRvIGltcHJvdmUgd2l0aCB5b3VyIHBheWxvYWRz
IGFuZCB0ZWNobmlxdWVzICEKSSA6aGVhcnQ6IHB1bGwgcmVxdWVzdHMgOikK
CllvdSBjYW4gYWxzbyBjb250cmlidXRlIHdpdGggYSA6YmVlcnM6IElSTAoK
RXZlcnkgc2VjdGlvbiBjb250YWlucyB0aGUgZm9sbG93aW5nIGZpbGVzLCB5
b3UgY2FuIHVzZSB0aGUgYF90ZW1wbGF0ZV92dWxuYCBmb2xkZXIgdG8gY3Jl
YXRlIGEgbmV3IGNoYXB0ZXI6CgotIFJFQURNRS5tZCAtIHZ1bG5lcmFiaWxp
dHkgZGVzY3JpcHRpb24gYW5kIGhvdyB0byBleHBsb2l0IGl0Ci0gSW50cnVk
ZXIgLSBhIHNldCBvZiBmaWxlcyB0byBnaXZlIHRvIEJ1cnAgSW50cnVkZXIK
LSBJbWFnZXMgLSBwaWN0dXJlcyBmb3IgdGhlIFJFQURNRS5tZAotIEZpbGVz
IC0gc29tZSBmaWxlcyByZWZlcmVuY2VkIGluIHRoZSBSRUFETUUubWQKCllv
dSBtaWdodCBhbHNvIGxpa2UgdGhlIGBNZXRob2RvbG9neSBhbmQgUmVzb3Vy
Y2VzYCBmb2xkZXIgOgoKLSBbTWV0aG9kb2xvZ3kgYW5kIFJlc291cmNlc10o
aHR0cHM6Ly9naXRodWIuY29tL3N3aXNza3lyZXBvL1BheWxvYWRzQWxsVGhl
VGhpbmdzL2Jsb2IvbWFzdGVyL01ldGhvZG9sb2d5JTIwYW5kJTIwUmVzb3Vy
Y2VzLykKICAtIFtBY3RpdmUgRGlyZWN0b3J5IEF0dGFjay5tZF0oaHR0cHM6
Ly9naXRodWIuY29tL3N3aXNza3lyZXBvL1BheWxvYWRzQWxsVGhlVGhpbmdz
L2Jsb2IvbWFzdGVyL01ldGhvZG9sb2d5JTIwYW5kJTIwUmVzb3VyY2VzL0Fj
dGl2ZSUyMERpcmVjdG9yeSUyMEF0dGFjay5tZCkKICAtIFtMaW51eCAtIFBl
cnNpc3RlbmNlLm1kXShodHRwczovL2dpdGh1Yi5jb20vc3dpc3NreXJlcG8v
UGF5bG9hZHNBbGxUaGVUaGluZ3MvYmxvYi9tYXN0ZXIvTWV0aG9kb2xvZ3kl
MjBhbmQlMjBSZXNvdXJjZXMvTGludXglMjAtJTIwUGVyc2lzdGVuY2UubWQp
CiAgLSBbTGludXggLSBQcml2aWxlZ2UgRXNjYWxhdGlvbi5tZF0oaHR0cHM6
Ly9naXRodWIuY29tL3N3aXNza3lyZXBvL1BheWxvYWRzQWxsVGhlVGhpbmdz
L2Jsb2IvbWFzdGVyL01ldGhvZG9sb2d5JTIwYW5kJTIwUmVzb3VyY2VzL0xp
bnV4JTIwLSUyMFByaXZpbGVnZSUyMEVzY2FsYXRpb24ubWQpCiAgLSBbTWV0
YXNwbG9pdCAtIENoZWF0c2hlZXQubWRdKGh0dHBzOi8vZ2l0aHViLmNvbS9z
d2lzc2t5cmVwby9QYXlsb2Fkc0FsbFRoZVRoaW5ncy9ibG9iL21hc3Rlci9N
ZXRob2RvbG9neSUyMGFuZCUyMFJlc291cmNlcy9NZXRhc3Bsb2l0JTIwLSUy
MENoZWF0c2hlZXQubWQpICAKICAtIFtNZXRob2RvbG9neSBhbmQgZW51bWVy
YXRpb24ubWRdKGh0dHBzOi8vZ2l0aHViLmNvbS9zd2lzc2t5cmVwby9QYXls
b2Fkc0FsbFRoZVRoaW5ncy9ibG9iL21hc3Rlci9NZXRob2RvbG9neSUyMGFu
ZCUyMFJlc291cmNlcy9NZXRob2RvbG9neSUyMGFuZCUyMGVudW1lcmF0aW9u
Lm1kKQogIC0gW05ldHdvcmsgUGl2b3RpbmcgVGVjaG5pcXVlcy5tZF0oaHR0
cHM6Ly9naXRodWIuY29tL3N3aXNza3lyZXBvL1BheWxvYWRzQWxsVGhlVGhp
bmdzL2Jsb2IvbWFzdGVyL01ldGhvZG9sb2d5JTIwYW5kJTIwUmVzb3VyY2Vz
L05ldHdvcmslMjBQaXZvdGluZyUyMFRlY2huaXF1ZXMubWQpCiAgLSBbTmV0
d29yayBEaXNjb3ZlcnkubWRdKGh0dHBzOi8vZ2l0aHViLmNvbS9zd2lzc2t5
cmVwby9QYXlsb2Fkc0FsbFRoZVRoaW5ncy9ibG9iL21hc3Rlci9NZXRob2Rv
bG9neSUyMGFuZCUyMFJlc291cmNlcy9OZXR3b3JrJTIwRGlzY292ZXJ5Lm1k
KQogIC0gW1JldmVyc2UgU2hlbGwgQ2hlYXRzaGVldC5tZF0oaHR0cHM6Ly9n
aXRodWIuY29tL3N3aXNza3lyZXBvL1BheWxvYWRzQWxsVGhlVGhpbmdzL2Js
b2IvbWFzdGVyL01ldGhvZG9sb2d5JTIwYW5kJTIwUmVzb3VyY2VzL1JldmVy
c2UlMjBTaGVsbCUyMENoZWF0c2hlZXQubWQpCiAgLSBbU3ViZG9tYWlucyBF
bnVtZXJhdGlvbi5tZF0oaHR0cHM6Ly9naXRodWIuY29tL3N3aXNza3lyZXBv
L1BheWxvYWRzQWxsVGhlVGhpbmdzL2Jsb2IvbWFzdGVyL01ldGhvZG9sb2d5
JTIwYW5kJTIwUmVzb3VyY2VzL1N1YmRvbWFpbnMlMjBFbnVtZXJhdGlvbi5t
ZCkKICAtIFtXaW5kb3dzIC0gRG93bmxvYWQgYW5kIEV4ZWN1dGUubWRdKGh0
dHBzOi8vZ2l0aHViLmNvbS9zd2lzc2t5cmVwby9QYXlsb2Fkc0FsbFRoZVRo
aW5ncy9ibG9iL21hc3Rlci9NZXRob2RvbG9neSUyMGFuZCUyMFJlc291cmNl
cy9XaW5kb3dzJTIwLSUyMERvd25sb2FkJTIwYW5kJTIwRXhlY3V0ZS5tZCkK
ICAtIFtXaW5kb3dzIC0gTWltaWthdHoubWRdKGh0dHBzOi8vZ2l0aHViLmNv
bS9zd2lzc2t5cmVwby9QYXlsb2Fkc0FsbFRoZVRoaW5ncy9ibG9iL21hc3Rl
ci9NZXRob2RvbG9neSUyMGFuZCUyMFJlc291cmNlcy9XaW5kb3dzJTIwLSUy
ME1pbWlrYXR6Lm1kKQogIC0gW1dpbmRvd3MgLSBQZXJzaXN0ZW5jZS5tZF0o
aHR0cHM6Ly9naXRodWIuY29tL3N3aXNza3lyZXBvL1BheWxvYWRzQWxsVGhl
VGhpbmdzL2Jsb2IvbWFzdGVyL01ldGhvZG9sb2d5JTIwYW5kJTIwUmVzb3Vy
Y2VzL1dpbmRvd3MlMjAtJTIwUGVyc2lzdGVuY2UubWQpCiAgLSBbV2luZG93
cyAtIFBvc3QgRXhwbG9pdGF0aW9uIEtvYWRpYy5tZF0oaHR0cHM6Ly9naXRo
dWIuY29tL3N3aXNza3lyZXBvL1BheWxvYWRzQWxsVGhlVGhpbmdzL2Jsb2Iv
bWFzdGVyL01ldGhvZG9sb2d5JTIwYW5kJTIwUmVzb3VyY2VzL1dpbmRvd3Ml
MjAtJTIwUG9zdCUyMEV4cGxvaXRhdGlvbiUyMEtvYWRpYy5tZCkKICAtIFtX
aW5kb3dzIC0gUHJpdmlsZWdlIEVzY2FsYXRpb24ubWRdKGh0dHBzOi8vZ2l0
aHViLmNvbS9zd2lzc2t5cmVwby9QYXlsb2Fkc0FsbFRoZVRoaW5ncy9ibG9i
L21hc3Rlci9NZXRob2RvbG9neSUyMGFuZCUyMFJlc291cmNlcy9XaW5kb3dz
JTIwLSUyMFByaXZpbGVnZSUyMEVzY2FsYXRpb24ubWQpCiAgLSBbV2luZG93
cyAtIFVzaW5nIGNyZWRlbnRpYWxzLm1kXShodHRwczovL2dpdGh1Yi5jb20v
c3dpc3NreXJlcG8vUGF5bG9hZHNBbGxUaGVUaGluZ3MvYmxvYi9tYXN0ZXIv
TWV0aG9kb2xvZ3klMjBhbmQlMjBSZXNvdXJjZXMvV2luZG93cyUyMC0lMjBV
c2luZyUyMGNyZWRlbnRpYWxzLm1kKQoKLSBbQ1ZFIEV4cGxvaXRzXShodHRw
czovL2dpdGh1Yi5jb20vc3dpc3NreXJlcG8vUGF5bG9hZHNBbGxUaGVUaGlu
Z3MvYmxvYi9tYXN0ZXIvQ1ZFJTIwRXhwbG9pdHMpCiAgICAtIEFwYWNoZSBT
dHJ1dHMgMiBDVkUtMjAxMy0yMjUxIENWRS0yMDE3LTU2MzggQ1ZFLTIwMTgt
MTE3NzZfLnB5CiAgICAtIEFwYWNoZSBTdHJ1dHMgMiBDVkUtMjAxNy05ODA1
LnB5CiAgICAtIEFwYWNoZSBTdHJ1dHMgMiBDVkUtMjAxOC0xMTc3Ni5weQog
ICAgLSBEb2NrZXIgQVBJIFJDRS5weQogICAgLSBEcnVwYWxnZWRkb24yIENW
RS0yMDE4LTc2MDAucmIKICAgIC0gSGVhcnRibGVlZCBDVkUtMjAxNC0wMTYw
LnB5CiAgICAtIEpCb3NzIENWRS0yMDE1LTc1MDEucHkKICAgIC0gSmVua2lu
cyBDVkUtMjAxNS04MTAzLnB5CiAgICAtIEplbmtpbnMgQ1ZFLTIwMTYtMDc5
Mi5weQogICAgLSBSYWlscyBDVkUtMjAxOS01NDIwLnJiCiAgICAtIFNoZWxs
c2hvY2sgQ1ZFLTIwMTQtNjI3MS5weQogICAgLSBUb21jYXQgQ1ZFLTIwMTct
MTI2MTcucHkKICAgIC0gV2ViTG9naWMgQ1ZFLTIwMTYtMzUxMC5weQogICAg
LSBXZWJMb2dpYyBDVkUtMjAxNy0xMDI3MS5weQogICAgLSBXZWJMb2dpYyBD
VkUtMjAxOC0yODk0LnB5CiAgICAtIFdlYlNwaGVyZSBDVkUtMjAxNS03NDUw
LnB5CgpZb3Ugd2FudCBtb3JlID8gQ2hlY2sgdGhlIFtCb29rc10oaHR0cHM6
Ly9naXRodWIuY29tL3N3aXNza3lyZXBvL1BheWxvYWRzQWxsVGhlVGhpbmdz
L2Jsb2IvbWFzdGVyL0JPT0tTLm1kKSBhbmQgW1lvdXR1YmUgdmlkZW9zXSho
dHRwczovL2dpdGh1Yi5jb20vc3dpc3NreXJlcG8vUGF5bG9hZHNBbGxUaGVU
aGluZ3MvYmxvYi9tYXN0ZXIvWU9VVFVCRS5tZCkgc2VsZWN0aW9ucy4K
",,10933,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
