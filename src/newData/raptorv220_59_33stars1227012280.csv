name,id,description,language,open_issues,stargazers_count,topics,subscribers_count,fork,forks_url,readme,config,watch,travis0,travis1,travis2,travis3,travis4,travis5,travis6,travis7,travis8,travis9,travis10,travis11,travis12,travis13,travis14,travis15,travis16,travis17,travis18,travis19,travis20,travis21,travis22,travis23,gitlab0,gitlab1,gitlab2,gitlab3,gitlab4,gitlab5,gitlab6,gitlab7,gitlab8,gitlab9,gitlab10,gitlab11,gitlab12,gitlab13,gitlab14,gitlab15,gitlab16,gitlab17,gitlab18,gitlab19,gitlab20,gitlab21,gitlab22,gitlab23,jenkinsPipeline0,jenkinsPipeline1,jenkinsPipeline2,jenkinsPipeline3,jenkinsPipeline4,jenkinsPipeline5,jenkinsPipeline6,jenkinsPipeline7,jenkinsPipeline8,jenkinsPipeline9,jenkinsPipeline10,jenkinsPipeline11,jenkinsPipeline12,jenkinsPipeline13,jenkinsPipeline14,jenkinsPipeline15,jenkinsPipeline16,jenkinsPipeline17,jenkinsPipeline18,jenkinsPipeline19,jenkinsPipeline20,jenkinsPipeline21,jenkinsPipeline22,jenkinsPipeline23,cirrus0,cirrus1,cirrus2,cirrus3,cirrus4,cirrus5,cirrus6,cirrus7,cirrus8,cirrus9,cirrus10,cirrus11,cirrus12,cirrus13,cirrus14,cirrus15,cirrus16,cirrus17,cirrus18,cirrus19,cirrus20,cirrus21,cirrus22,cirrus23,github0,github1,github2,github3,github4,github5,github6,github7,github8,github9,github10,github11,github12,github13,github14,github15,github16,github17,github18,github19,github20,github21,github22,github23,cds0,cds1,cds2,cds3,cds4,cds5,cds6,cds7,cds8,cds9,cds10,cds11,cds12,cds13,cds14,cds15,cds16,cds17,cds18,cds19,cds20,cds21,cds22,cds23,azure0,azure1,azure2,azure3,azure4,azure5,azure6,azure7,azure8,azure9,azure10,azure11,azure12,azure13,azure14,azure15,azure16,azure17,azure18,azure19,azure20,azure21,azure22,azure23,circleci0,circleci1,circleci2,circleci3,circleci4,circleci5,circleci6,circleci7,circleci8,circleci9,circleci10,circleci11,circleci12,circleci13,circleci14,circleci15,circleci16,circleci17,circleci18,circleci19,circleci20,circleci21,circleci22,circleci23
b'n',1223029,b'Node version management',b'Shell',6,12278,,209,False,b'https://api.github.com/repos/tj/n/forks',"IyBgbmAg4oCTIEludGVyYWN0aXZlbHkgTWFuYWdlIFlvdXIgTm9kZS5qcyBW
ZXJzaW9ucwoKWyFbbnBtXShodHRwczovL2ltZy5zaGllbGRzLmlvL25wbS9k
dC9uLnN2Zz9zdHlsZT1mbGF0LXNxdWFyZSldKGh0dHBzOi8vd3d3Lm5wbWpz
LmNvbS9wYWNrYWdlL24pClshW25wbV0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5p
by9ucG0vZG0vbi5zdmc/c3R5bGU9ZmxhdC1zcXVhcmUpXShodHRwczovL3d3
dy5ucG1qcy5jb20vcGFja2FnZS9uKQpbIVtucG1dKGh0dHBzOi8vaW1nLnNo
aWVsZHMuaW8vbnBtL3Yvbi5zdmc/c3R5bGU9ZmxhdC1zcXVhcmUpXShodHRw
czovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9uKQpbIVtucG1dKGh0dHBzOi8v
aW1nLnNoaWVsZHMuaW8vbnBtL2wvbi5zdmc/c3R5bGU9ZmxhdC1zcXVhcmUp
XShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9uKQoKTm9kZS5qcyB2
ZXJzaW9uIG1hbmFnZW1lbnQ6IG5vIHN1YnNoZWxscywgbm8gcHJvZmlsZSBz
ZXR1cCwgbm8gY29udm9sdXRlZCBBUEksIGp1c3QgKipzaW1wbGUqKi4KCiFb
dXNhZ2UgYW5pbWF0aW9uXShodHRwOi8vbmltaXQuaW8vaW1hZ2VzL24vbi5n
aWYpCgooTm90ZTogYG5gIGlzIG5vdCBzdXBwb3J0ZWQgbmF0aXZlbHkgb24g
V2luZG93cy4pCgotIFtgbmAg4oCTIEludGVyYWN0aXZlbHkgTWFuYWdlIFlv
dXIgTm9kZS5qcyBWZXJzaW9uc10oI24tJWUyJTgwJTkzLWludGVyYWN0aXZl
bHktbWFuYWdlLXlvdXItbm9kZWpzLXZlcnNpb25zKQogICAgLSBbSW5zdGFs
bGF0aW9uXSgjaW5zdGFsbGF0aW9uKQogICAgICAgIC0gW1RoaXJkIFBhcnR5
IEluc3RhbGxlcnNdKCN0aGlyZC1wYXJ0eS1pbnN0YWxsZXJzKQogICAgLSBb
SW5zdGFsbGluZyBOb2RlIFZlcnNpb25zXSgjaW5zdGFsbGluZy1ub2RlLXZl
cnNpb25zKQogICAgLSBbU3BlY2lmeWluZyBOb2RlIFZlcnNpb25zXSgjc3Bl
Y2lmeWluZy1ub2RlLXZlcnNpb25zKQogICAgLSBbUmVtb3ZpbmcgVmVyc2lv
bnNdKCNyZW1vdmluZy12ZXJzaW9ucykKICAgIC0gW1VzaW5nIERvd25sb2Fk
ZWQgTm9kZSBWZXJzaW9ucyBXaXRob3V0IFJlaW5zdGFsbGluZ10oI3VzaW5n
LWRvd25sb2FkZWQtbm9kZS12ZXJzaW9ucy13aXRob3V0LXJlaW5zdGFsbGlu
ZykKICAgIC0gW01pc2NlbGxhbmVvdXNdKCNtaXNjZWxsYW5lb3VzKQogICAg
LSBbQ3VzdG9tIFNvdXJjZV0oI2N1c3RvbS1zb3VyY2UpCiAgICAtIFtDdXN0
b20gQXJjaGl0ZWN0dXJlXSgjY3VzdG9tLWFyY2hpdGVjdHVyZSkKICAgIC0g
W09wdGlvbmFsIEVudmlyb25tZW50IFZhcmlhYmxlc10oI29wdGlvbmFsLWVu
dmlyb25tZW50LXZhcmlhYmxlcykKICAgIC0gW0hvdyBJdCBXb3Jrc10oI2hv
dy1pdC13b3JrcykKCiMjIEluc3RhbGxhdGlvbgoKU2luY2UgeW91IHByb2Jh
Ymx5IGFscmVhZHkgaGF2ZSBgbm9kZWAsIHRoZSBlYXNpZXN0IHdheSB0byBp
bnN0YWxsIGBuYCBpcyB0aHJvdWdoIGBucG1gOgoKICAgIG5wbSBpbnN0YWxs
IC1nIG4KCk9uY2UgaW5zdGFsbGVkLCBgbmAgY2FjaGVzIGBub2RlYCB2ZXJz
aW9ucyBpbiBzdWJkaXJlY3RvcnkgYG4vdmVyc2lvbnNgIG9mIHRoZSBkaXJl
Y3Rvcnkgc3BlY2lmaWVkIGluIGVudmlyb25tZW50IHZhcmlhYmxlIGBOX1BS
RUZJWGAsIHdoaWNoIGRlZmF1bHRzIHRvIGAvdXNyL2xvY2FsYDsgYW5kIHRo
ZSBfYWN0aXZlXyBgbm9kZWAgdmVyc2lvbiBpcyBpbnN0YWxsZWQgZGlyZWN0
bHkgaW4gYE5fUFJFRklYYC4KClRvIGF2b2lkIHJlcXVpcmluZyBgc3Vkb2Ag
Zm9yIGBuYCBhbmQgYG5wbWAgZ2xvYmFsIGluc3RhbGxzLCBpdCBpcyBzdWdn
ZXN0ZWQgeW91IGVpdGhlciBpbnN0YWxsIHRvIHlvdXIgaG9tZSBkaXJlY3Rv
cnkgdXNpbmcgYE5fUFJFRklYYCwgb3IgdGFrZSBvd25lcnNoaXAgb2YgdGhl
IHN5c3RlbSBkaXJlY3RvcmllczoKCiAgICAjIG1ha2UgY2FjaGUgZm9sZGVy
IChpZiBtaXNzaW5nKSBhbmQgdGFrZSBvd25lcnNoaXAKICAgIHN1ZG8gbWtk
aXIgLXAgL3Vzci9sb2NhbC9uCiAgICBzdWRvIGNob3duIC1SICQod2hvYW1p
KSAvdXNyL2xvY2FsL24KICAgICMgdGFrZSBvd25lcnNoaXAgb2Ygbm9kZSBp
bnN0YWxsIGRlc3RpbmF0aW9uIGZvbGRlcnMKICAgIHN1ZG8gY2hvd24gLVIg
JCh3aG9hbWkpIC91c3IvbG9jYWwvYmluIC91c3IvbG9jYWwvbGliIC91c3Iv
bG9jYWwvaW5jbHVkZSAvdXNyL2xvY2FsL3NoYXJlCgotLS0tLQoKSWYgYG5w
bWAgaXMgbm90IHlldCBhdmFpbGFibGUsIG9uZSB3YXkgdG8gYm9vdHN0cmFw
IGFuIGluc3RhbGw6CgogICAgY3VybCAtTCBodHRwczovL3Jhdy5naXRodWJ1
c2VyY29udGVudC5jb20vdGovbi9tYXN0ZXIvYmluL24gLW8gbgogICAgYmFz
aCBuIGx0cwogICAgIyBOb3cgbm9kZSBhbmQgbnBtIGFyZSBhdmFpbGFibGUK
CkFsdGVybmF0aXZlbHksIHlvdSBjYW4gY2xvbmUgdGhpcyByZXBvIGFuZAoK
ICAgIG1ha2UgaW5zdGFsbAoKdG8gaW5zdGFsbCBgbmAgdG8gYGJpbi9uYCBv
ZiB0aGUgZGlyZWN0b3J5IHNwZWNpZmllZCBpbiB0aGUgZW52aXJvbm1lbnQg
dmFyaWFibGUgYCRQUkVGSVhgLCB3aGljaCBkZWZhdWx0cyB0byBgL3Vzci9s
b2NhbGAgKG5vdGUgdGhhdCB5b3Ugd2lsbCBsaWtlbHkgbmVlZCB0byB1c2Ug
YHN1ZG9gKS4gVG8gaW5zdGFsbCBgbmAgaW4gYSBjdXN0b20gbG9jYXRpb24g
KHN1Y2ggYXMgYCRDVVNUT01fTE9DQVRJT04vYmluL25gKSwgcnVuIGBQUkVG
SVg9JENVU1RPTV9MT0NBVElPTiBtYWtlIGluc3RhbGxgLgoKIyMjIFRoaXJk
IFBhcnR5IEluc3RhbGxlcnMKCk9uIG1hY09TIHdpdGggW0hvbWVicmV3XSho
dHRwczovL2JyZXcuc2gvKSB5b3UgY2FuIGluc3RhbGwgdGhlIFtuIGZvcm11
bGFdKGh0dHBzOi8vZ2l0aHViLmNvbS9Ib21lYnJldy9ob21lYnJldy1jb3Jl
L2Jsb2IvbWFzdGVyL0Zvcm11bGEvbi5yYikuCgogICAgYnJldyBpbnN0YWxs
IG4KCk9uIExpbnV4IGFuZCBtYWNPUywgW24taW5zdGFsbF0oaHR0cHM6Ly9n
aXRodWIuY29tL21rbGVtZW50MC9uLWluc3RhbGwpIGFsbG93cyBpbnN0YWxs
YXRpb24gZGlyZWN0bHkgZnJvbSBHaXRIdWI7IGZvciBpbnN0YW5jZToKCiAg
ICBjdXJsIC1MIGh0dHBzOi8vZ2l0LmlvL24taW5zdGFsbCB8IGJhc2gKCm4t
aW5zdGFsbCBzZXRzIGJvdGggYFBSRUZJWGAgYW5kIGBOX1BSRUZJWGAgdG8g
YCRIT01FL25gLCBpbnN0YWxscyBgbmAgdG8gYCRIT01FL24vYmluYCwgbW9k
aWZpZXMgdGhlIGluaXRpYWxpemF0aW9uIGZpbGVzIG9mIHN1cHBvcnRlZCBz
aGVsbHMgdG8gZXhwb3J0IGBOX1BSRUZJWGAgYW5kIGFkZCBgJEhPTUUvbi9i
aW5gIHRvIHRoZSBgUEFUSGAsIGFuZCBpbnN0YWxscyB0aGUgbGF0ZXN0IExU
UyBgbm9kZWAgdmVyc2lvbi4KCkFzIGEgcmVzdWx0LCBib3RoIGBuYCBpdHNl
bGYgYW5kIGFsbCBgbm9kZWAgdmVyc2lvbnMgaXQgbWFuYWdlcyBhcmUgaG9z
dGVkIGluc2lkZSBhIHNpbmdsZSwgb3B0aW9uYWxseSBjb25maWd1cmFibGUg
ZGlyZWN0b3J5LCB3aGljaCB5b3UgY2FuIGxhdGVyIHJlbW92ZSB3aXRoIHRo
ZSBpbmNsdWRlZCBgbi11bmluc3RhbGxgIHNjcmlwdC4gYG4tdXBkYXRlYCB1
cGRhdGVzIGBuYCBpdHNlbGYgdG8gdGhlIGxhdGVzdCB2ZXJzaW9uLiBTZWUg
dGhlIFtuLWluc3RhbGwgcmVwb10oaHR0cHM6Ly9naXRodWIuY29tL21rbGVt
ZW50MC9uLWluc3RhbGwpIGZvciBtb3JlIGRldGFpbHMuCgojIyBJbnN0YWxs
aW5nIE5vZGUgVmVyc2lvbnMKClNpbXBseSBleGVjdXRlIGBuIDx2ZXJzaW9u
PmAgdG8gZG93bmxvYWQgYW5kIGluc3RhbGwgYSB2ZXJzaW9uIG9mIGBub2Rl
YC4gSWYgYDx2ZXJzaW9uPmAgaGFzIGFscmVhZHkgYmVlbiBkb3dubG9hZGVk
LCBgbmAgd2lsbCBpbnN0YWxsIGZyb20gaXRzIGNhY2hlLgoKICAgIG4gMTAu
MTYuMAogICAgbiBsdHMKCkV4ZWN1dGUgYG5gIG9uIGl0cyBvd24gdG8gdmll
dyB5b3VyIGRvd25sb2FkZWQgdmVyc2lvbnMsIGFuZCBpbnN0YWxsIHRoZSBz
ZWxlY3RlZCB2ZXJzaW9uLgoKICAgICQgbgoKICAgICAgbm9kZS80LjkuMQog
ICAgzr8gbm9kZS84LjExLjMKICAgICAgbm9kZS8xMC4xNS4wCgogICAgVXNl
IHVwL2Rvd24gYXJyb3cga2V5cyB0byBzZWxlY3QgYSB2ZXJzaW9uLCByZXR1
cm4ga2V5IHRvIGluc3RhbGwsIGQgdG8gZGVsZXRlLCBxIHRvIHF1aXQKCihZ
b3UgY2FuIGFsc28gdXNlIGBqYCBhbmQgYGtgIHRvIG5hdmlnYXRlIHVwIG9y
IGRvd24gd2l0aG91dCB1c2luZyBhcnJvd3MuKQoKSWYgdGhlIGFjdGl2ZSBu
b2RlIHZlcnNpb24gZG9lcyBub3QgY2hhbmdlIGFmdGVyIGluc3RhbGwsIHRy
eSBvcGVuaW5nIGEgbmV3IHNoZWxsIGluIGNhc2Ugc2VlaW5nIGEgc3RhbGUg
dmVyc2lvbi4KCiMjIFNwZWNpZnlpbmcgTm9kZSBWZXJzaW9ucwoKVGhlcmUg
YXJlIGEgdmFyaWV0eSBvZiB3YXlzIG9mIHNwZWNpZnlpbmcgdGhlIHRhcmdl
dCBub2RlIHZlcnNpb24gZm9yIGBuYCBjb21tYW5kcy4gTW9zdCBjb21tYW5k
cyB1c2UgdGhlIGxhdGVzdCBtYXRjaGluZyB2ZXJzaW9uLCBhbmQgIGBuIGxz
LXJlbW90ZWAgbGlzdHMgbXVsdGlwbGUgbWF0Y2hpbmcgdmVyc2lvbnMuCgpO
dW1lcmljIHZlcnNpb24gbnVtYmVycyBjYW4gYmUgY29tcGxldGUgb3IgaW5j
b21wbGV0ZSwgd2l0aCBhbiBvcHRpb25hbCBsZWFkaW5nIGB2YC4KCi0gYDQu
OS4xYAotIGA4YDogOC54LnkgdmVyc2lvbnMKLSBgdjYuMWA6IDYuMS54IHZl
cnNpb25zCgpUaGVyZSBhcmUgbGFiZWxzIGZvciB0d28gZXNwZWNpYWxseSB1
c2VmdWwgdmVyc2lvbnM6CgotIGBsdHNgOiBuZXdlc3QgTG9uZyBUZXJtIFN1
cHBvcnQgb2ZmaWNpYWwgcmVsZWFzZQotIGBsYXRlc3RgLCBgY3VycmVudGA6
IG5ld2VzdCBvZmZpY2lhbCByZWxlYXNlCgpUaGVyZSBpcyBzdXBwb3J0IGZv
ciByZWxlYXNlIHN0cmVhbXM6CgotIGBhcmdvbmAsIGBib3JvbmAsIGBjYXJi
b25gOiBjb2RlbmFtZXMgZm9yIExUUyByZWxlYXNlIHN0cmVhbXMKClRoZSBs
YXN0IGZvcm0gaXMgZm9yIHNwZWNpZnlpbmcgW290aGVyIHJlbGVhc2VzXSho
dHRwczovL25vZGVqcy5vcmcvZG93bmxvYWQpIGF2YWlsYWJsZSB1c2luZyB0
aGUgbmFtZSBvZiB0aGUgcmVtb3RlIGRvd25sb2FkIGZvbGRlciBvcHRpb25h
bGx5IGZvbGxvd2VkIGJ5IHRoZSBjb21wbGV0ZSBvciBpbmNvbXBsZXRlIHZl
cnNpb24uCgotIGBjaGFrcmFjb3JlLXJlbGVhc2UvbGF0ZXN0YAotIGBuaWdo
dGx5YAotIGB0ZXN0L3YxMS4wLjAtdGVzdDIwMTgwNTI4YAotIGByYy8xMGAK
CiMjIFJlbW92aW5nIFZlcnNpb25zCgpSZW1vdmUgc29tZSBjYWNoZWQgdmVy
c2lvbnM6CgogICAgbiBybSAwLjkuNCB2MC4xMC4wCgpSZW1vdmluZyBhbGwg
Y2FjaGVkIHZlcnNpb25zIGV4Y2VwdCB0aGUgY3VycmVudCB2ZXJzaW9uOgoK
ICAgIG4gcHJ1bmUKClJlbW92ZSB0aGUgaW5zdGFsbGVkIG5vZGUgYW5kIG5w
bSAoZG9lcyBub3QgYWZmZWN0IHRoZSBjYWNoZWQgdmVyc2lvbikuIFRoaXMg
Y2FuIGJlIHVzZWZ1bAp0byByZXZlcnQgdG8gdGhlIHN5c3RlbSB2ZXJzaW9u
IG9mIG5vZGUgKGlmIGluIGEgZGlmZmVyZW50IGxvY2F0aW9uKSwgb3IgaWYg
eW91IG5vIGxvbmdlcgp3aXNoIHRvIHVzZSBub2RlIGFuZCBucG0sIG9yIGFy
ZSBzd2l0Y2hpbmcgdG8gYSBkaWZmZXJlbnQgd2F5IG9mIG1hbmFnaW5nIHRo
ZW0uCgogICAgbiB1bmluc3RhbGwKCiMjIFVzaW5nIERvd25sb2FkZWQgTm9k
ZSBWZXJzaW9ucyBXaXRob3V0IFJlaW5zdGFsbGluZwoKVGhlcmUgYXJlIHRo
cmVlIGNvbW1hbmRzIGZvciB3b3JraW5nIGRpcmVjdGx5IHdpdGggeW91ciBk
b3dubG9hZGVkIHZlcnNpb25zIG9mIGBub2RlYCwgd2l0aG91dCByZWluc3Rh
bGxpbmcuCgpZb3UgY2FuIHNob3cgdGhlIHBhdGggdG8gdGhlIGRvd25sb2Fk
ZWQgdmVyc2lvbjoKCiAgICAkIG4gd2hpY2ggNi4xNC4zCiAgICAvdXNyL2xv
Y2FsL24vdmVyc2lvbnMvNi4xNC4zL2Jpbi9ub2RlCgpPciBydW4gYSBkb3du
bG9hZGVkIGBub2RlYCB2ZXJzaW9uIHdpdGggdGhlIGBuIHJ1bmAgY29tbWFu
ZDoKCiAgICBuIHJ1biA4LjExLjMgLS1kZWJ1ZyBzb21lLmpzCgpPciBleGVj
dXRlIGEgY29tbWFuZCB3aXRoIGBQQVRIYCBtb2RpZmllZCBzbyBgbm9kZWAg
YW5kIGBucG1gIHdpbGwgYmUgZnJvbSB0aGUgZG93bmxvYWRlZCBgbm9kZWAg
dmVyc2lvbi4KKE5COiB0aGlzIGBucG1gIHdpbGwgYmUgd29ya2luZyB3aXRo
IGEgZGlmZmVyZW50IGFuZCBlbXB0eSBnbG9iYWwgbm9kZV9tb2R1bGVzIGRp
cmVjdG9yeSwgYW5kIHlvdSBzaG91bGQgbm90IGluc3RhbGwgZ2xvYmFsCm1v
ZHVsZXMgdGhpcyB3YXkuKQoKICAgIG4gZXhlYyAxMCBteS1zY3JpcHQgLS1m
YXN0IHRlc3QKCiMjIE1pc2NlbGxhbmVvdXMKCkNvbW1hbmQgbGluZSBoZWxw
IGNhbiBiZSBvYnRhaW5lZCBmcm9tIGBuIC0taGVscGAuCgpMaXN0IG1hdGNo
aW5nIHJlbW90ZSB2ZXJzaW9ucyBhdmFpbGFibGUgZm9yIGRvd25sb2FkOgoK
ICAgIG4gbHMtcmVtb3RlIGx0cwogICAgbiBscy1yZW1vdGUgbGF0ZXN0CiAg
ICBuIGxzciAxMAogICAgbiAtLWFsbCBsc3IKCkxpc3QgZG93bmxvYWRlZCB2
ZXJzaW9ucyBpbiBjYWNoZToKCiAgICBuIGxzCgpEaXNwbGF5IGRpYWdub3N0
aWNzIHRvIGhlbHAgcmVzb2x2ZSBwcm9ibGVtczoKCiAgICBuIGRvY3RvcgoK
IyMgQ3VzdG9tIFNvdXJjZQoKSWYgeW91IHdvdWxkIGxpa2UgdG8gdXNlIGEg
ZGlmZmVyZW50IG5vZGUgbWlycm9yIHdoaWNoIGhhcyB0aGUgc2FtZSBsYXlv
dXQgYXMgdGhlIGRlZmF1bHQgPGh0dHBzOi8vbm9kZWpzLm9yZy9kaXN0Lz4s
IHlvdSBjYW4gZGVmaW5lIGBOX05PREVfTUlSUk9SYC4KVGhlIG1vc3QgY29t
bW9uIGV4YW1wbGUgaXMgdXNlcnMgaW4gQ2hpbmEgY2FuIGRlZmluZToKCiAg
ICBleHBvcnQgTl9OT0RFX01JUlJPUj1odHRwczovL25wbS50YW9iYW8ub3Jn
L21pcnJvcnMvbm9kZQoKVGhlcmUgaXMgYWxzbyBgTl9OT0RFX0RPV05MT0FE
X01JUlJPUmAgZm9yIGEgZGlmZmVyZW50IG1pcnJvciB3aXRoIHNhbWUgbGF5
b3V0IGFzIHRoZSBkZWZhdWx0IDxodHRwczovL25vZGVqcy5vcmcvZG93bmxv
YWQ+CgojIyBDdXN0b20gQXJjaGl0ZWN0dXJlCgpCeSBkZWZhdWx0IGBuYCBw
aWNrcyB0aGUgYmluYXJpZXMgbWF0Y2hpbmcgeW91ciBzeXN0ZW0gYXJjaGl0
ZWN0dXJlLCBlLmcuIGBuYCB3aWxsIGRvd25sb2FkIDY0IGJpdCBiaW5hcmll
cyBmb3IgYSA2NCBiaXQgc3lzdGVtLiBZb3UgY2FuIG92ZXJyaWRlIHRoaXMg
YnkgdXNpbmcgdGhlIGAtYWAgb3IgYC0tYXJjaGAgb3B0aW9uLgoKRG93bmxv
YWQgYW5kIHVzZSBsYXRlc3QgMzIgYml0IHZlcnNpb24gb2YgYG5vZGVgOgoK
ICAgIG4gLS1hcmNoIHg4NiBsYXRlc3QKCiMjIE9wdGlvbmFsIEVudmlyb25t
ZW50IFZhcmlhYmxlcwoKVGhlIGBuYCBjb21tYW5kIGRvd25sb2FkcyBhbmQg
aW5zdGFsbHMgdG8gYC91c3IvbG9jYWxgIGJ5IGRlZmF1bHQsIGJ1dCB5b3Ug
bWF5IG92ZXJyaWRlIHRoaXMgbG9jYXRpb24gYnkgZGVmaW5pbmcgYE5fUFJF
RklYYC4KVG8gY2hhbmdlIHRoZSBsb2NhdGlvbiB0byBzYXkgYCRIT01FLy5u
YCwgYWRkIGxpbmVzIGxpa2UgdGhlIGZvbGxvd2luZyB0byB5b3VyIHNoZWxs
IGluaXRpYWxpemF0aW9uIGZpbGU6CgogICAgZXhwb3J0IE5fUFJFRklYPSRI
T01FLy5uCiAgICBleHBvcnQgUEFUSD0kTl9QUkVGSVgvYmluOiRQQVRICgpC
eSBkZWZhdWx0IGBuYCBkb3dubG9hZHMgYXJjaGl2ZXMgZnJvbSB0aGUgbWly
cm9yIHNpdGUgd2hpY2ggaGF2ZSBiZWVuIGNvbXByZXNzZWQgd2l0aCBgZ3pp
cGAuIFlvdSBjYW4gc3dpdGNoIHRvIHVzaW5nIHRoZSBgeHpgIGNvbXByZXNz
ZWQgYXJjaGl2ZXMgYnkgZGVmaW5pbmcgYE5fVVNFX1haYC4KCiAgICBleHBv
cnQgTl9VU0VfWFo9dHJ1ZQoKSW4gYnJpZWY6CgotIGBOX05PREVfTUlSUk9S
YDogU2VlIFtDdXN0b20gc291cmNlXSgjY3VzdG9tLXNvdXJjZSkKLSBgTl9O
T0RFX0RPV05MT0FEX01JUlJPUmA6IFNlZSBbQ3VzdG9tIHNvdXJjZV0oI2N1
c3RvbS1zb3VyY2UpCi0gc3VwcG9ydCBmb3IgW05PX0NPTE9SXShodHRwOi8v
bm8tY29sb3Iub3JnKSBhbmQgW0NMSUNPTE9SPTBdKGh0dHBzOi8vYml4ZW5z
ZS5jb20vY2xpY29sb3JzKSBmb3IgY29udHJvbGxpbmcgdXNlIG9mIEFOU0kg
Y29sb3IgY29kZXMKLSBgTl9NQVhfUkVNT1RFX01BVENIRVNgIHRvIGNoYW5n
ZSB0aGUgZGVmYXVsdCBgbHMtcmVtb3RlYCBtYXhpbXVtIG9mIDIwIG1hdGNo
aW5nIHZlcnNpb25zCgojIyBIb3cgSXQgV29ya3MKCmBuYCBkb3dubG9hZHMg
YSBwcmVidWlsdCBgbm9kZWAgcGFja2FnZSBhbmQgaW5zdGFsbHMgdG8gYSBz
aW5nbGUgcHJlZml4IChlLmcuIGAvdXNyL2xvY2FsYCkuIFRoaXMgb3Zlcndy
aXRlcyB0aGUgcHJldmlvdXMgdmVyc2lvbi4gVGhlIGBiaW5gIGZvbGRlciBp
biB0aGlzIGxvY2F0aW9uIHNob3VsZCBiZSBpbiB5b3VyIGBQQVRIYCAoZS5n
LiBgL3Vzci9sb2NhbC9iaW5gKS4KClRoZSBkb3dubG9hZHMgYXJlIGtlcHQg
aW4gYSBjYWNoZSBmb2xkZXIgdG8gYmUgdXNlZCBmb3IgcmVpbnN0YWxscy4g
VGhlIGRvd25sb2FkcyBhcmUgYWxzbyBhdmFpbGFibGUgZm9yIGxpbWl0ZWQg
dXNlIHVzaW5nIGBuIHdoaWNoYCBhbmQgYG4gcnVuYCBhbmQgYG4gZXhlY2Au
CgpUaGUgZ2xvYmFsIGBucG1gIHBhY2thZ2VzIGFyZSBub3QgY2hhbmdlZCBi
eSB0aGUgaW5zdGFsbCwgd2l0aCB0aGUKZXhjZXB0aW9uIG9mIGBucG1gIGl0
c2VsZiB3aGljaCBpcyBwYXJ0IG9mIHRoZSBgbm9kZWAgaW5zdGFsbC4K
",,12278,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
b'coreclr',30092893,"b'CoreCLR is the runtime for .NET Core. It includes the garbage collector, JIT compiler, primitive data types and low-level classes.'",b'C#',2157,12277,,1006,False,b'https://api.github.com/repos/dotnet/coreclr/forks',"Lk5FVCBDb3JlIENvbW1vbiBMYW5ndWFnZSBSdW50aW1lIChDb3JlQ0xSKQo9
PT09PT09PT09PT09PT09PT09PT09PT09PT0KClRoaXMgcmVwb3NpdG9yeSBj
b250YWlucyB0aGUgY29tcGxldGUgc291cmNlIGNvZGUgZm9yIHRoZSBydW50
aW1lIG9mIFsuTkVUIENvcmVdKGh0dHA6Ly9kb3RuZXQuZ2l0aHViLmlvKS4K
SWYgeW91IGFyZSBuZXcgdG8gLk5FVCBDb3JlIHN0YXJ0IHdpdGggdGhlIFtB
Ym91dCAuTkVUXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9k
b3RuZXQvYXJ0aWNsZXMvYWJvdXQvKSAKdGhhdCBxdWlja2x5IHBvaW50cyB5
b3UgdG8gWy5ORVQgQ29yZSBUdXRvcmlhbHNdKGh0dHBzOi8vZG9jcy5taWNy
b3NvZnQuY29tL2VuLXVzL2RvdG5ldC9hcnRpY2xlcy9jb3JlL2dldHRpbmct
c3RhcnRlZCkuCgoKLk5FVCBDb3JlIGlzIGJlc3QgdGhvdWdodCBvZiBhcyAn
YWdpbGUgLk5FVCcuICAgR2VuZXJhbGx5IHNwZWFraW5nIGl0IGlzIHRoZSBz
YW1lIGFzIAp0aGUgW0Rlc2t0b3AgLk5FVCBGcmFtZXdvcmtdKGh0dHBzOi8v
ZW4ud2lraXBlZGlhLm9yZy93aWtpLy5ORVRfRnJhbWV3b3JrKQpkaXN0cmli
dXRlZCBhcyBwYXJ0IG9mIHRoZSBXaW5kb3dzIG9wZXJhdGluZyBzeXN0ZW0s
IGJ1dCBpdCBpcyBhIGNyb3NzIHBsYXRmb3JtIAooV2luZG93cywgTGludXgs
IG1hY09TKSBhbmQgY3Jvc3MgYXJjaGl0ZWN0dXJlICh4ODYsIHg2NCwgQVJN
KSBzdWJzZXQgdGhhdCBjYW4gYmUgZGVwbG95ZWQKYXMgcGFydCBvZiB0aGUg
YXBwbGljYXRpb24gKGlmIGRlc2lyZWQpLCBhbmQgdGh1cyBjYW4gYmUgdXBk
YXRlZCBxdWlja2x5IHRvIGZpeCBidWdzIG9yIGFkZCBmZWF0dXJlcy4gIAoK
IyMgSWYgWW91IEp1c3QgV2FudCB0byBVc2UgLk5FVCBDb3JlCgpNb3N0IHVz
ZXJzIGRvbid0IG5lZWQgdG8gYnVpbGQgLk5FVCBDb3JlIGZyb20gc291cmNl
IHNpbmNlIHRoZXJlIGlzIGFscmVhZHkgYSBidWlsdCBhbmQgdGVzdGVkIHZl
cnNpb24gZm9yIGFueSBzdXBwb3J0ZWQgcGxhdGZvcm0uCllvdSBjYW4gZ2V0
IHRoZSBsYXRlc3QgKipyZWxlYXNlZCoqIHZlcnNpb24gb2YgdGhlIC5ORVQg
Q29yZSBTREsgYnkgZm9sbG93aW5nIHRoZSBpbnN0cnVjdGlvbnMgb24gCnRo
ZSBbLk5FVCBDb3JlIEdldHRpbmcgU3RhcnRlZF0oaHR0cDovL2RvdG5ldC5n
aXRodWIuaW8vZ2V0dGluZy1zdGFydGVkLykgcGFnZS4KSWYgeW91IG5lZWQg
dGhlIG1vc3QgdXAgdG8gZGF0ZSAoZGFpbHkpIHZlcnNpb24gb2YgdGhpcyAu
TkVUIENvcmUgaW5zdGFsbGVyIHlvdSBjYW4gZ2V0IGl0IGZyb20gdGhlClts
YXRlc3QgSW5zdGFsbGVycyBvZiAuTkVUIENvcmUgYW5kIC5ORVQgQ29yZSBT
REtdKGh0dHBzOi8vZ2l0aHViLmNvbS9kb3RuZXQvY2xpI2luc3RhbGxlcnMt
YW5kLWJpbmFyaWVzKS4KSWYgeW91IHdhbnQgb25lIG9mIG91ciBvZmZpY2lh
bCByZWxlYXNlcywgeW91IGNhbiBnZXQgdGhlIGRvd25sb2FkIGZyb20gdGhl
IApbZG93bmxvYWQgYXJjaGl2ZSBwYWdlXShodHRwczovL2dpdGh1Yi5jb20v
ZG90bmV0L2NvcmUvYmxvYi9tYXN0ZXIvcmVsZWFzZS1ub3Rlcy9kb3dubG9h
ZC1hcmNoaXZlLm1kKS4gIAoKIyMgQXJlIHlvdSBIZXJlIGZvciBTb21ldGhp
bmcgQmVzaWRlcyB0aGUgU291cmNlIENvZGU/ICAKCkluIGFkZGl0aW9uIHRv
IHByb3ZpZGluZyB0aGUgc291cmNlIGNvZGUsIHRoaXMgcmVwb3NpdG9yeSBh
bHNvIGFjdHMgYXMgYSB1c2VmdWwgbmV4dXMgZm9yIHRoaW5ncwpyZWxhdGVk
IHRvIC5ORVQgQ29yZSBpbmNsdWRpbmc6CgogKiBXYW50IHRvICoqbGVhcm4g
bW9yZSoqIGFib3V0IC5ORVQgUnVudGltZSBJbnRlcm5hbHM/ICBTZWUgdGhl
IFtEb2N1bWVudGF0aW9uIG9uIHRoZSAuTkVUIENvcmUgUnVudGltZV0oRG9j
dW1lbnRhdGlvbi9SRUFETUUubWQpIHBhZ2UuCiAqIE5lZWQgdG8gKipsb2cg
YW4gaXNzdWUqKiBvciBwcm92aWRlIGZlZWRiYWNrPyAgIFNlZSB0aGUgW0lz
c3VlcyBhbmQgRmVlZGJhY2sgUGFnZV0oRG9jdW1lbnRhdGlvbi93b3JrZmxv
dy9Jc3N1ZXNGZWVkYmFja0VuZ2FnZW1lbnQubWQpIHBhZ2UuCiAqIFdhbnQg
dG8gKipjaGF0Kiogd2l0aCBvdGhlciBtZW1iZXJzIG9mIHRoZSBDb3JlQ0xS
IGNvbW11bml0eT8gIFNlZSB0aGUgW0NoYXQgU2VjdGlvbl0oRG9jdW1lbnRh
dGlvbi93b3JrZmxvdy9Jc3N1ZXNGZWVkYmFja0VuZ2FnZW1lbnQubWQjQ2hh
dC13aXRoLXRoZS1Db3JlQ0xSLWNvbW11bml0eSkgcGFnZS4KICogTmVlZCBh
ICoqY3VycmVudCBidWlsZCoqIG9yICoqdGVzdCByZXN1bHRzKiogb2YgdGhl
IENvcmVDTFIgcmVwb3NpdG9yeT8gICBTZWUgdGhlIFtPZmZpY2lhbCBhbmQg
RGFpbHkgQnVpbGRzXShEb2N1bWVudGF0aW9uL3dvcmtmbG93L09mZmljYWxB
bmREYWlseUJ1aWxkcy5tZCkgcGFnZS4KICogSWYgeW91IHdhbnQgcG93ZXJm
dWwgc2VhcmNoIG9mIHRoZSBzb3VyY2UgY29kZSBmb3IgYm90aCBDb3JlQ0xS
IGFuZCBDb3JlRnggc2VlIFsuTkVUIFNvdXJjZSBDb2RlIEluZGV4XShodHRw
czovL3NvdXJjZS5kb3QubmV0KS4KCiMjIFdoYXQgQ2FuIHlvdSBNYWtlIGZy
b20gdGhpcyBSZXBvc2l0b3J5PwoKLk5FVCBDb3JlIHJlbGllcyBoZWF2aWx5
IG9uIHRoZSBbTnVHZXRdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtp
L051R2V0KSBwYWNrYWdlIG1hbmFnZXIsCndoaWNoIGlzIGEgc3lzdGVtIHRv
IHBhY2thZ2UsIGRpc3RyaWJ1dGUgYW5kIHZlcnNpb24gc29mdHdhcmUgY29t
cG9uZW50cy4gIFNlZSBbaHR0cHM6Ly93d3cubnVnZXQub3JnL10oaHR0cHM6
Ly93d3cubnVnZXQub3JnLykgCmZvciBtb3JlIGluZm9ybWF0aW9uIG9uIE51
R2V0LiAgIEZvciBub3cgaXQgaXMgZW5vdWdoIHRvIGtub3cgTnVHZXQgaXMg
YSBzeXN0ZW0gdGhhdApidW5kbGVzIGNvbXBvbmVudHMgaW50byBgKi5udXBr
Z2AgZmlsZXMgKHdoaWNoIGFyZSBaSVAgYXJjaGl2ZXMpIGFuZCB0aGVzZSBw
YWNrYWdlcyBjYW4gYmUgJ3B1Ymxpc2hlZCcgCmVpdGhlciB0aHJvdWdoIGEg
bG9jYWwgZmlsZSBzeXN0ZW0gcGF0aCBvciBieSBhIFVSTCAoZS5nLiBodHRw
czovL3d3dy5udWdldC5vcmcvKS4gICBUaGVyZSBhcmUgdGhlbiB0b29scyAK
KGUuZy4gbnVnZXQuZXhlLCBWaXN1YWwgU3R1ZGlvLCBkb3RuZXQuZXhlKSB0
aGF0IGJhc2VkIG9uIGEgY29uZmlndXJhdGlvbiBmaWxlICguY3Nwcm9qKSBr
bm93IApob3cgdG8gc2VhcmNoIHRoZXNlIHB1Ymxpc2hpbmcgbG9jYXRpb25z
IGFuZCBwdWxsIGRvd24gY29uc2lzdGVudCBzZXQgb2YgcGFja2FnZXMgZm9y
IHRoZSAKYXBwbGljYXRpb24uICAgCgpJbiBjb25jcmV0ZSB0ZXJtcywgdGhp
cyByZXBvc2l0b3J5IGlzIGJlc3QgdGhvdWdodCBvZiBhcyB0aGUgc291cmNl
IGNvZGUgZm9yIHRoZSBmb2xsb3dpbmcgTnVHZXQgcGFja2FnZToKIAogKiAq
Kk1pY3Jvc29mdC5ORVRDb3JlLlJ1bnRpbWUuQ29yZUNMUioqIC0gUmVwcmVz
ZW50cyB0aGUgb2JqZWN0IGFsbG9jYXRvciwgZ2FyYmFnZSBjb2xsZWN0b3Ig
KEdDKSwgY2xhc3MgCiAgIGxvYWRlciwgdHlwZSBzeXN0ZW0sIGludGVyb3Ag
YW5kIHRoZSBtb3N0IGZ1bmRhbWVudGFsIHBhcnRzIG9mIHRoZSAuTkVUIGNs
YXNzIGxpYnJhcnkgKGUuZy4gCiAgIFN5c3RlbS5PYmplY3QsIFN5c3RlbS5T
dHJpbmcgLi4uKSAKCkl0IGFsc28gY29udGFpbnMgdGhlIHNvdXJjZSBjb2Rl
IGZvciB0aGUgZm9sbG93aW5nIGNsb3NlbHkgcmVsYXRlZCBzdXBwb3J0IHBh
Y2thZ2VzLiAKCiAqICoqTWljcm9zb2Z0Lk5FVENvcmUuSml0KiogLSBUaGUg
SnVzdCBJbiBUaW1lIChKSVQpIGNvbXBpbGVyIGZvciB0aGUgCiAgIFsuTkVU
IEludGVybWVkaWF0ZSBsYW5ndWFnZSAoSUwpXShodHRwczovL2VuLndpa2lw
ZWRpYS5vcmcvd2lraS9Db21tb25fSW50ZXJtZWRpYXRlX0xhbmd1YWdlKQog
KiAqKk1pY3Jvc29mdC5ORVRDb3JlLklMQXNtKiogLSBBbiBhc3NlbWJsZXIg
Zm9yIHRoZSAKICAgWy5ORVQgSW50ZXJtZWRpYXRlIGxhbmd1YWdlIChJTCld
KGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbW1vbl9JbnRlcm1l
ZGlhdGVfTGFuZ3VhZ2UpCiAqICoqTWljcm9zb2Z0Lk5FVENvcmUuSUxEQXNt
KiogLSBBIGRpc2Fzc2VtYmxlciAoUHJldHR5IHByaW50ZXIpIGZvciB0aGUK
ICAgWy5ORVQgSW50ZXJtZWRpYXRlIGxhbmd1YWdlIChJTCldKGh0dHBzOi8v
ZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbW1vbl9JbnRlcm1lZGlhdGVfTGFu
Z3VhZ2UpCiAqICoqTWljcm9zb2Z0Lk5FVENvcmUuVGVzdEhvc3QqKiAtIFRo
aXMgY29udGFpbnMgdGhlIGNvcmVob3N0LmV4ZSBwcm9ncmFtLCB3aGljaCBp
cyBhIHNtYWxsIHdyYXBwZXIgCiAgIHRoYXQgdXNlcyB0aGUgLk5FVCBSdW50
aW1lIHRvIHJ1biBJTCBETExzIHBhc3NlZCB0byBpdCBvbiB0aGUgY29tbWFu
ZCBsaW5lLgogKiAqKk1pY3Jvc29mdC5UYXJnZXRpbmdQYWNrLlByaXZhdGUu
Q29yZUNMUioqIC0gQSBzZXQgb2YgYXNzZW1ibGllcyB0aGF0IHJlcHJlc2Vu
dCB0aGUgY29tcGlsZSB0aW1lIHN1cmZhY2UgCiAgIGFyZWEgb2YgdGhlIGNs
YXNzIGxpYnJhcnkgaW1wbGVtZW50ZWQgYnkgdGhlIHJ1bnRpbWUgaXRzZWxm
LgoKIyMgUmVsYXRpb25zaGlwIHdpdGggdGhlIFtDb3JlRlhdKGh0dHBzOi8v
Z2l0aHViLmNvbS9kb3RuZXQvY29yZWZ4KSBSZXBvc2l0b3J5IAoKQnkgaXRz
ZWxmLCB0aGUgYE1pY3Jvc29mdC5ORVRDb3JlLlJ1bnRpbWUuQ29yZUNMUmAg
cGFja2FnZSBpcyBhY3R1YWxseSBub3QgZW5vdWdoIHRvIGRvIG11Y2guCk9u
ZSByZWFzb24gZm9yIHRoaXMgaXMgdGhhdCB0aGUgQ29yZUNMUiBwYWNrYWdl
IHRyaWVzIHRvIG1pbmltaXplIHRoZSBhbW91bnQgb2YgdGhlIGNsYXNzIGxp
YnJhcnkgdGhhdCBpdCBpbXBsZW1lbnRzLgpPbmx5IHR5cGVzIHRoYXQgaGF2
ZSBhIHN0cm9uZyBkZXBlbmRlbmN5IG9uIHRoZSBpbnRlcm5hbCB3b3JraW5n
cyBvZiB0aGUgcnVudGltZSBhcmUgaW5jbHVkZWQgKGUuZywgCmBTeXN0ZW0u
T2JqZWN0YCwgYFN5c3RlbS5TdHJpbmdgLCBgU3lzdGVtLlRocmVhZGluZy5U
aHJlYWRgLCBgU3lzdGVtLlRocmVhZGluZy5UYXNrcy5UYXNrYCBhbmQgbW9z
dCBmb3VuZGF0aW9uYWwgaW50ZXJmYWNlcykuCkluc3RlYWQgbW9zdCBvZiB0
aGUgY2xhc3MgbGlicmFyeSBpcyBpbXBsZW1lbnRlZCBhcyBpbmRlcGVuZGVu
dCBOdUdldCBwYWNrYWdlcyB0aGF0IHNpbXBseSB1c2UgdGhlIC5ORVQgQ29y
ZSAKcnVudGltZSBhcyBhIGRlcGVuZGVuY3kuICAgIE1hbnkgb2YgdGhlIG1v
c3QgZmFtaWxpYXIgY2xhc3NlcyAoYFN5c3RlbS5Db2xsZWN0aW9uc2AsIGBT
eXN0ZW0uSU9gLCBgU3lzdGVtLlhtbGAgYW5kIApzbyBvbiksIGxpdmUgaW4g
cGFja2FnZXMgZGVmaW5lZCBpbiB0aGUgW2RvdG5ldC9jb3JlZnhdKGh0dHBz
Oi8vZ2l0aHViLmNvbS9kb3RuZXQvY29yZWZ4KSByZXBvc2l0b3J5LgoKQnV0
IHRoZSBtYWluIHJlYXNvbiB5b3UgY2FuJ3QgZG8gbXVjaCB3aXRoIENvcmVD
TFIgaXMgdGhhdCAqKkFMTCoqIG9mIHRoZSB0eXBlcyBpbiB0aGUgY2xhc3Mg
bGlicmFyeSAqKkxPT0sqKiAKbGlrZSB0aGV5IGFyZSBkZWZpbmVkIGJ5IHRo
ZSBDb3JlRlggZnJhbWV3b3JrIGFuZCBub3QgQ29yZUNMUi4gICBBbnkgbGli
cmFyeSBjb2RlIGRlZmluZWQgaGVyZSAKbGl2ZXMgaW4gYSBzaW5nbGUgRExM
IGNhbGxlZCBgU3lzdGVtLlByaXZhdGUuQ29yZUxpYi5kbGxgIGFuZCBhcyBp
dHMgbmFtZSBzdWdnZXN0cyBpcyBwcml2YXRlIChoaWRkZW4pLgpJbnN0ZWFk
IGZvciBhbnkgcGFydGljdWxhciBQVUJMSUMgdHlwZSBkZWZpbmVkIGluIENv
cmVDTFIsIHdlIGZvdW5kIHRoZSAncmlnaHQnIHBhY2thZ2UgaW4gQ29yZUZY
IHdoZXJlIGl0IG5hdHVyYWxseSAKYmVsb25ncyBhbmQgdXNlIHRoYXQgcGFj
a2FnZSBhcyBpdHMgKipwdWJsaWMgcHVibGlzaGluZyoqIHBvaW50LiAgIFRo
YXQgJ2ZhY2FkZScgcGFja2FnZSB0aGVuIGZvcndhcmRzIHJlZmVyZW5jZXMg
CnRvIHRoZSAocHJpdmF0ZSkgaW1wbGVtZW50YXRpb24gaW4gYFN5c3RlbS5Q
cml2YXRlLkNvcmVMaWIuZGxsYCBkZWZpbmVkIGhlcmUuCkZvciBleGFtcGxl
IHRoZSAqYFN5c3RlbS5SdW50aW1lYCogcGFja2FnZSBkZWZpbmVkIGluIENv
cmVGWCBkZWNsYXJlcyB0aGUgUFVCTElDIG5hbWUgZm9yIHR5cGVzIGxpa2Ug
CmBTeXN0ZW0uT2JqZWN0YCBhbmQgYFN5c3RlbS5TdHJpbmdgLiAgIFRodXMg
ZnJvbSBhbiBhcHBsaWNhdGlvbnMgcG9pbnQgb2YgdmlldyB0aGVzZSB0eXBl
cyBsaXZlIGluIGBTeXN0ZW0uUnVudGltZS5kbGxgLiAKSG93ZXZlciwgYFN5
c3RlbS5SdW50aW1lLmRsbGAgKGRlZmluZWQgaW4gdGhlIENvcmVGWCByZXBv
KSBmb3J3YXJkcyByZWZlcmVuY2VzIHVsdGltYXRlbHkgdG8gYFN5c3RlbS5Q
cml2YXRlLkNvcmVMaWIuZGxsYCAKd2hpY2ggaXMgZGVmaW5lZCBoZXJlLgoK
VGh1cyBpbiBvcmRlciB0byBydW4gYW4gYXBwbGljYXRpb24sIHlvdSBuZWVk
IEJPVEggdGhlIGBNaWNyb3NvZnQuTkVUQ29yZS5SdW50aW1lLkNvcmVDTFJg
IE51R2V0IHBhY2thZ2UgCihkZWZpbmVkIGluIHRoaXMgcmVwb3NpdG9yeSkg
YXMgd2VsbCBhcyAgcGFja2FnZXMgZm9yIHdoYXRldmVyIHlvdSBhY3R1YWxs
eSByZWZlcmVuY2UgdGhhdCB3ZXJlIGRlZmluZWQgCmluIHRoZSBDb3JlRlgg
cmVwb3NpdG9yeSAod2hpY2ggYXQgYSBtaW5pbXVtIGluY2x1ZGVzIHRoZSBg
U3lzdGVtLlJ1bnRpbWVgIHBhY2thZ2UpLiAgICBZb3UgYWxzbyBuZWVkIHNv
bWUgCnNvcnQgb2YgJ2hvc3QnIGV4ZWN1dGFibGUgdGhhdCBsb2FkcyB0aGUg
Q29yZUNMUiBwYWNrYWdlIGFzIHdlbGwgYXMgdGhlIENvcmVGWCBwYWNrYWdl
cyBhbmQgc3RhcnRzIHlvdXIgY29kZSAodHlwaWNhbGx5IAp5b3UgdXNlIGBk
b3RuZXQuZXhlYCBmb3IgdGhpcykuICAgCgpUaGVzZSBleHRyYSBwaWVjZXMg
YXJlIG5vdCBkZWZpbmVkIGhlcmUsIGhvd2V2ZXIgeW91IGRvbid0IG5lZWQg
dG8gYnVpbGQgdGhlbSBpbiBvcmRlciB0byB1c2UgdGhlIENvcmVDTFIgCk51
R2V0IHBhY2thZ2UgeW91IGNyZWF0ZSBoZXJlLiAgIFRoZXJlIGFyZSBhbHJl
YWR5IHZlcnNpb25zIG9mIHRoZSBDb3JlRlggcGFja2FnZXMgcHVibGlzaGVk
IG9uIApodHRwczovL3d3dy5udWdldC5vcmcvIHNvIHlvdSBjYW4gaGF2ZSB5
b3VyIHRlc3QgYXBwbGljYXRpb24ncyBwcm9qZWN0IGZpbGUgc3BlY2lmeSB0
aGUgQ29yZUNMUiB5b3UgCmJ1aWx0IGFuZCBpdCB3aWxsIG5hdHVyYWxseSBw
dWxsIGFueXRoaW5nIGVsc2UgaXQgbmVlZHMgZnJvbSB0aGUgb2ZmaWNpYWwg
bG9jYXRpb24gaHR0cHM6Ly93d3cubnVnZXQub3JnLyB0byAKbWFrZSBhIGNv
bXBsZXRlIGFwcGxpY2F0aW9uLiAgTW9yZSBvbiB0aGlzIGluIHRoZSBbVXNp
bmcgWW91ciBCdWlsZF0oRG9jdW1lbnRhdGlvbi93b3JrZmxvdy9Vc2luZ1lv
dXJCdWlsZC5tZCkgcGFnZS4KCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
CiMjIFNldHRpbmcgdXAgeW91ciBHSVQgQ2xvbmUgb2YgdGhlIENvcmVDTFIg
UmVwb3NpdG9yeQoKVGhlIGZpcnN0IHN0ZXAgaW4gbWFraW5nIGEgYnVpbGQg
b2YgdGhlIENvcmVDTFIgUmVwb3NpdG9yeSBpcyB0byBjbG9uZSBpdCBsb2Nh
bGx5LiAgIElmIHlvdSBhbHJlYWR5IGtub3cKaG93IHRvIGRvIHRoaXMsIGp1
c3Qgc2tpcCB0aGlzIHNlY3Rpb24uICBPdGhlcndpc2UgaWYgeW91IGFyZSBk
ZXZlbG9waW5nIG9uIFdpbmRvd3MgeW91IGNhbiBzZWUKW1NldHRpbmcgVXAg
QSBHaXQgUmVwb3NpdG9yeSBJbiBWaXN1YWwgU3R1ZGlvIDIwMTddKGh0dHBz
Oi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvcGVyZnZpZXcvYmxvYi9tYXN0ZXIv
ZG9jdW1lbnRhdGlvbi9TZXR0aW5nVXBSZXBvSW5WUy5tZCkKZm9yIGluc3Ry
dWN0aW9ucyBvbiBzZXR0aW5nIHVwLiAgVGhpcyBsaW5rIHVzZXMgYSBkaWZm
ZXJlbnQgcmVwb3NpdG9yeSBhcyBhbiBleGFtcGxlLCBidXQgdGhlIGlzc3Vl
cyAoZG8geW91IGZvcmsgb3Igbm90KSBhbmQKdGhlIHByb2NlZHVyZSBhcmUg
ZXF1YWxseSBhcHBsaWNhYmxlIHRvIHRoaXMgcmVwb3NpdG9yeS4gIAoKLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyMgQnVpbGRpbmcgdGhlIFJlcG9z
aXRvcnkKClRoZSBidWlsZCBkZXBlbmRzIG9uIEdpdCwgQ01ha2UsIFB5dGhv
biBhbmQgb2YgY291cnNlIGEgQysrIGNvbXBpbGVyLiAgT25jZSB0aGVzZSBw
cmVyZXF1aXNpdGVzIGFyZSBpbnN0YWxsZWQKdGhlIGJ1aWxkIGlzIHNpbXBs
eSBhIG1hdHRlciBvZiBpbnZva2luZyB0aGUgJ2J1aWxkJyBzY3JpcHQgKGBi
dWlsZC5jbWRgIG9yIGBidWlsZC5zaGApIGF0IHRoZSBiYXNlIG9mIHRoZSAK
cmVwb3NpdG9yeS4gIAoKVGhlIGRldGFpbHMgb2YgaW5zdGFsbGluZyB0aGUg
Y29tcG9uZW50cyBkaWZmZXIgZGVwZW5kaW5nIG9uIHRoZSBvcGVyYXRpbmcg
c3lzdGVtLiAgU2VlIHRoZSBmb2xsb3dpbmcKcGFnZXMgYmFzZWQgb24geW91
ciBPUy4gIFRoZXJlIGlzIG5vIGNyb3NzLWJ1aWxkaW5nIGFjcm9zcyBPUyAo
b25seSBmb3IgQVJNLCB3aGljaCBpcyBidWlsdCBvbiBYNjQpLiAgCllvdSBo
YXZlIHRvIGJlIG9uIHRoZSBwYXJ0aWN1bGFyIHBsYXRmb3JtIHRvIGJ1aWxk
IHRoYXQgcGxhdGZvcm0uICAKCiAqIFtXaW5kb3dzIEJ1aWxkIEluc3RydWN0
aW9uc10oRG9jdW1lbnRhdGlvbi9idWlsZGluZy93aW5kb3dzLWluc3RydWN0
aW9ucy5tZCkKICogW0xpbnV4IEJ1aWxkIEluc3RydWN0aW9uc10oRG9jdW1l
bnRhdGlvbi9idWlsZGluZy9saW51eC1pbnN0cnVjdGlvbnMubWQpCiAqIFtt
YWNPUyBCdWlsZCBJbnN0cnVjdGlvbnNdKERvY3VtZW50YXRpb24vYnVpbGRp
bmcvb3N4LWluc3RydWN0aW9ucy5tZCkKICogW0ZyZWVCU0QgQnVpbGQgSW5z
dHJ1Y3Rpb25zXShEb2N1bWVudGF0aW9uL2J1aWxkaW5nL2ZyZWVic2QtaW5z
dHJ1Y3Rpb25zLm1kKSAKICogW05ldEJTRCBCdWlsZCBJbnN0cnVjdGlvbnNd
KERvY3VtZW50YXRpb24vYnVpbGRpbmcvbmV0YnNkLWluc3RydWN0aW9ucy5t
ZCkKClRoZSBidWlsZCBoYXMgdHdvIG1haW4gJ2J1aWxkVHlwZXMnCgogKiBE
ZWJ1ZyAoZGVmYXVsdCktIFRoaXMgY29tcGlsZXMgdGhlIHJ1bnRpbWUgd2l0
aCBhZGRpdGlvbmFsIHJ1bnRpbWUgY2hlY2tzIChhc3NlcnRzKS4gIFRoZXNl
IGNoZWNrcyBzbG93IAogICBydW50aW1lIGV4ZWN1dGlvbiBidXQgYXJlIHJl
YWxseSB2YWx1YWJsZSBmb3IgZGVidWdnaW5nLCBhbmQgaXMgcmVjb21tZW5k
ZWQgZm9yIG5vcm1hbCBkZXZlbG9wbWVudCBhbmQgdGVzdGluZy4gIAogKiBS
ZWxlYXNlIC0gVGhpcyBjb21waWxlcyB3aXRob3V0IGFueSBkZXZlbG9wbWVu
dCB0aW1lIHJ1bnRpbWUgY2hlY2tzLiAgVGhpcyBpcyB3aGF0IGVuZCB1c2Vy
cyB3aWxsIHVzZSBidXQgCiAgIGNhbiBiZSBkaWZmaWN1bHQgdG8gZGVidWcu
ICAgUGFzcyAncmVsZWFzZScgdG8gdGhlIGJ1aWxkIHNjcmlwdCB0byBzZWxl
Y3QgdGhpcy4gIAoKSW4gYWRkaXRpb24sIGJ5IGRlZmF1bHQgdGhlIGJ1aWxk
IHdpbGwgbm90IG9ubHkgY3JlYXRlIHRoZSBydW50aW1lIGV4ZWN1dGFibGVz
LCBidXQgaXQgd2lsbCBhbHNvIApidWlsZCBhbGwgdGhlIHRlc3RzLiAgIFRo
ZXJlIGFyZSBxdWl0ZSBhIGZldyB0ZXN0cyBzbyB0aGlzIGRvZXMgdGFrZSBh
IHNpZ25pZmljYW50IGFtb3VudCBvZiB0aW1lCnRoYXQgaXMgbm90IG5lY2Vz
c2FyeSBpZiB5b3Ugd2FudCB0byBleHBlcmltZW50IHdpdGggY2hhbmdlcy4g
ICBZb3UgY2FuIHNraXAgYnVpbGRpbmcKdGhlIHRlc3RzIGJ5IHBhc3Npbmcg
dGhlICdza2lwdGVzdHMnIGFyZ3VtZW50IHRvIHRoZSBidWlsZCBzY3JpcHQu
CgpUaHVzIHRvIGdldCBhIGJ1aWxkIGFzIHF1aWNrbHkgYXMgcG9zc2libGUg
dHlwZSB0aGUgZm9sbG93aW5nICh1c2luZyBgXGAgYXMgdGhlIGRpcmVjdG9y
eSBzZXBhcmF0b3IsIHVzZSBgL2Agb24gVW5peCBtYWNoaW5lcykKYGBgYmF0
CiAgICAuXGJ1aWxkIHNraXB0ZXN0cyAKYGBgCndoaWNoIHdpbGwgYnVpbGQg
dGhlIERlYnVnIGZsYXZvciB3aGljaCBoYXMgZGV2ZWxvcG1lbnQgdGltZSBj
aGVja3MgKGFzc2VydHMpLCBvciAKYGBgYmF0IAogICAgLlxidWlsZCByZWxl
YXNlIHNraXB0ZXN0cwpgYGAKdG8gYnVpbGQgdGhlIHJlbGVhc2UgKGZ1bGwg
c3BlZWQpIGZsYXZvci4gIFlvdSBjYW4gZmluZCBtb3JlIGJ1aWxkIG9wdGlv
bnMgd2l0aCBidWlsZCBieSB1c2luZyB0aGUgLT8gb3IgLWhlbHAgcXVhbGlm
aWVyLiAgIAoKIyMgVXNpbmcgWW91ciBCdWlsZAoKVGhlIGJ1aWxkIHBsYWNl
cyBhbGwgb2YgaXRzIGdlbmVyYXRlZCBmaWxlcyB1bmRlciB0aGUgYGJpbmAg
ZGlyZWN0b3J5IGF0IHRoZSBiYXNlIG9mIHRoZSByZXBvc2l0b3J5LiAgIFRo
ZXJlIAppcyBhIGBiaW5cTG9nYCBkaXJlY3RvcnkgdGhhdCBjb250YWlucyBs
b2cgZmlsZXMgZ2VuZXJhdGVkIGR1cmluZyB0aGUgYnVpbGQgKG1vc3QgdXNl
ZnVsIHdoZW4gdGhlIGJ1aWxkIGZhaWxzKS4KVGhlIGFjdHVhbCBvdXRwdXQg
aXMgcGxhY2VkIGluIGEgZGlyZWN0b3J5IGxpa2UgdGhpcwoKKiBiaW5cUHJv
ZHVjdFxXaW5kb3dzX05ULng2NC5SZWxlYXNlCgpUaGVyZSBhcmUgdHdvIGJh
c2ljIHRlY2huaXF1ZXMgZm9yIHVzaW5nIHlvdXIgbmV3IHJ1bnRpbWUuCgog
MS4gKipVc2UgZG90bmV0LmV4ZSBhbmQgTnVHZXQgdG8gY29tcG9zZSBhbiBh
cHBsaWNhdGlvbioqLiAgIFNlZSBbVXNpbmcgWW91ciBCdWlsZF0oRG9jdW1l
bnRhdGlvbi93b3JrZmxvdy9Vc2luZ1lvdXJCdWlsZC5tZCkgZm9yIAogaW5z
dHJ1Y3Rpb25zIG9uIGNyZWF0aW5nIGEgcHJvZ3JhbSB0aGF0IHVzZXMgeW91
ciBuZXcgcnVudGltZSBieSB1c2luZyB0aGUgJ2RvdG5ldCcgY29tbWFuZCBs
aW5lIGludGVyZmFjZS4KCiAyLiAqKlVzZSBjb3JlcnVuLmV4ZSB0byBydW4g
YW4gYXBwbGljYXRpb24gdXNpbmcgdW5wYWNrYWdlZCBEbGxzKiouIFRoaXMg
cmVwb3NpdG9yeSBhbHNvIGRlZmluZXMgYSBzaW1wbGUgaG9zdCBjYWxsZWQK
IGNvcmVydW4uZXhlIHRoYXQgZG9lcyBOT1QgdGFrZSBhbnkgZGVwZW5kZW5j
eSBvbiBOdUdldC4gICBCYXNpY2FsbHkgaXQgaGFzIHRvIGJlIHRvbGQgd2hl
cmUgdG8gZ2V0IGFsbCB0aGUKIG5lY2Vzc2FyeSBETExzIHlvdSBhY3R1YWxs
eSB1c2UsIGFuZCB5b3UgaGF2ZSB0byBnYXRoZXIgdGhlbSB0b2dldGhlciAn
YnkgaGFuZCcuICAgVGhpcyBpcyB0aGUgdGVjaG5pcXVlIHRoYXQKIGFsbCB0
aGUgdGVzdHMgaW4gdGhlIHJlcG8gdXNlLCBhbmQgaXMgdXNlZnVsIGZvciBx
dWljayBsb2NhbCAnZWRpdC1jb21waWxlLWRlYnVnJyBsb29wIChlLmcuIHBy
ZWxpbWluYXJ5IHVuaXQgdGVzdGluZykuCiBTZWUgW1VzaW5nIGNvcmVydW4g
VG8gUnVuIC5ORVQgQ29yZSBBcHBsaWNhdGlvbl0oRG9jdW1lbnRhdGlvbi93
b3JrZmxvdy9Vc2luZ0NvcmVSdW4ubWQpIGZvciBkZXRhaWxzIG9uIHVzaW5n
IAogdGhpcyB0ZWNobmlxdWUuICAKCiMjIEVkaXRpbmcgYW5kIERlYnVnZ2lu
ZwoKVHlwaWNhbGx5IHVzZXJzIHJ1biB0aHJvdWdoIHRoZSBidWlsZCBhbmQg
dXNlIGluc3RydWN0aW9ucyBmaXJzdCB3aXRoIGFuIHVubW9kaWZpZWQgYnVp
bGQsIGp1c3QgdG8gZmFtaWxpYXJpemUKdGhlbXNlbHZlcyB3aXRoIHRoZSBw
cm9jZWR1cmVzIGFuZCB0byBjb25maXJtIHRoYXQgdGhlIGluc3RydWN0aW9u
cyB3b3JrLiAgIEFmdGVyIHRoYXQgeW91IHdpbGwgd2FudCB0byBhY3R1YWxs
eQptYWtlIG1vZGlmaWNhdGlvbnMgYW5kIGRlYnVnIGFueSBpc3N1ZXMgdGhv
c2UgbW9kaWZpY2F0aW9ucyBtaWdodCBjYXVzZS4gICBTZWUgdGhlIGZvbGxv
d2luZyBsaW5rcyBmb3IgbW9yZS4gICAKCiAqIFtFZGl0aW5nIGFuZCBEZWJ1
Z2dpbmddKERvY3VtZW50YXRpb24vd29ya2Zsb3cvRWRpdGluZ0FuZERlYnVn
Z2luZy5tZCkgYW5kCiAqIFtEb2N1bWVudGF0aW9uIG9uIHRoZSAuTkVUIENv
cmUgUnVudGltZV0oRG9jdW1lbnRhdGlvbi9SRUFETUUubWQpCgojIyBSdW5u
aW5nIFRlc3RzIAoKQWZ0ZXIgeW91IGhhdmUgeW91ciBtb2RpZmljYXRpb24g
YmFzaWNhbGx5IHdvcmtpbmcsIGFuZCB3YW50IHRvIGRldGVybWluZSBpZiB5
b3UgaGF2ZSBicm9rZW4gYW55dGhpbmcgaXQgaXMgCnRpbWUgdG8gcnVuIHRl
c3RzLiAgU2VlIFtSdW5uaW5nIC5ORVQgQ29yZSBUZXN0c10oRG9jdW1lbnRh
dGlvbi93b3JrZmxvdy9SdW5uaW5nVGVzdHMubWQpIGZvciBtb3JlLiAKCiMj
IENvbnRyaWJ1dGluZyB0byBSZXBvc2l0b3J5IAoKTG9va2luZyBmb3Igc29t
ZXRoaW5nIHRvIHdvcmsgb24/IFRoZSBsaXN0IApvZiBbdXAtZm9yLWdyYWJz
IGlzc3Vlc10oaHR0cHM6Ly9naXRodWIuY29tL2RvdG5ldC9jb3JlY2xyL2xh
YmVscy91cC1mb3ItZ3JhYnMpIGlzIGEgZ3JlYXQgcGxhY2UgdG8gc3RhcnQu
CgpQbGVhc2UgcmVhZCB0aGUgZm9sbG93aW5nIGRvY3VtZW50cyB0byBnZXQg
c3RhcnRlZC4KCiogW0NvbnRyaWJ1dGluZyBHdWlkZV0oRG9jdW1lbnRhdGlv
bi9wcm9qZWN0LWRvY3MvY29udHJpYnV0aW5nLm1kKQoqIFtEZXZlbG9wZXIg
R3VpZGVdKERvY3VtZW50YXRpb24vcHJvamVjdC1kb2NzL2RldmVsb3Blci1n
dWlkZS5tZCkKClRoaXMgcHJvamVjdCBoYXMgYWRvcHRlZCB0aGUgY29kZSBv
ZiBjb25kdWN0IGRlZmluZWQgYnkgdGhlIFtDb250cmlidXRvciBDb3ZlbmFu
dF0oaHR0cDovL2NvbnRyaWJ1dG9yLWNvdmVuYW50Lm9yZy8pIAp0byBjbGFy
aWZ5IGV4cGVjdGVkIGJlaGF2aW9yIGluIG91ciBjb21tdW5pdHkuIEZvciBt
b3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFsuTkVUIEZvdW5kYXRpb24gQ29k
ZSBvZiBDb25kdWN0XShodHRwOi8vd3d3LmRvdG5ldGZvdW5kYXRpb24ub3Jn
L2NvZGUtb2YtY29uZHVjdCkuCgotLS0tLS0tLS0tLS0tLS0tLS0tCiMjIFJl
bGF0ZWQgUHJvamVjdHMKCkFzIG5vdGVkIGFib3ZlLCB0aGUgQ29yZUNMUiBS
ZXBvc2l0b3J5IGRvZXMgbm90IGNvbnRhaW4gYWxsIHRoZSBzb3VyY2UgY29k
ZSB0aGF0IG1ha2VzIHVwIHRoZSAuTkVUIENvcmUgZGlzdHJpYnV0aW9uLgpI
ZXJlIGlzIGEgbGlzdCBvZiB0aGUgb3RoZXIgcmVwb3NpdG9yaWVzIHRoYXQg
Y29tcGxldGUgdGhlIHBpY3R1cmUuICAKCiogW2RvdG5ldC9jb3JlZnhdKGh0
dHBzOi8vZ2l0aHViLmNvbS9kb3RuZXQvY29yZWZ4KSAtIFNvdXJjZSBmb3Ig
dGhlIG1vc3QgY29tbW9uIGNsYXNzZXMgaW4gdGhlIC5ORVQgRnJhbWV3b3Jr
IGxpYnJhcnkuCiogW2RvdG5ldC9jb3JlLXNldHVwXShodHRwczovL2dpdGh1
Yi5jb20vZG90bmV0L2NvcmUtc2V0dXApIC0gU291cmNlIGNvZGUgZm9yIHRo
ZSBkb3RuZXQuZXhlIHByb2dyYW0gYW5kIHRoZSBwb2xpY3kgbG9naWMKdG8g
bGF1bmNoIGJhc2ljIC5ORVQgQ29yZSBjb2RlIChob3N0ZnhyLCBob3N0cG9s
aWN5KSB3aGljaCBhbGxvdyB5b3UgdG8gc2F5ICdkb3RuZXQgU09NRV9DT1JF
X0NMUl9ETEwnIHRvIHJ1biB0aGUgYXBwLiAgCiogW2RvdG5ldC9jbGkgcmVw
b10oaHR0cHM6Ly9naXRodWIuY29tL2RvdG5ldC9jbGkpIC0gU291cmNlIGZv
ciBidWlsZCB0aW1lIGFjdGlvbnMgc3VwcG9ydGVkIGJ5IGRvdG5ldC5leGUg
Q29tbWFuZCBsaW5lIEludGVyZmFjZSAoQ0xJKS4KVGh1cyB0aGlzIGlzIHRo
ZSBjb2RlIHRoYXQgcnVucyB3aGVuIHlvdSBkbyAnZG90bmV0IGJ1aWxkJywg
J2RvdG5ldCByZXN0b3JlJyBvciAnZG90bmV0IHB1Ymxpc2gnLgoqIFtkb3Ru
ZXQvY29yZS1kb2NzXShodHRwczovL2dpdGh1Yi5jb20vZG90bmV0L2NvcmUt
ZG9jcykgLSBNYXN0ZXIgY29weSBvZiBkb2N1bWVudGF0aW9uIGZvciAKW2h0
dHA6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvZG90bmV0L10oaHR0cHM6
Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvZG90bmV0LykKCiMjIFNlZSBB
bHNvCgoqIFtEb3RuZXQuZ2l0aHViLmlvXShodHRwOi8vZG90bmV0LmdpdGh1
Yi5pbykgaXMgYSBnb29kIHBsYWNlIHRvIGRpc2NvdmVyIC5ORVQgRm91bmRh
dGlvbiBwcm9qZWN0cy4KKiAuTkVUIENvcmUgaXMgYSBbLk5FVCBGb3VuZGF0
aW9uXShodHRwOi8vd3d3LmRvdG5ldGZvdW5kYXRpb24ub3JnL3Byb2plY3Rz
KSBwcm9qZWN0LgoqIFsuTkVUIGhvbWUgcmVwb10oaHR0cHM6Ly9naXRodWIu
Y29tL01pY3Jvc29mdC9kb3RuZXQpIGxpbmtzIHRvIDEwMHMgb2YgLk5FVCBw
cm9qZWN0cywgZnJvbSBNaWNyb3NvZnQgYW5kIHRoZSBjb21tdW5pdHkuCiog
VGhlIFsuTkVUIENvcmUgcmVwb10oaHR0cHM6Ly9naXRodWIuY29tL2RvdG5l
dC9jb3JlKSBsaW5rcyB0byAuTkVUIENvcmUgcmVsYXRlZCBwcm9qZWN0cyBm
cm9tIE1pY3Jvc29mdC4KKiBUaGUgW0FTUC5ORVQgaG9tZSByZXBvXShodHRw
czovL2dpdGh1Yi5jb20vYXNwbmV0L2hvbWUpIGlzIHRoZSBiZXN0IHBsYWNl
IHRvIHN0YXJ0IGxlYXJuaW5nIGFib3V0IEFTUC5ORVQgQ29yZS4KCiMjIElt
cG9ydGFudCBCbG9nIEVudHJpZXMKCiogW0Fubm91bmNlbWVudCBvZiAuTkVU
IENvcmUgT3BlbiBTb3VyY2UgUHJvamVjdF0oaHR0cDovL2Jsb2dzLm1zZG4u
Y29tL2IvZG90bmV0L2FyY2hpdmUvMjAxNC8xMS8xMi9uZXQtY29yZS1pcy1v
cGVuLXNvdXJjZS5hc3B4KQoqIFtJbnRyb2R1Y2luZyAuTkVUIENvcmVdKGh0
dHA6Ly9ibG9ncy5tc2RuLmNvbS9iL2RvdG5ldC9hcmNoaXZlLzIwMTQvMTIv
MDQvaW50cm9kdWNpbmctbmV0LWNvcmUuYXNweCkKKiBbQW5ub3VuY2VtZW50
IG9mIENvcmVDTFJdKGh0dHA6Ly9ibG9ncy5tc2RuLmNvbS9iL2RvdG5ldC9h
cmNoaXZlLzIwMTUvMDIvMDMvY29yZWNsci1pcy1ub3ctb3Blbi1zb3VyY2Uu
YXNweCkKCiMjIExpY2Vuc2UKCi5ORVQgQ29yZSAoaW5jbHVkaW5nIHRoZSBj
b3JlY2xyIHJlcG8pIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBbTUlUIGxpY2Vu
c2VdKExJQ0VOU0UuVFhUKS4K
",,12277,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
