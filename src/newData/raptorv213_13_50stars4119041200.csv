name,id,description,language,open_issues,stargazers_count,topics,subscribers_count,fork,forks_url,readme,config,watch,travis0,travis1,travis2,travis3,travis4,travis5,travis6,travis7,travis8,travis9,travis10,travis11,travis12,travis13,travis14,travis15,travis16,travis17,travis18,travis19,travis20,travis21,travis22,travis23,gitlab0,gitlab1,gitlab2,gitlab3,gitlab4,gitlab5,gitlab6,gitlab7,gitlab8,gitlab9,gitlab10,gitlab11,gitlab12,gitlab13,gitlab14,gitlab15,gitlab16,gitlab17,gitlab18,gitlab19,gitlab20,gitlab21,gitlab22,gitlab23,jenkinsPipeline0,jenkinsPipeline1,jenkinsPipeline2,jenkinsPipeline3,jenkinsPipeline4,jenkinsPipeline5,jenkinsPipeline6,jenkinsPipeline7,jenkinsPipeline8,jenkinsPipeline9,jenkinsPipeline10,jenkinsPipeline11,jenkinsPipeline12,jenkinsPipeline13,jenkinsPipeline14,jenkinsPipeline15,jenkinsPipeline16,jenkinsPipeline17,jenkinsPipeline18,jenkinsPipeline19,jenkinsPipeline20,jenkinsPipeline21,jenkinsPipeline22,jenkinsPipeline23,cirrus0,cirrus1,cirrus2,cirrus3,cirrus4,cirrus5,cirrus6,cirrus7,cirrus8,cirrus9,cirrus10,cirrus11,cirrus12,cirrus13,cirrus14,cirrus15,cirrus16,cirrus17,cirrus18,cirrus19,cirrus20,cirrus21,cirrus22,cirrus23,github0,github1,github2,github3,github4,github5,github6,github7,github8,github9,github10,github11,github12,github13,github14,github15,github16,github17,github18,github19,github20,github21,github22,github23,cds0,cds1,cds2,cds3,cds4,cds5,cds6,cds7,cds8,cds9,cds10,cds11,cds12,cds13,cds14,cds15,cds16,cds17,cds18,cds19,cds20,cds21,cds22,cds23,azure0,azure1,azure2,azure3,azure4,azure5,azure6,azure7,azure8,azure9,azure10,azure11,azure12,azure13,azure14,azure15,azure16,azure17,azure18,azure19,azure20,azure21,azure22,azure23,circleci0,circleci1,circleci2,circleci3,circleci4,circleci5,circleci6,circleci7,circleci8,circleci9,circleci10,circleci11,circleci12,circleci13,circleci14,circleci15,circleci16,circleci17,circleci18,circleci19,circleci20,circleci21,circleci22,circleci23
b'RxJava',7508411,b'RxJava \xe2\x80\x93 Reactive Extensions for the JVM \xe2\x80\x93 a library for composing asynchronous and event-based programs using observable sequences for the Java VM.',b'Java',9,41199,,2345,False,b'https://api.github.com/repos/ReactiveX/RxJava/forks',"IyBSeEphdmE6IFJlYWN0aXZlIEV4dGVuc2lvbnMgZm9yIHRoZSBKVk0KCjxh
IGhyZWY9J2h0dHBzOi8vdHJhdmlzLWNpLm9yZy9SZWFjdGl2ZVgvUnhKYXZh
L2J1aWxkcyc+PGltZyBzcmM9J2h0dHBzOi8vdHJhdmlzLWNpLm9yZy9SZWFj
dGl2ZVgvUnhKYXZhLnN2Zz9icmFuY2g9My54Jz48L2E+ClshW2NvZGVjb3Yu
aW9dKGh0dHA6Ly9jb2RlY292LmlvL2dpdGh1Yi9SZWFjdGl2ZVgvUnhKYXZh
L2NvdmVyYWdlLnN2Zz9icmFuY2g9My54KV0oaHR0cHM6Ly9jb2RlY292Lmlv
L2doL1JlYWN0aXZlWC9SeEphdmEvYnJhbmNoLzMueCkKWyFbTWF2ZW4gQ2Vu
dHJhbF0oaHR0cHM6Ly9tYXZlbi1iYWRnZXMuaGVyb2t1YXBwLmNvbS9tYXZl
bi1jZW50cmFsL2lvLnJlYWN0aXZleC5yeGphdmEzL3J4amF2YS9iYWRnZS5z
dmcpXShodHRwczovL21hdmVuLWJhZGdlcy5oZXJva3VhcHAuY29tL21hdmVu
LWNlbnRyYWwvaW8ucmVhY3RpdmV4LnJ4amF2YTMvcnhqYXZhKQoKUnhKYXZh
IGlzIGEgSmF2YSBWTSBpbXBsZW1lbnRhdGlvbiBvZiBbUmVhY3RpdmUgRXh0
ZW5zaW9uc10oaHR0cDovL3JlYWN0aXZleC5pbyk6IGEgbGlicmFyeSBmb3Ig
Y29tcG9zaW5nIGFzeW5jaHJvbm91cyBhbmQgZXZlbnQtYmFzZWQgcHJvZ3Jh
bXMgYnkgdXNpbmcgb2JzZXJ2YWJsZSBzZXF1ZW5jZXMuCgpJdCBleHRlbmRz
IHRoZSBbb2JzZXJ2ZXIgcGF0dGVybl0oaHR0cDovL2VuLndpa2lwZWRpYS5v
cmcvd2lraS9PYnNlcnZlcl9wYXR0ZXJuKSB0byBzdXBwb3J0IHNlcXVlbmNl
cyBvZiBkYXRhL2V2ZW50cyBhbmQgYWRkcyBvcGVyYXRvcnMgdGhhdCBhbGxv
dyB5b3UgdG8gY29tcG9zZSBzZXF1ZW5jZXMgdG9nZXRoZXIgZGVjbGFyYXRp
dmVseSB3aGlsZSBhYnN0cmFjdGluZyBhd2F5IGNvbmNlcm5zIGFib3V0IHRo
aW5ncyBsaWtlIGxvdy1sZXZlbCB0aHJlYWRpbmcsIHN5bmNocm9uaXphdGlv
biwgdGhyZWFkLXNhZmV0eSBhbmQgY29uY3VycmVudCBkYXRhIHN0cnVjdHVy
ZXMuCgojIyMjIFZlcnNpb24gMy54IChbSmF2YWRvY10oaHR0cDovL3JlYWN0
aXZleC5pby9SeEphdmEvMy54L2phdmFkb2MvKSkKCi0gc2luZ2xlIGRlcGVu
ZGVuY3k6IFtSZWFjdGl2ZS1TdHJlYW1zXShodHRwczovL2dpdGh1Yi5jb20v
cmVhY3RpdmUtc3RyZWFtcy9yZWFjdGl2ZS1zdHJlYW1zLWp2bSkgIAotIGNv
bnRpbnVlZCBzdXBwb3J0IGZvciBKYXZhIDYrICYgW0FuZHJvaWRdKGh0dHBz
Oi8vZ2l0aHViLmNvbS9SZWFjdGl2ZVgvUnhBbmRyb2lkKSAyLjMrCi0gZml4
ZWQgQVBJIG1pc3Rha2VzIGFuZCBtYW55IGxpbWl0cyBvZiBSeEphdmEgMgot
IGludGVuZGVkIHRvIGJlIGEgcmVwbGFjZW1lbnQgZm9yIFJ4SmF2YSAyIHdp
dGggcmVsYXRpdmVseSBmZXcgYmluYXJ5IGluY29tcGF0aWJsZSBjaGFuZ2Vz
Ci0gSmF2YSA4IGxhbWJkYS1mcmllbmRseSBBUEkKLSBub24tb3BpbmlvbmF0
ZWQgYWJvdXQgdGhlIHNvdXJjZSBvZiBjb25jdXJyZW5jeSAodGhyZWFkcywg
cG9vbHMsIGV2ZW50IGxvb3BzLCBmaWJlcnMsIGFjdG9ycywgZXRjLikKLSBh
c3luYyBvciBzeW5jaHJvbm91cyBleGVjdXRpb24KLSB2aXJ0dWFsIHRpbWUg
YW5kIHNjaGVkdWxlcnMgZm9yIHBhcmFtZXRlcml6ZWQgY29uY3VycmVuY3kK
LSB0ZXN0IGFuZCBkaWFnbm9zdGljIHN1cHBvcnQgdmlhIHRlc3Qgc2NoZWR1
bGVycywgdGVzdCBjb25zdW1lcnMgYW5kIHBsdWdpbiBob29rcwoKTGVhcm4g
bW9yZSBhYm91dCBSeEphdmEgaW4gZ2VuZXJhbCBvbiB0aGUgPGEgaHJlZj0i
aHR0cHM6Ly9naXRodWIuY29tL1JlYWN0aXZlWC9SeEphdmEvd2lraSI+V2lr
aSBIb21lPC9hPi4KCiMjIyMgVmVyc2lvbiAyLngKClRoZSBbMi54IHZlcnNp
b25dKGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdGl2ZVgvUnhKYXZhL3RyZWUv
Mi54KSB3aWxsIGJlIHN1cHBvcnRlZCB3aXRoIGJ1Z2ZpeGVzIGFuZCBpbXBv
cnRhbnQgZG9jdW1lbnRhdGlvbiB1cGRhdGVzIHVudGlsCioqRGVjZW1iZXIg
MzEsIDIwMjAqKi4gTm8gbmV3IGZlYXR1cmVzIHdpbGwgYmUgYWRkZWQgdG8g
Mi54LgoKIyMjIyBWZXJzaW9uIDEueAoKVGhlIFsxLnggdmVyc2lvbl0oaHR0
cHM6Ly9naXRodWIuY29tL1JlYWN0aXZlWC9SeEphdmEvdHJlZS8xLngpIGlz
IGVuZC1vZi1saWZlIGFzIG9mICoqTWFyY2ggMzEsIDIwMTgqKi4gTm8gZnVy
dGhlciBkZXZlbG9wbWVudCwgc3VwcG9ydCwgbWFpbnRlbmFuY2UsIFBScyBh
bmQgdXBkYXRlcyB3aWxsIGhhcHBlbi4gVGhlIFtKYXZhZG9jXShbSmF2YWRv
Y10oaHR0cDovL3JlYWN0aXZleC5pby9SeEphdmEvMS54L2phdmFkb2MvKSkg
b2YgdGhlIHZlcnkgbGFzdCB2ZXJzaW9uLCAqKjEuMy44KiosIHdpbGwgcmVt
YWluIGFjY2Vzc2libGUuCgojIyBHZXR0aW5nIHN0YXJ0ZWQKCiMjIyBTZXR0
aW5nIHVwIHRoZSBkZXBlbmRlbmN5CgpUaGUgZmlyc3Qgc3RlcCBpcyB0byBp
bmNsdWRlIFJ4SmF2YSAzIGludG8geW91ciBwcm9qZWN0LCBmb3IgZXhhbXBs
ZSwgYXMgYSBHcmFkbGUgY29tcGlsZSBkZXBlbmRlbmN5OgoKYGBgZ3Jvb3Z5
CmltcGxlbWVudGF0aW9uICJpby5yZWFjdGl2ZXgucnhqYXZhMzpyeGphdmE6
My54LnkiCmBgYAoKKFBsZWFzZSByZXBsYWNlIGB4YCBhbmQgYHlgIHdpdGgg
dGhlIGxhdGVzdCB2ZXJzaW9uIG51bWJlcnM6IFshW01hdmVuIENlbnRyYWxd
KGh0dHBzOi8vbWF2ZW4tYmFkZ2VzLmhlcm9rdWFwcC5jb20vbWF2ZW4tY2Vu
dHJhbC9pby5yZWFjdGl2ZXgucnhqYXZhMy9yeGphdmEvYmFkZ2Uuc3ZnKV0o
aHR0cHM6Ly9tYXZlbi1iYWRnZXMuaGVyb2t1YXBwLmNvbS9tYXZlbi1jZW50
cmFsL2lvLnJlYWN0aXZleC5yeGphdmEzL3J4amF2YSkKKQoKIyMjIEhlbGxv
IFdvcmxkCgpUaGUgc2Vjb25kIGlzIHRvIHdyaXRlIHRoZSAqKkhlbGxvIFdv
cmxkKiogcHJvZ3JhbToKCmBgYGphdmEKcGFja2FnZSByeGphdmEuZXhhbXBs
ZXM7CgppbXBvcnQgaW8ucmVhY3RpdmV4LnJ4amF2YTMuY29yZS4qOwoKcHVi
bGljIGNsYXNzIEhlbGxvV29ybGQgewogICAgcHVibGljIHN0YXRpYyB2b2lk
IG1haW4oU3RyaW5nW10gYXJncykgewogICAgICAgIEZsb3dhYmxlLmp1c3Qo
IkhlbGxvIHdvcmxkIikuc3Vic2NyaWJlKFN5c3RlbS5vdXQ6OnByaW50bG4p
OwogICAgfQp9CmBgYAoKSWYgeW91ciBwbGF0Zm9ybSBkb2Vzbid0IHN1cHBv
cnQgSmF2YSA4IGxhbWJkYXMgKHlldCksIHlvdSBoYXZlIHRvIGNyZWF0ZSBh
biBpbm5lciBjbGFzcyBvZiBgQ29uc3VtZXJgIG1hbnVhbGx5OgoKYGBgamF2
YQppbXBvcnQgaW8ucmVhY3RpdmV4LnJ4amF2YTMuZnVuY3Rpb25zLkNvbnN1
bWVyOwoKRmxvd2FibGUuanVzdCgiSGVsbG8gd29ybGQiKQogIC5zdWJzY3Jp
YmUobmV3IENvbnN1bWVyPFN0cmluZz4oKSB7CiAgICAgIEBPdmVycmlkZSBw
dWJsaWMgdm9pZCBhY2NlcHQoU3RyaW5nIHMpIHsKICAgICAgICAgIFN5c3Rl
bS5vdXQucHJpbnRsbihzKTsKICAgICAgfQogIH0pOwpgYGAKCk5vdGUgdGhh
dCBSeEphdmEgMyBjb21wb25lbnRzIG5vdyBsaXZlIHVuZGVyIGBpby5yZWFj
dGl2ZXgucnhqYXZhM2AgYW5kIHRoZSBiYXNlIGNsYXNzZXMgYW5kIGludGVy
ZmFjZXMgbGl2ZSB1bmRlciBgaW8ucmVhY3RpdmV4LnJ4amF2YTMuY29yZWAu
CgojIyMgQmFzZSBjbGFzc2VzCgpSeEphdmEgMyBmZWF0dXJlcyBzZXZlcmFs
IGJhc2UgY2xhc3NlcyB5b3UgY2FuIGRpc2NvdmVyIG9wZXJhdG9ycyBvbjoK
CiAgLSBbYGlvLnJlYWN0aXZleC5yeGphdmEzLmNvcmUuRmxvd2FibGVgXSho
dHRwOi8vcmVhY3RpdmV4LmlvL1J4SmF2YS8zLngvamF2YWRvYy9pby9yZWFj
dGl2ZXgvcnhqYXZhMy9jb3JlL0Zsb3dhYmxlLmh0bWwpOiAwLi5OIGZsb3dz
LCBzdXBwb3J0aW5nIFJlYWN0aXZlLVN0cmVhbXMgYW5kIGJhY2twcmVzc3Vy
ZQogIC0gW2Bpby5yZWFjdGl2ZXgucnhqYXZhMy5jb3JlLk9ic2VydmFibGVg
XShodHRwOi8vcmVhY3RpdmV4LmlvL1J4SmF2YS8zLngvamF2YWRvYy9pby9y
ZWFjdGl2ZXgvcnhqYXZhMy9jb3JlL09ic2VydmFibGUuaHRtbCk6IDAuLk4g
Zmxvd3MsIG5vIGJhY2twcmVzc3VyZSwKICAtIFtgaW8ucmVhY3RpdmV4LnJ4
amF2YTMuY29yZS5TaW5nbGVgXShodHRwOi8vcmVhY3RpdmV4LmlvL1J4SmF2
YS8zLngvamF2YWRvYy9pby9yZWFjdGl2ZXgvcnhqYXZhMy9jb3JlL1Npbmds
ZS5odG1sKTogYSBmbG93IG9mIGV4YWN0bHkgMSBpdGVtIG9yIGFuIGVycm9y
LAogIC0gW2Bpby5yZWFjdGl2ZXgucnhqYXZhMy5jb3JlLkNvbXBsZXRhYmxl
YF0oaHR0cDovL3JlYWN0aXZleC5pby9SeEphdmEvMy54L2phdmFkb2MvaW8v
cmVhY3RpdmV4L3J4amF2YTMvY29yZS9Db21wbGV0YWJsZS5odG1sKTogYSBm
bG93IHdpdGhvdXQgaXRlbXMgYnV0IG9ubHkgYSBjb21wbGV0aW9uIG9yIGVy
cm9yIHNpZ25hbCwKICAtIFtgaW8ucmVhY3RpdmV4LnJ4amF2YTMuY29yZS5N
YXliZWBdKGh0dHA6Ly9yZWFjdGl2ZXguaW8vUnhKYXZhLzMueC9qYXZhZG9j
L2lvL3JlYWN0aXZleC9yeGphdmEzL2NvcmUvTWF5YmUuaHRtbCk6IGEgZmxv
dyB3aXRoIG5vIGl0ZW1zLCBleGFjdGx5IG9uZSBpdGVtIG9yIGFuIGVycm9y
LgoKIyMjIFNvbWUgdGVybWlub2xvZ3kKCiMjIyMgVXBzdHJlYW0sIGRvd25z
dHJlYW0KClRoZSBkYXRhZmxvd3MgaW4gUnhKYXZhIGNvbnNpc3Qgb2YgYSBz
b3VyY2UsIHplcm8gb3IgbW9yZSBpbnRlcm1lZGlhdGUgc3RlcHMgZm9sbG93
ZWQgYnkgYSBkYXRhIGNvbnN1bWVyIG9yIGNvbWJpbmF0b3Igc3RlcCAod2hl
cmUgdGhlIHN0ZXAgaXMgcmVzcG9uc2libGUgdG8gY29uc3VtZSB0aGUgZGF0
YWZsb3cgYnkgc29tZSBtZWFucyk6CgpgYGBqYXZhCnNvdXJjZS5vcGVyYXRv
cjEoKS5vcGVyYXRvcjIoKS5vcGVyYXRvcjMoKS5zdWJzY3JpYmUoY29uc3Vt
ZXIpOwoKc291cmNlLmZsYXRNYXAodmFsdWUgLT4gc291cmNlLm9wZXJhdG9y
MSgpLm9wZXJhdG9yMigpLm9wZXJhdG9yMygpKTsKYGBgCgpIZXJlLCBpZiB3
ZSBpbWFnaW5lIG91cnNlbHZlcyBvbiBgb3BlcmF0b3IyYCwgbG9va2luZyB0
byB0aGUgbGVmdCB0b3dhcmRzIHRoZSBzb3VyY2UgaXMgY2FsbGVkIHRoZSAq
KnVwc3RyZWFtKiouIExvb2tpbmcgdG8gdGhlIHJpZ2h0IHRvd2FyZHMgdGhl
IHN1YnNjcmliZXIvY29uc3VtZXIgaXMgY2FsbGVkIHRoZSAqKmRvd25zdHJl
YW0qKi4gVGhpcyBpcyBvZnRlbiBtb3JlIGFwcGFyZW50IHdoZW4gZWFjaCBl
bGVtZW50IGlzIHdyaXR0ZW4gb24gYSBzZXBhcmF0ZSBsaW5lOgoKYGBgamF2
YQpzb3VyY2UKICAub3BlcmF0b3IxKCkKICAub3BlcmF0b3IyKCkKICAub3Bl
cmF0b3IzKCkKICAuc3Vic2NyaWJlKGNvbnN1bWVyKQpgYGAKCiMjIyMgT2Jq
ZWN0cyBpbiBtb3Rpb24KCkluIFJ4SmF2YSdzIGRvY3VtZW50YXRpb24sICoq
ZW1pc3Npb24qKiwgKiplbWl0cyoqLCAqKml0ZW0qKiwgKipldmVudCoqLCAq
KnNpZ25hbCoqLCAqKmRhdGEqKiBhbmQgKiptZXNzYWdlKiogYXJlIGNvbnNp
ZGVyZWQgc3lub255bXMgYW5kIHJlcHJlc2VudCB0aGUgb2JqZWN0IHRyYXZl
bGluZyBhbG9uZyB0aGUgZGF0YWZsb3cuCgojIyMjIEJhY2twcmVzc3VyZQoK
V2hlbiB0aGUgZGF0YWZsb3cgcnVucyB0aHJvdWdoIGFzeW5jaHJvbm91cyBz
dGVwcywgZWFjaCBzdGVwIG1heSBwZXJmb3JtIGRpZmZlcmVudCB0aGluZ3Mg
d2l0aCBkaWZmZXJlbnQgc3BlZWQuIFRvIGF2b2lkIG92ZXJ3aGVsbWluZyBz
dWNoIHN0ZXBzLCB3aGljaCB1c3VhbGx5IHdvdWxkIG1hbmlmZXN0IGl0c2Vs
ZiBhcyBpbmNyZWFzZWQgbWVtb3J5IHVzYWdlIGR1ZSB0byB0ZW1wb3Jhcnkg
YnVmZmVyaW5nIG9yIHRoZSBuZWVkIGZvciBza2lwcGluZy9kcm9wcGluZyBk
YXRhLCBzby1jYWxsZWQgYmFja3ByZXNzdXJlIGlzIGFwcGxpZWQsIHdoaWNo
IGlzIGEgZm9ybSBvZiBmbG93IGNvbnRyb2wgd2hlcmUgdGhlIHN0ZXBzIGNh
biBleHByZXNzIGhvdyBtYW55IGl0ZW1zIGFyZSB0aGV5IHJlYWR5IHRvIHBy
b2Nlc3MuIFRoaXMgYWxsb3dzIGNvbnN0cmFpbmluZyB0aGUgbWVtb3J5IHVz
YWdlIG9mIHRoZSBkYXRhZmxvd3MgaW4gc2l0dWF0aW9ucyB3aGVyZSB0aGVy
ZSBpcyBnZW5lcmFsbHkgbm8gd2F5IGZvciBhIHN0ZXAgdG8ga25vdyBob3cg
bWFueSBpdGVtcyB0aGUgdXBzdHJlYW0gd2lsbCBzZW5kIHRvIGl0LgoKSW4g
UnhKYXZhLCB0aGUgZGVkaWNhdGVkIGBGbG93YWJsZWAgY2xhc3MgaXMgZGVz
aWduYXRlZCB0byBzdXBwb3J0IGJhY2twcmVzc3VyZSBhbmQgYE9ic2VydmFi
bGVgIGlzIGRlZGljYXRlZCB0byB0aGUgbm9uLWJhY2twcmVzc3VyZWQgb3Bl
cmF0aW9ucyAoc2hvcnQgc2VxdWVuY2VzLCBHVUkgaW50ZXJhY3Rpb25zLCBl
dGMuKS4gVGhlIG90aGVyIHR5cGVzLCBgU2luZ2xlYCwgYE1heWJlYCBhbmQg
YENvbXBsZXRhYmxlYCBkb24ndCBzdXBwb3J0IGJhY2twcmVzc3VyZSBub3Ig
c2hvdWxkIHRoZXk7IHRoZXJlIGlzIGFsd2F5cyByb29tIHRvIHN0b3JlIG9u
ZSBpdGVtIHRlbXBvcmFyaWx5LgoKIyMjIyBBc3NlbWJseSB0aW1lCgpUaGUg
cHJlcGFyYXRpb24gb2YgZGF0YWZsb3dzIGJ5IGFwcGx5aW5nIHZhcmlvdXMg
aW50ZXJtZWRpYXRlIG9wZXJhdG9ycyBoYXBwZW5zIGluIHRoZSBzby1jYWxs
ZWQgKiphc3NlbWJseSB0aW1lKio6CgpgYGBqYXZhCkZsb3dhYmxlPEludGVn
ZXI+IGZsb3cgPSBGbG93YWJsZS5yYW5nZSgxLCA1KQoubWFwKHYgLT4gdiAq
IHYpCi5maWx0ZXIodiAtPiB2ICUgMyA9PSAwKQo7CmBgYAoKQXQgdGhpcyBw
b2ludCwgdGhlIGRhdGEgaXMgbm90IGZsb3dpbmcgeWV0IGFuZCBubyBzaWRl
LWVmZmVjdHMgYXJlIGhhcHBlbmluZy4KCiMjIyMgU3Vic2NyaXB0aW9uIHRp
bWUKClRoaXMgaXMgYSB0ZW1wb3Jhcnkgc3RhdGUgd2hlbiBgc3Vic2NyaWJl
KClgIGlzIGNhbGxlZCBvbiBhIGZsb3cgdGhhdCBlc3RhYmxpc2hlcyB0aGUg
Y2hhaW4gb2YgcHJvY2Vzc2luZyBzdGVwcyBpbnRlcm5hbGx5OgoKYGBgamF2
YQpmbG93LnN1YnNjcmliZShTeXN0ZW0ub3V0OjpwcmludGxuKQpgYGBgCgpU
aGlzIGlzIHdoZW4gdGhlICoqc3Vic2NyaXB0aW9uIHNpZGUtZWZmZWN0cyoq
IGFyZSB0cmlnZ2VyZWQgKHNlZSBgZG9PblN1YnNjcmliZWApLiBTb21lIHNv
dXJjZXMgYmxvY2sgb3Igc3RhcnQgZW1pdHRpbmcgaXRlbXMgcmlnaHQgYXdh
eSBpbiB0aGlzIHN0YXRlLgoKIyMjIyBSdW50aW1lCgpUaGlzIGlzIHRoZSBz
dGF0ZSB3aGVuIHRoZSBmbG93cyBhcmUgYWN0aXZlbHkgZW1pdHRpbmcgaXRl
bXMsIGVycm9ycyBvciBjb21wbGV0aW9uIHNpZ25hbHM6CgpgYGBqYXZhCgpP
YnNlcnZhYmxlLmNyZWF0ZShlbWl0dGVyIC0+IHsKICAgICB3aGlsZSAoIWVt
aXR0ZXIuaXNEaXNwb3NlZCgpKSB7CiAgICAgICAgIGxvbmcgdGltZSA9IFN5
c3RlbS5jdXJyZW50VGltZU1pbGxpcygpOwogICAgICAgICBlbWl0dGVyLm9u
TmV4dCh0aW1lKTsKICAgICAgICAgaWYgKHRpbWUgJSAyICE9IDApIHsKICAg
ICAgICAgICAgIGVtaXR0ZXIub25FcnJvcihuZXcgSWxsZWdhbFN0YXRlRXhj
ZXB0aW9uKCJPZGQgbWlsbGlzZWNvbmQhIikpOwogICAgICAgICAgICAgYnJl
YWs7CiAgICAgICAgIH0KICAgICB9Cn0pCi5zdWJzY3JpYmUoU3lzdGVtLm91
dDo6cHJpbnRsbiwgVGhyb3dhYmxlOjpwcmludFN0YWNrVHJhY2UpOwpgYGAK
ClByYWN0aWNhbGx5LCB0aGlzIGlzIHdoZW4gdGhlIGJvZHkgb2YgdGhlIGdp
dmVuIGV4YW1wbGUgYWJvdmUgZXhlY3V0ZXMuCgojIyMgU2ltcGxlIGJhY2tn
cm91bmQgY29tcHV0YXRpb24KCk9uZSBvZiB0aGUgY29tbW9uIHVzZSBjYXNl
cyBmb3IgUnhKYXZhIGlzIHRvIHJ1biBzb21lIGNvbXB1dGF0aW9uLCBuZXR3
b3JrIHJlcXVlc3Qgb24gYSBiYWNrZ3JvdW5kIHRocmVhZCBhbmQgc2hvdyB0
aGUgcmVzdWx0cyAob3IgZXJyb3IpIG9uIHRoZSBVSSB0aHJlYWQ6CgpgYGBq
YXZhCmltcG9ydCBpby5yZWFjdGl2ZXgucnhqYXZhMy5zY2hlZHVsZXJzLlNj
aGVkdWxlcnM7CgpGbG93YWJsZS5mcm9tQ2FsbGFibGUoKCkgLT4gewogICAg
VGhyZWFkLnNsZWVwKDEwMDApOyAvLyAgaW1pdGF0ZSBleHBlbnNpdmUgY29t
cHV0YXRpb24KICAgIHJldHVybiAiRG9uZSI7Cn0pCiAgLnN1YnNjcmliZU9u
KFNjaGVkdWxlcnMuaW8oKSkKICAub2JzZXJ2ZU9uKFNjaGVkdWxlcnMuc2lu
Z2xlKCkpCiAgLnN1YnNjcmliZShTeXN0ZW0ub3V0OjpwcmludGxuLCBUaHJv
d2FibGU6OnByaW50U3RhY2tUcmFjZSk7CgpUaHJlYWQuc2xlZXAoMjAwMCk7
IC8vIDwtLS0gd2FpdCBmb3IgdGhlIGZsb3cgdG8gZmluaXNoCmBgYAoKVGhp
cyBzdHlsZSBvZiBjaGFpbmluZyBtZXRob2RzIGlzIGNhbGxlZCBhICoqZmx1
ZW50IEFQSSoqIHdoaWNoIHJlc2VtYmxlcyB0aGUgKipidWlsZGVyIHBhdHRl
cm4qKi4gSG93ZXZlciwgUnhKYXZhJ3MgcmVhY3RpdmUgdHlwZXMgYXJlIGlt
bXV0YWJsZTsgZWFjaCBvZiB0aGUgbWV0aG9kIGNhbGxzIHJldHVybnMgYSBu
ZXcgYEZsb3dhYmxlYCB3aXRoIGFkZGVkIGJlaGF2aW9yLiBUbyBpbGx1c3Ry
YXRlLCB0aGUgZXhhbXBsZSBjYW4gYmUgcmV3cml0dGVuIGFzIGZvbGxvd3M6
CgpgYGBqYXZhCkZsb3dhYmxlPFN0cmluZz4gc291cmNlID0gRmxvd2FibGUu
ZnJvbUNhbGxhYmxlKCgpIC0+IHsKICAgIFRocmVhZC5zbGVlcCgxMDAwKTsg
Ly8gIGltaXRhdGUgZXhwZW5zaXZlIGNvbXB1dGF0aW9uCiAgICByZXR1cm4g
IkRvbmUiOwp9KTsKCkZsb3dhYmxlPFN0cmluZz4gcnVuQmFja2dyb3VuZCA9
IHNvdXJjZS5zdWJzY3JpYmVPbihTY2hlZHVsZXJzLmlvKCkpOwoKRmxvd2Fi
bGU8U3RyaW5nPiBzaG93Rm9yZWdyb3VuZCA9IHJ1bkJhY2tncm91bmQub2Jz
ZXJ2ZU9uKFNjaGVkdWxlcnMuc2luZ2xlKCkpOwoKc2hvd0ZvcmVncm91bmQu
c3Vic2NyaWJlKFN5c3RlbS5vdXQ6OnByaW50bG4sIFRocm93YWJsZTo6cHJp
bnRTdGFja1RyYWNlKTsKClRocmVhZC5zbGVlcCgyMDAwKTsKYGBgCgpUeXBp
Y2FsbHksIHlvdSBjYW4gbW92ZSBjb21wdXRhdGlvbnMgb3IgYmxvY2tpbmcg
SU8gdG8gc29tZSBvdGhlciB0aHJlYWQgdmlhIGBzdWJzY3JpYmVPbmAuIE9u
Y2UgdGhlIGRhdGEgaXMgcmVhZHksIHlvdSBjYW4gbWFrZSBzdXJlIHRoZXkg
Z2V0IHByb2Nlc3NlZCBvbiB0aGUgZm9yZWdyb3VuZCBvciBHVUkgdGhyZWFk
IHZpYSBgb2JzZXJ2ZU9uYC4gCgojIyMgU2NoZWR1bGVycwoKUnhKYXZhIG9w
ZXJhdG9ycyBkb24ndCB3b3JrIHdpdGggYFRocmVhZGBzIG9yIGBFeGVjdXRv
clNlcnZpY2VgcyBkaXJlY3RseSBidXQgd2l0aCBzby1jYWxsZWQgYFNjaGVk
dWxlcmBzIHRoYXQgYWJzdHJhY3QgYXdheSBzb3VyY2VzIG9mIGNvbmN1cnJl
bmN5IGJlaGluZCBhIHVuaWZvcm0gQVBJLiBSeEphdmEgMyBmZWF0dXJlcyBz
ZXZlcmFsIHN0YW5kYXJkIHNjaGVkdWxlcnMgYWNjZXNzaWJsZSB2aWEgYFNj
aGVkdWxlcnNgIHV0aWxpdHkgY2xhc3MuIAoKLSBgU2NoZWR1bGVycy5jb21w
dXRhdGlvbigpYDogUnVuIGNvbXB1dGF0aW9uIGludGVuc2l2ZSB3b3JrIG9u
IGEgZml4ZWQgbnVtYmVyIG9mIGRlZGljYXRlZCB0aHJlYWRzIGluIHRoZSBi
YWNrZ3JvdW5kLiBNb3N0IGFzeW5jaHJvbm91cyBvcGVyYXRvcnMgdXNlIHRo
aXMgYXMgdGhlaXIgZGVmYXVsdCBgU2NoZWR1bGVyYC4KLSBgU2NoZWR1bGVy
cy5pbygpYDogUnVuIEkvTy1saWtlIG9yIGJsb2NraW5nIG9wZXJhdGlvbnMg
b24gYSBkeW5hbWljYWxseSBjaGFuZ2luZyBzZXQgb2YgdGhyZWFkcy4KLSBg
U2NoZWR1bGVycy5zaW5nbGUoKWA6IFJ1biB3b3JrIG9uIGEgc2luZ2xlIHRo
cmVhZCBpbiBhIHNlcXVlbnRpYWwgYW5kIEZJRk8gbWFubmVyLgotIGBTY2hl
ZHVsZXJzLnRyYW1wb2xpbmUoKWA6IFJ1biB3b3JrIGluIGEgc2VxdWVudGlh
bCBhbmQgRklGTyBtYW5uZXIgaW4gb25lIG9mIHRoZSBwYXJ0aWNpcGF0aW5n
IHRocmVhZHMsIHVzdWFsbHkgZm9yIHRlc3RpbmcgcHVycG9zZXMuCgpUaGVz
ZSBhcmUgYXZhaWxhYmxlIG9uIGFsbCBKVk0gcGxhdGZvcm1zIGJ1dCBzb21l
IHNwZWNpZmljIHBsYXRmb3Jtcywgc3VjaCBhcyBBbmRyb2lkLCBoYXZlIHRo
ZWlyIG93biB0eXBpY2FsIGBTY2hlZHVsZXJgcyBkZWZpbmVkOiBgQW5kcm9p
ZFNjaGVkdWxlcnMubWFpblRocmVhZCgpYCwgYFN3aW5nU2NoZWR1bGVyLmlu
c3RhbmNlKClgIG9yIGBKYXZhRlhTY2hlZHVsZXJzLmd1aSgpYC4KCkluIGFk
ZGl0aW9uLCB0aGVyZSBpcyBhbiBvcHRpb24gdG8gd3JhcCBhbiBleGlzdGlu
ZyBgRXhlY3V0b3JgIChhbmQgaXRzIHN1YnR5cGVzIHN1Y2ggYXMgYEV4ZWN1
dG9yU2VydmljZWApIGludG8gYSBgU2NoZWR1bGVyYCB2aWEgYFNjaGVkdWxl
cnMuZnJvbShFeGVjdXRvcilgLiBUaGlzIGNhbiBiZSB1c2VkLCBmb3IgZXhh
bXBsZSwgdG8gaGF2ZSBhIGxhcmdlciBidXQgc3RpbGwgZml4ZWQgcG9vbCBv
ZiB0aHJlYWRzICh1bmxpa2UgYGNvbXB1dGF0aW9uKClgIGFuZCBgaW8oKWAg
cmVzcGVjdGl2ZWx5KS4KClRoZSBgVGhyZWFkLnNsZWVwKDIwMDApO2AgYXQg
dGhlIGVuZCBpcyBubyBhY2NpZGVudC4gSW4gUnhKYXZhIHRoZSBkZWZhdWx0
IGBTY2hlZHVsZXJgcyBydW4gb24gZGFlbW9uIHRocmVhZHMsIHdoaWNoIG1l
YW5zIG9uY2UgdGhlIEphdmEgbWFpbiB0aHJlYWQgZXhpdHMsIHRoZXkgYWxs
IGdldCBzdG9wcGVkIGFuZCBiYWNrZ3JvdW5kIGNvbXB1dGF0aW9ucyBtYXkg
bmV2ZXIgaGFwcGVuLiBTbGVlcGluZyBmb3Igc29tZSB0aW1lIGluIHRoaXMg
ZXhhbXBsZSBzaXR1YXRpb25zIGxldHMgeW91IHNlZSB0aGUgb3V0cHV0IG9m
IHRoZSBmbG93IG9uIHRoZSBjb25zb2xlIHdpdGggdGltZSB0byBzcGFyZS4K
CiMjIyBDb25jdXJyZW5jeSB3aXRoaW4gYSBmbG93CgpGbG93cyBpbiBSeEph
dmEgYXJlIHNlcXVlbnRpYWwgaW4gbmF0dXJlIHNwbGl0IGludG8gcHJvY2Vz
c2luZyBzdGFnZXMgdGhhdCBtYXkgcnVuICoqY29uY3VycmVudGx5Kiogd2l0
aCBlYWNoIG90aGVyOgoKYGBgamF2YQpGbG93YWJsZS5yYW5nZSgxLCAxMCkK
ICAub2JzZXJ2ZU9uKFNjaGVkdWxlcnMuY29tcHV0YXRpb24oKSkKICAubWFw
KHYgLT4gdiAqIHYpCiAgLmJsb2NraW5nU3Vic2NyaWJlKFN5c3RlbS5vdXQ6
OnByaW50bG4pOwpgYGAKClRoaXMgZXhhbXBsZSBmbG93IHNxdWFyZXMgdGhl
IG51bWJlcnMgZnJvbSAxIHRvIDEwIG9uIHRoZSAqKmNvbXB1dGF0aW9uKiog
YFNjaGVkdWxlcmAgYW5kIGNvbnN1bWVzIHRoZSByZXN1bHRzIG9uIHRoZSAi
bWFpbiIgdGhyZWFkIChtb3JlIHByZWNpc2VseSwgdGhlIGNhbGxlciB0aHJl
YWQgb2YgYGJsb2NraW5nU3Vic2NyaWJlYCkuIEhvd2V2ZXIsIHRoZSBsYW1i
ZGEgYHYgLT4gdiAqIHZgIGRvZXNuJ3QgcnVuIGluIHBhcmFsbGVsIGZvciB0
aGlzIGZsb3c7IGl0IHJlY2VpdmVzIHRoZSB2YWx1ZXMgMSB0byAxMCBvbiB0
aGUgc2FtZSBjb21wdXRhdGlvbiB0aHJlYWQgb25lIGFmdGVyIHRoZSBvdGhl
ci4KCiMjIyBQYXJhbGxlbCBwcm9jZXNzaW5nCgpQcm9jZXNzaW5nIHRoZSBu
dW1iZXJzIDEgdG8gMTAgaW4gcGFyYWxsZWwgaXMgYSBiaXQgbW9yZSBpbnZv
bHZlZDoKCmBgYGphdmEKRmxvd2FibGUucmFuZ2UoMSwgMTApCiAgLmZsYXRN
YXAodiAtPgogICAgICBGbG93YWJsZS5qdXN0KHYpCiAgICAgICAgLnN1YnNj
cmliZU9uKFNjaGVkdWxlcnMuY29tcHV0YXRpb24oKSkKICAgICAgICAubWFw
KHcgLT4gdyAqIHcpCiAgKQogIC5ibG9ja2luZ1N1YnNjcmliZShTeXN0ZW0u
b3V0OjpwcmludGxuKTsKYGBgCgpQcmFjdGljYWxseSwgcGFyYWxsZWxpc20g
aW4gUnhKYXZhIG1lYW5zIHJ1bm5pbmcgaW5kZXBlbmRlbnQgZmxvd3MgYW5k
IG1lcmdpbmcgdGhlaXIgcmVzdWx0cyBiYWNrIGludG8gYSBzaW5nbGUgZmxv
dy4gVGhlIG9wZXJhdG9yIGBmbGF0TWFwYCBkb2VzIHRoaXMgYnkgZmlyc3Qg
bWFwcGluZyBlYWNoIG51bWJlciBmcm9tIDEgdG8gMTAgaW50byBpdHMgb3du
IGluZGl2aWR1YWwgYEZsb3dhYmxlYCwgcnVucyB0aGVtIGFuZCBtZXJnZXMg
dGhlIGNvbXB1dGVkIHNxdWFyZXMuCgpOb3RlLCBob3dldmVyLCB0aGF0IGBm
bGF0TWFwYCBkb2Vzbid0IGd1YXJhbnRlZSBhbnkgb3JkZXIgYW5kIHRoZSBp
dGVtcyBmcm9tIHRoZSBpbm5lciBmbG93cyBtYXkgZW5kIHVwIGludGVybGVh
dmVkLiBUaGVyZSBhcmUgYWx0ZXJuYXRpdmUgb3BlcmF0b3JzOgoKICAtIGBj
b25jYXRNYXBgIHRoYXQgbWFwcyBhbmQgcnVucyBvbmUgaW5uZXIgZmxvdyBh
dCBhIHRpbWUgYW5kCiAgLSBgY29uY2F0TWFwRWFnZXJgIHdoaWNoIHJ1bnMg
YWxsIGlubmVyIGZsb3dzICJhdCBvbmNlIiBidXQgdGhlIG91dHB1dCBmbG93
IHdpbGwgYmUgaW4gdGhlIG9yZGVyIHRob3NlIGlubmVyIGZsb3dzIHdlcmUg
Y3JlYXRlZC4KCkFsdGVybmF0aXZlbHksIHRoZSBgRmxvd2FibGUucGFyYWxs
ZWwoKWAgb3BlcmF0b3IgYW5kIHRoZSBgUGFyYWxsZWxGbG93YWJsZWAgdHlw
ZSBoZWxwIGFjaGlldmUgdGhlIHNhbWUgcGFyYWxsZWwgcHJvY2Vzc2luZyBw
YXR0ZXJuOgoKYGBgamF2YQpGbG93YWJsZS5yYW5nZSgxLCAxMCkKICAucGFy
YWxsZWwoKQogIC5ydW5PbihTY2hlZHVsZXJzLmNvbXB1dGF0aW9uKCkpCiAg
Lm1hcCh2IC0+IHYgKiB2KQogIC5zZXF1ZW50aWFsKCkKICAuYmxvY2tpbmdT
dWJzY3JpYmUoU3lzdGVtLm91dDo6cHJpbnRsbik7CmBgYAoKIyMjIERlcGVu
ZGVudCBzdWItZmxvd3MKCmBmbGF0TWFwYCBpcyBhIHBvd2VyZnVsIG9wZXJh
dG9yIGFuZCBoZWxwcyBpbiBhIGxvdCBvZiBzaXR1YXRpb25zLiBGb3IgZXhh
bXBsZSwgZ2l2ZW4gYSBzZXJ2aWNlIHRoYXQgcmV0dXJucyBhIGBGbG93YWJs
ZWAsIHdlJ2QgbGlrZSB0byBjYWxsIGFub3RoZXIgc2VydmljZSB3aXRoIHZh
bHVlcyBlbWl0dGVkIGJ5IHRoZSBmaXJzdCBzZXJ2aWNlOgoKYGBgamF2YQpG
bG93YWJsZTxJbnZlbnRvcnk+IGludmVudG9yeVNvdXJjZSA9IHdhcmVob3Vz
ZS5nZXRJbnZlbnRvcnlBc3luYygpOwoKaW52ZW50b3J5U291cmNlCiAgICAu
ZmxhdE1hcChpbnZlbnRvcnlJdGVtIC0+IGVycC5nZXREZW1hbmRBc3luYyhp
bnZlbnRvcnlJdGVtLmdldElkKCkpCiAgICAgICAgICAgIC5tYXAoZGVtYW5k
IC0+ICJJdGVtICIgKyBpbnZlbnRvcnlJdGVtLmdldE5hbWUoKSArICIgaGFz
IGRlbWFuZCAiICsgZGVtYW5kKSkKICAgIC5zdWJzY3JpYmUoU3lzdGVtLm91
dDo6cHJpbnRsbik7CmBgYAoKIyMjIENvbnRpbnVhdGlvbnMKClNvbWV0aW1l
cywgd2hlbiBhbiBpdGVtIGhhcyBiZWNvbWUgYXZhaWxhYmxlLCBvbmUgd291
bGQgbGlrZSB0byBwZXJmb3JtIHNvbWUgZGVwZW5kZW50IGNvbXB1dGF0aW9u
cyBvbiBpdC4gVGhpcyBpcyBzb21ldGltZXMgY2FsbGVkICoqY29udGludWF0
aW9ucyoqIGFuZCwgZGVwZW5kaW5nIG9uIHdoYXQgc2hvdWxkIGhhcHBlbiBh
bmQgd2hhdCB0eXBlcyBhcmUgaW52b2x2ZWQsIG1heSBpbnZvbHZlIHZhcmlv
dXMgb3BlcmF0b3JzIHRvIGFjY29tcGxpc2guCgojIyMjIERlcGVuZGVudAoK
VGhlIG1vc3QgdHlwaWNhbCBzY2VuYXJpbyBpcyB0byBnaXZlbiBhIHZhbHVl
LCBpbnZva2UgYW5vdGhlciBzZXJ2aWNlLCBhd2FpdCBhbmQgY29udGludWUg
d2l0aCBpdHMgcmVzdWx0OgoKYGBgamF2YQpzZXJ2aWNlLmFwaUNhbGwoKQou
ZmxhdE1hcCh2YWx1ZSAtPiBzZXJ2aWNlLmFub3RoZXJBcGlDYWxsKHZhbHVl
KSkKLmZsYXRNYXAobmV4dCAtPiBzZXJ2aWNlLmZpbmFsQ2FsbChuZXh0KSkK
YGBgCgpJdCBpcyBvZnRlbiB0aGUgY2FzZSBhbHNvIHRoYXQgbGF0ZXIgc2Vx
dWVuY2VzIHdvdWxkIHJlcXVpcmUgdmFsdWVzIGZyb20gZWFybGllciBtYXBw
aW5ncy4gVGhpcyBjYW4gYmUgYWNoaWV2ZWQgYnkgbW92aW5nIHRoZSBvdXRl
ciBgZmxhdE1hcGAgaW50byB0aGUgaW5uZXIgcGFydHMgb2YgdGhlIHByZXZp
b3VzIGBmbGF0TWFwYCBmb3IgZXhhbXBsZToKCmBgYGphdmEKc2VydmljZS5h
cGlDYWxsKCkKLmZsYXRNYXAodmFsdWUgLT4KICAgIHNlcnZpY2UuYW5vdGhl
ckFwaUNhbGwodmFsdWUpCiAgICAuZmxhdE1hcChuZXh0IC0+IHNlcnZpY2Uu
ZmluYWxDYWxsQm90aCh2YWx1ZSwgbmV4dCkpCikKYGBgCgpIZXJlLCB0aGUg
b3JpZ2luYWwgYHZhbHVlYCB3aWxsIGJlIGF2YWlsYWJsZSBpbnNpZGUgdGhl
IGlubmVyIGBmbGF0TWFwYCwgY291cnRlc3kgb2YgbGFtYmRhIHZhcmlhYmxl
IGNhcHR1cmUuCgojIyMjIE5vbi1kZXBlbmRlbnQKCkluIG90aGVyIHNjZW5h
cmlvcywgdGhlIHJlc3VsdChzKSBvZiB0aGUgZmlyc3Qgc291cmNlL2RhdGFm
bG93IGlzIGlycmVsZXZhbnQgYW5kIG9uZSB3b3VsZCBsaWtlIHRvIGNvbnRp
bnVlIHdpdGggYSBxdWFzaSBpbmRlcGVuZGVudCBhbm90aGVyIHNvdXJjZS4g
SGVyZSwgYGZsYXRNYXBgIHdvcmtzIGFzIHdlbGw6CgpgYGBqYXZhCk9ic2Vy
dmFibGUgY29udGludWVkID0gc291cmNlT2JzZXJ2YWJsZS5mbGF0TWFwU2lu
Z2xlKGlnbm9yZWQgLT4gc29tZVNpbmdsZVNvdXJjZSkKY29udGludWVkLm1h
cCh2IC0+IHYudG9TdHJpbmcoKSkKICAuc3Vic2NyaWJlKFN5c3RlbS5vdXQ6
OnByaW50bG4sIFRocm93YWJsZTo6cHJpbnRTdGFja1RyYWNlKTsKYGBgCgpo
b3dldmVyLCB0aGUgY29udGludWF0aW9uIGluIHRoaXMgY2FzZSBzdGF5cyBg
T2JzZXJ2YWJsZWAgaW5zdGVhZCBvZiB0aGUgbGlrZWx5IG1vcmUgYXBwcm9w
cmlhdGUgYFNpbmdsZWAuIChUaGlzIGlzIHVuZGVyc3RhbmRhYmxlIGJlY2F1
c2UKZnJvbSB0aGUgcGVyc3BlY3RpdmUgb2YgYGZsYXRNYXBTaW5nbGVgLCBg
c291cmNlT2JzZXJ2YWJsZWAgaXMgYSBtdWx0aS12YWx1ZWQgc291cmNlIGFu
ZCB0aHVzIHRoZSBtYXBwaW5nIG1heSByZXN1bHQgaW4gbXVsdGlwbGUgdmFs
dWVzIGFzIHdlbGwpLgoKT2Z0ZW4gdGhvdWdoIHRoZXJlIGlzIGEgd2F5IHRo
YXQgaXMgc29tZXdoYXQgbW9yZSBleHByZXNzaXZlIChhbmQgYWxzbyBsb3dl
ciBvdmVyaGVhZCkgYnkgdXNpbmcgYENvbXBsZXRhYmxlYCBhcyB0aGUgbWVk
aWF0b3IgYW5kIGl0cyBvcGVyYXRvciBgYW5kVGhlbmAgdG8gcmVzdW1lIHdp
dGggc29tZXRoaW5nIGVsc2U6CgpgYGBqYXZhCnNvdXJjZU9ic2VydmFibGUK
ICAuaWdub3JlRWxlbWVudHMoKSAgICAgICAgICAgLy8gcmV0dXJucyBDb21w
bGV0YWJsZQogIC5hbmRUaGVuKHNvbWVTaW5nbGVTb3VyY2UpCiAgLm1hcCh2
IC0+IHYudG9TdHJpbmcoKSkKYGBgCgpUaGUgb25seSBkZXBlbmRlbmN5IGJl
dHdlZW4gdGhlIGBzb3VyY2VPYnNlcnZhYmxlYCBhbmQgdGhlIGBzb21lU2lu
Z2xlU291cmNlYCBpcyB0aGF0IHRoZSBmb3JtZXIgc2hvdWxkIGNvbXBsZXRl
IG5vcm1hbGx5IGluIG9yZGVyIGZvciB0aGUgbGF0dGVyIHRvIGJlIGNvbnN1
bWVkLgoKIyMjIyBEZWZlcnJlZC1kZXBlbmRlbnQKClNvbWV0aW1lcywgdGhl
cmUgaXMgYW4gaW1wbGljaXQgZGF0YSBkZXBlbmRlbmN5IGJldHdlZW4gdGhl
IHByZXZpb3VzIHNlcXVlbmNlIGFuZCB0aGUgbmV3IHNlcXVlbmNlIHRoYXQs
IGZvciBzb21lIHJlYXNvbiwgd2FzIG5vdCBmbG93aW5nIHRocm91Z2ggdGhl
ICJyZWd1bGFyIGNoYW5uZWxzIi4gT25lIHdvdWxkIGJlIGluY2xpbmVkIHRv
IHdyaXRlIHN1Y2ggY29udGludWF0aW9ucyBhcyBmb2xsb3dzOgoKYGBgamF2
YQpBdG9taWNJbnRlZ2VyIGNvdW50ID0gbmV3IEF0b21pY0ludGVnZXIoKTsK
Ck9ic2VydmFibGUucmFuZ2UoMSwgMTApCiAgLmRvT25OZXh0KGlnbm9yZWQg
LT4gY291bnQuaW5jcmVtZW50QW5kR2V0KCkpCiAgLmlnbm9yZUVsZW1lbnRz
KCkKICAuYW5kVGhlbihTaW5nbGUuanVzdChjb3VudC5nZXQoKSkpCiAgLnN1
YnNjcmliZShTeXN0ZW0ub3V0OjpwcmludGxuKTsKYGBgCgpVbmZvcnR1bmF0
ZWx5LCB0aGlzIHByaW50cyBgMGAgYmVjYXVzZSBgU2luZ2xlLmp1c3QoY291
bnQuZ2V0KCkpYCBpcyBldmFsdWF0ZWQgYXQgKiphc3NlbWJseSB0aW1lKiog
d2hlbiB0aGUgZGF0YWZsb3cgaGFzbid0IGV2ZW4gcnVuIHlldC4gV2UgbmVl
ZCBzb21ldGhpbmcgdGhhdCBkZWZlcnMgdGhlIGV2YWx1YXRpb24gb2YgdGhp
cyBgU2luZ2xlYCBzb3VyY2UgdW50aWwgKipydW50aW1lKiogd2hlbiB0aGUg
bWFpbiBzb3VyY2UgY29tcGxldGVzOgoKYGBgamF2YQpBdG9taWNJbnRlZ2Vy
IGNvdW50ID0gbmV3IEF0b21pY0ludGVnZXIoKTsKCk9ic2VydmFibGUucmFu
Z2UoMSwgMTApCiAgLmRvT25OZXh0KGlnbm9yZWQgLT4gY291bnQuaW5jcmVt
ZW50QW5kR2V0KCkpCiAgLmlnbm9yZUVsZW1lbnRzKCkKICAuYW5kVGhlbihT
aW5nbGUuZGVmZXIoKCkgLT4gU2luZ2xlLmp1c3QoY291bnQuZ2V0KCkpKSkK
ICAuc3Vic2NyaWJlKFN5c3RlbS5vdXQ6OnByaW50bG4pOwpgYGAKCm9yCgpg
YGBqYXZhCkF0b21pY0ludGVnZXIgY291bnQgPSBuZXcgQXRvbWljSW50ZWdl
cigpOwoKT2JzZXJ2YWJsZS5yYW5nZSgxLCAxMCkKICAuZG9Pbk5leHQoaWdu
b3JlZCAtPiBjb3VudC5pbmNyZW1lbnRBbmRHZXQoKSkKICAuaWdub3JlRWxl
bWVudHMoKQogIC5hbmRUaGVuKFNpbmdsZS5mcm9tQ2FsbGFibGUoKCkgLT4g
Y291bnQuZ2V0KCkpKQogIC5zdWJzY3JpYmUoU3lzdGVtLm91dDo6cHJpbnRs
bik7CmBgYAoKCiMjIyBUeXBlIGNvbnZlcnNpb25zCgpTb21ldGltZXMsIGEg
c291cmNlIG9yIHNlcnZpY2UgcmV0dXJucyBhIGRpZmZlcmVudCB0eXBlIHRo
YW4gdGhlIGZsb3cgdGhhdCBpcyBzdXBwb3NlZCB0byB3b3JrIHdpdGggaXQu
IEZvciBleGFtcGxlLCBpbiB0aGUgaW52ZW50b3J5IGV4YW1wbGUgYWJvdmUs
IGBnZXREZW1hbmRBc3luY2AgY291bGQgcmV0dXJuIGEgYFNpbmdsZTxEZW1h
bmRSZWNvcmQ+YC4gSWYgdGhlIGNvZGUgZXhhbXBsZSBpcyBsZWZ0IHVuY2hh
bmdlZCwgdGhpcyB3aWxsIHJlc3VsdCBpbiBhIGNvbXBpbGUtdGltZSBlcnJv
ciAoaG93ZXZlciwgb2Z0ZW4gd2l0aCBhIG1pc2xlYWRpbmcgZXJyb3IgbWVz
c2FnZSBhYm91dCBsYWNrIG9mIG92ZXJsb2FkKS4KCkluIHN1Y2ggc2l0dWF0
aW9ucywgdGhlcmUgYXJlIHVzdWFsbHkgdHdvIG9wdGlvbnMgdG8gZml4IHRo
ZSB0cmFuc2Zvcm1hdGlvbjogMSkgY29udmVydCB0byB0aGUgZGVzaXJlZCB0
eXBlIG9yIDIpIGZpbmQgYW5kIHVzZSBhbiBvdmVybG9hZCBvZiB0aGUgc3Bl
Y2lmaWMgb3BlcmF0b3Igc3VwcG9ydGluZyB0aGUgZGlmZmVyZW50IHR5cGUu
CgojIyMjIENvbnZlcnRpbmcgdG8gdGhlIGRlc2lyZWQgdHlwZQoKRWFjaCBy
ZWFjdGl2ZSBiYXNlIGNsYXNzIGZlYXR1cmVzIG9wZXJhdG9ycyB0aGF0IGNh
biBwZXJmb3JtIHN1Y2ggY29udmVyc2lvbnMsIGluY2x1ZGluZyB0aGUgcHJv
dG9jb2wgY29udmVyc2lvbnMsIHRvIG1hdGNoIHNvbWUgb3RoZXIgdHlwZS4g
VGhlIGZvbGxvd2luZyBtYXRyaXggc2hvd3MgdGhlIGF2YWlsYWJsZSBjb252
ZXJzaW9uIG9wdGlvbnM6Cgp8ICAgICAgICAgIHwgRmxvd2FibGUgfCBPYnNl
cnZhYmxlIHwgU2luZ2xlIHwgTWF5YmUgfCBDb21wbGV0YWJsZSB8CnwtLS0t
LS0tLS0tfC0tLS0tLS0tLS18LS0tLS0tLS0tLS0tfC0tLS0tLS0tfC0tLS0t
LS18LS0tLS0tLS0tLS0tLXwKfCoqRmxvd2FibGUqKiAgfCAgICAgICAgICB8
IGB0b09ic2VydmFibGVgIHwgYGZpcnN0YCwgYGZpcnN0T3JFcnJvcmAsIGBz
aW5nbGVgLCBgc2luZ2xlT3JFcnJvcmAsIGBsYXN0YCwgYGxhc3RPckVycm9y
YDxzdXA+MTwvc3VwPiB8IGBmaXJzdEVsZW1lbnRgLCBgc2luZ2xlRWxlbWVu
dGAsIGBsYXN0RWxlbWVudGAgfCBgaWdub3JlRWxlbWVudHNgIHwKfCoqT2Jz
ZXJ2YWJsZSoqfCBgdG9GbG93YWJsZWA8c3VwPjI8L3N1cD4gfCAgfCBgZmly
c3RgLCBgZmlyc3RPckVycm9yYCwgYHNpbmdsZWAsIGBzaW5nbGVPckVycm9y
YCwgYGxhc3RgLCBgbGFzdE9yRXJyb3JgPHN1cD4xPC9zdXA+IHwgYGZpcnN0
RWxlbWVudGAsIGBzaW5nbGVFbGVtZW50YCwgYGxhc3RFbGVtZW50YCB8IGBp
Z25vcmVFbGVtZW50c2AgfAp8KipTaW5nbGUqKiB8IGB0b0Zsb3dhYmxlYDxz
dXA+Mzwvc3VwPiB8IGB0b09ic2VydmFibGVgIHwgIHwgYHRvTWF5YmVgIHwg
YGlnbm9yZUVsZW1lbnRgIHwKfCoqTWF5YmUqKiB8IGB0b0Zsb3dhYmxlYDxz
dXA+Mzwvc3VwPiB8IGB0b09ic2VydmFibGVgIHwgYHRvU2luZ2xlYCB8ICB8
IGBpZ25vcmVFbGVtZW50YCB8CnwqKkNvbXBsZXRhYmxlKiogfCBgdG9GbG93
YWJsZWAgfCBgdG9PYnNlcnZhYmxlYCB8IGB0b1NpbmdsZWAgfCBgdG9NYXli
ZWAgfCAgfAoKPHN1cD4xPC9zdXA+OiBXaGVuIHR1cm5pbmcgYSBtdWx0aS12
YWx1ZWQgc291cmNlIGludG8gYSBzaW5nbGUtdmFsdWVkIHNvdXJjZSwgb25l
IHNob3VsZCBkZWNpZGUgd2hpY2ggb2YgdGhlIG1hbnkgc291cmNlIHZhbHVl
cyBzaG91bGQgYmUgY29uc2lkZXJlZCBhcyB0aGUgcmVzdWx0LgoKPHN1cD4y
PC9zdXA+OiBUdXJuaW5nIGFuIGBPYnNlcnZhYmxlYCBpbnRvIGBGbG93YWJs
ZWAgcmVxdWlyZXMgYW4gYWRkaXRpb25hbCBkZWNpc2lvbjogd2hhdCB0byBk
byB3aXRoIHRoZSBwb3RlbnRpYWwgdW5jb25zdHJhaW5lZCBmbG93Cm9mIHRo
ZSBzb3VyY2UgYE9ic2VydmFibGVgPyBUaGVyZSBhcmUgc2V2ZXJhbCBzdHJh
dGVnaWVzIGF2YWlsYWJsZSAoc3VjaCBhcyBidWZmZXJpbmcsIGRyb3BwaW5n
LCBrZWVwaW5nIHRoZSBsYXRlc3QpIHZpYSB0aGUgYEJhY2twcmVzc3VyZVN0
cmF0ZWd5YCBwYXJhbWV0ZXIgb3IgdmlhIHN0YW5kYXJkIGBGbG93YWJsZWAg
b3BlcmF0b3JzIHN1Y2ggYXMgYG9uQmFja3ByZXNzdXJlQnVmZmVyYCwgYG9u
QmFja3ByZXNzdXJlRHJvcGAsIGBvbkJhY2twcmVzc3VyZUxhdGVzdGAgd2hp
Y2ggYWxzbwphbGxvdyBmdXJ0aGVyIGN1c3RvbWl6YXRpb24gb2YgdGhlIGJh
Y2twcmVzc3VyZSBiZWhhdmlvci4KCjxzdXA+Mzwvc3VwPjogV2hlbiB0aGVy
ZSBpcyBvbmx5IChhdCBtb3N0KSBvbmUgc291cmNlIGl0ZW0sIHRoZXJlIGlz
IG5vIHByb2JsZW0gd2l0aCBiYWNrcHJlc3N1cmUgYXMgaXQgY2FuIGJlIGFs
d2F5cyBzdG9yZWQgdW50aWwgdGhlIGRvd25zdHJlYW0gaXMgcmVhZHkgdG8g
Y29uc3VtZS4KCgojIyMjIFVzaW5nIGFuIG92ZXJsb2FkIHdpdGggdGhlIGRl
c2lyZWQgdHlwZQoKTWFueSBmcmVxdWVudGx5IHVzZWQgb3BlcmF0b3IgaGFz
IG92ZXJsb2FkcyB0aGF0IGNhbiBkZWFsIHdpdGggdGhlIG90aGVyIHR5cGVz
LiBUaGVzZSBhcmUgdXN1YWxseSBuYW1lZCB3aXRoIHRoZSBzdWZmaXggb2Yg
dGhlIHRhcmdldCB0eXBlOgoKfCBPcGVyYXRvciB8IE92ZXJsb2FkcyB8Cnwt
LS0tLS0tLS0tfC0tLS0tLS0tLS0tfAp8IGBmbGF0TWFwYCB8IGBmbGF0TWFw
U2luZ2xlYCwgYGZsYXRNYXBNYXliZWAsIGBmbGF0TWFwQ29tcGxldGFibGVg
LCBgZmxhdE1hcEl0ZXJhYmxlYCB8CnwgYGNvbmNhdE1hcGAgfCBgY29uY2F0
TWFwU2luZ2xlYCwgYGNvbmNhdE1hcE1heWJlYCwgYGNvbmNhdE1hcENvbXBs
ZXRhYmxlYCwgYGNvbmNhdE1hcEl0ZXJhYmxlYCB8CnwgYHN3aXRjaE1hcGAg
fCBgc3dpdGNoTWFwU2luZ2xlYCwgYHN3aXRjaE1hcE1heWJlYCwgYHN3aXRj
aE1hcENvbXBsZXRhYmxlYCB8CgpUaGUgcmVhc29uIHRoZXNlIG9wZXJhdG9y
cyBoYXZlIGEgc3VmZml4IGluc3RlYWQgb2Ygc2ltcGx5IGhhdmluZyB0aGUg
c2FtZSBuYW1lIHdpdGggZGlmZmVyZW50IHNpZ25hdHVyZSBpcyB0eXBlIGVy
YXN1cmUuIEphdmEgZG9lc24ndCBjb25zaWRlciBzaWduYXR1cmVzIHN1Y2gg
YXMgYG9wZXJhdG9yKEZ1bmN0aW9uPFQsIFNpbmdsZTxSPj4pYCBhbmQgYG9w
ZXJhdG9yKEZ1bmN0aW9uPFQsIE1heWJlPFI+PilgIGRpZmZlcmVudCAodW5s
aWtlIEMjKSBhbmQgZHVlIHRvIGVyYXN1cmUsIHRoZSB0d28gYG9wZXJhdG9y
YHMgd291bGQgZW5kIHVwIGFzIGR1cGxpY2F0ZSBtZXRob2RzIHdpdGggdGhl
IHNhbWUgc2lnbmF0dXJlLgoKIyMjIE9wZXJhdG9yIG5hbWluZyBjb252ZW50
aW9ucwoKTmFtaW5nIGluIHByb2dyYW1taW5nIGlzIG9uZSBvZiB0aGUgaGFy
ZGVzdCB0aGluZ3MgYXMgbmFtZXMgYXJlIGV4cGVjdGVkIHRvIGJlIG5vdCBs
b25nLCBleHByZXNzaXZlLCBjYXB0dXJpbmcgYW5kIGVhc2lseSBtZW1vcmFi
bGUuIFVuZm9ydHVuYXRlbHksIHRoZSB0YXJnZXQgbGFuZ3VhZ2UgKGFuZCBw
cmUtZXhpc3RpbmcgY29udmVudGlvbnMpIG1heSBub3QgZ2l2ZSB0b28gbXVj
aCBoZWxwIGluIHRoaXMgcmVnYXJkICh1bnVzYWJsZSBrZXl3b3JkcywgdHlw
ZSBlcmFzdXJlLCB0eXBlIGFtYmlndWl0aWVzLCBldGMuKS4KCiMjIyMgVW51
c2FibGUga2V5d29yZHMKCkluIHRoZSBvcmlnaW5hbCBSeC5ORVQsIHRoZSBv
cGVyYXRvciB0aGF0IGVtaXRzIGEgc2luZ2xlIGl0ZW0gYW5kIHRoZW4gY29t
cGxldGVzIGlzIGNhbGxlZCBgUmV0dXJuKFQpYC4gU2luY2UgdGhlIEphdmEg
Y29udmVudGlvbiBpcyB0byBoYXZlIGEgbG93ZXJjYXNlIGxldHRlciBzdGFy
dCBhIG1ldGhvZCBuYW1lLCB0aGlzIHdvdWxkIGhhdmUgYmVlbiBgcmV0dXJu
KFQpYCB3aGljaCBpcyBhIGtleXdvcmQgaW4gSmF2YSBhbmQgdGh1cyBub3Qg
YXZhaWxhYmxlLiBUaGVyZWZvcmUsIFJ4SmF2YSBjaG9zZSB0byBuYW1lIHRo
aXMgb3BlcmF0b3IgYGp1c3QoVClgLiBUaGUgc2FtZSBsaW1pdGF0aW9uIGV4
aXN0cyBmb3IgdGhlIG9wZXJhdG9yIGBTd2l0Y2hgLCB3aGljaCBoYWQgdG8g
YmUgbmFtZWQgYHN3aXRjaE9uTmV4dGAuIFlldCBhbm90aGVyIGV4YW1wbGUg
aXMgYENhdGNoYCB3aGljaCB3YXMgbmFtZWQgYG9uRXJyb3JSZXN1bWVOZXh0
YC4KCiMjIyMgVHlwZSBlcmFzdXJlCgpNYW55IG9wZXJhdG9ycyB0aGF0IGV4
cGVjdCB0aGUgdXNlciB0byBwcm92aWRlIHNvbWUgZnVuY3Rpb24gcmV0dXJu
aW5nIGEgcmVhY3RpdmUgdHlwZSBjYW4ndCBiZSBvdmVybG9hZGVkIGJlY2F1
c2UgdGhlIHR5cGUgZXJhc3VyZSBhcm91bmQgYSBgRnVuY3Rpb248VCwgWD5g
IHR1cm5zIHN1Y2ggbWV0aG9kIHNpZ25hdHVyZXMgaW50byBkdXBsaWNhdGVz
LiBSeEphdmEgY2hvc2UgdG8gbmFtZSBzdWNoIG9wZXJhdG9ycyBieSBhcHBl
bmRpbmcgdGhlIHR5cGUgYXMgc3VmZml4IGFzIHdlbGw6CgpgYGBqYXZhCkZs
b3dhYmxlPFI+IGZsYXRNYXAoRnVuY3Rpb248PyBzdXBlciBULCA/IGV4dGVu
ZHMgUHVibGlzaGVyPD8gZXh0ZW5kcyBSPj4gbWFwcGVyKQoKRmxvd2FibGU8
Uj4gZmxhdE1hcE1heWJlKEZ1bmN0aW9uPD8gc3VwZXIgVCwgPyBleHRlbmRz
IE1heWJlU291cmNlPD8gZXh0ZW5kcyBSPj4gbWFwcGVyKQpgYGAKCiMjIyMg
VHlwZSBhbWJpZ3VpdGllcwoKRXZlbiB0aG91Z2ggY2VydGFpbiBvcGVyYXRv
cnMgaGF2ZSBubyBwcm9ibGVtcyBmcm9tIHR5cGUgZXJhc3VyZSwgdGhlaXIg
c2lnbmF0dXJlIG1heSB0dXJuIHVwIGJlaW5nIGFtYmlndW91cywgZXNwZWNp
YWxseSBpZiBvbmUgdXNlcyBKYXZhIDggYW5kIGxhbWJkYXMuIEZvciBleGFt
cGxlLCB0aGVyZSBhcmUgc2V2ZXJhbCBvdmVybG9hZHMgb2YgYGNvbmNhdFdp
dGhgIHRha2luZyB0aGUgdmFyaW91cyBvdGhlciByZWFjdGl2ZSBiYXNlIHR5
cGVzIGFzIGFyZ3VtZW50cyAoZm9yIHByb3ZpZGluZyBjb252ZW5pZW5jZSBh
bmQgcGVyZm9ybWFuY2UgYmVuZWZpdHMgaW4gdGhlIHVuZGVybHlpbmcgaW1w
bGVtZW50YXRpb24pOgoKYGBgamF2YQpGbG93YWJsZTxUPiBjb25jYXRXaXRo
KFB1Ymxpc2hlcjw/IGV4dGVuZHMgVD4gb3RoZXIpOwoKRmxvd2FibGU8VD4g
Y29uY2F0V2l0aChTaW5nbGVTb3VyY2U8PyBleHRlbmRzIFQ+IG90aGVyKTsK
YGBgCgpCb3RoIGBQdWJsaXNoZXJgIGFuZCBgU2luZ2xlU291cmNlYCBhcHBl
YXIgYXMgZnVuY3Rpb25hbCBpbnRlcmZhY2VzICh0eXBlcyB3aXRoIG9uZSBh
YnN0cmFjdCBtZXRob2QpIGFuZCBtYXkgZW5jb3VyYWdlIHVzZXJzIHRvIHRy
eSB0byBwcm92aWRlIGEgbGFtYmRhIGV4cHJlc3Npb246CgpgYGBqYXZhCnNv
bWVTb3VyY2UuY29uY2F0V2l0aChzIC0+IFNpbmdsZS5qdXN0KDIpKQouc3Vi
c2NyaWJlKFN5c3RlbS5vdXQ6OnByaW50bG4sIFRocm93YWJsZTo6cHJpbnRT
dGFja1RyYWNlKTsKYGBgCgpVbmZvcnR1bmF0ZWx5LCB0aGlzIGFwcHJvYWNo
IGRvZXNuJ3Qgd29yayBhbmQgdGhlIGV4YW1wbGUgZG9lcyBub3QgcHJpbnQg
YDJgIGF0IGFsbC4gSW4gZmFjdCwgc2luY2UgdmVyc2lvbiAyLjEuMTAsIGl0
IGRvZXNuJ3QKZXZlbiBjb21waWxlIGJlY2F1c2UgYXQgbGVhc3QgNCBgY29u
Y2F0V2l0aGAgb3ZlcmxvYWRzIGV4aXN0IGFuZCB0aGUgY29tcGlsZXIgZmlu
ZHMgdGhlIGNvZGUgYWJvdmUgYW1iaWd1b3VzLgoKVGhlIHVzZXIgaW4gc3Vj
aCBzaXR1YXRpb25zIHByb2JhYmx5IHdhbnRlZCB0byBkZWZlciBzb21lIGNv
bXB1dGF0aW9uIHVudGlsIHRoZSBgc29tZVNvdXJjZWAgaGFzIGNvbXBsZXRl
ZCwgdGh1cyB0aGUgY29ycmVjdAp1bmFtYmlndW91cyBvcGVyYXRvciBzaG91
bGQgaGF2ZSBiZWVuIGBkZWZlcmA6CgpgYGBqYXZhCnNvbWVTb3VyY2UuY29u
Y2F0V2l0aChTaW5nbGUuZGVmZXIoKCkgLT4gU2luZ2xlLmp1c3QoMikpKQou
c3Vic2NyaWJlKFN5c3RlbS5vdXQ6OnByaW50bG4sIFRocm93YWJsZTo6cHJp
bnRTdGFja1RyYWNlKTsKYGBgCgpTb21ldGltZXMsIGEgc3VmZml4IGlzIGFk
ZGVkIHRvIGF2b2lkIGxvZ2ljYWwgYW1iaWd1aXRpZXMgdGhhdCBtYXkgY29t
cGlsZSBidXQgcHJvZHVjZSB0aGUgd3JvbmcgdHlwZSBpbiBhIGZsb3c6Cgpg
YGBqYXZhCkZsb3dhYmxlPFQ+IG1lcmdlKFB1Ymxpc2hlcjw/IGV4dGVuZHMg
UHVibGlzaGVyPD8gZXh0ZW5kcyBUPj4gc291cmNlcyk7CgpGbG93YWJsZTxU
PiBtZXJnZUFycmF5KFB1Ymxpc2hlcjw/IGV4dGVuZHMgVD4uLi4gc291cmNl
cyk7CmBgYAoKVGhpcyBjYW4gZ2V0IGFsc28gYW1iaWd1b3VzIHdoZW4gZnVu
Y3Rpb25hbCBpbnRlcmZhY2UgdHlwZXMgZ2V0IGludm9sdmVkIGFzIHRoZSB0
eXBlIGFyZ3VtZW50IGBUYC4KCiMjIyMgRXJyb3IgaGFuZGxpbmcKCkRhdGFm
bG93cyBjYW4gZmFpbCwgYXQgd2hpY2ggcG9pbnQgdGhlIGVycm9yIGlzIGVt
aXR0ZWQgdG8gdGhlIGNvbnN1bWVyKHMpLiBTb21ldGltZXMgdGhvdWdoLCBt
dWx0aXBsZSBzb3VyY2VzIG1heSBmYWlsIGF0IHdoaWNoIHBvaW50IHRoZXJl
IGlzIGEgY2hvaWNlIHdoZXRoZXIgb3Igbm90IHdhaXQgZm9yIGFsbCBvZiB0
aGVtIHRvIGNvbXBsZXRlIG9yIGZhaWwuIFRvIGluZGljYXRlIHRoaXMgb3Bw
b3J0dW5pdHksIG1hbnkgb3BlcmF0b3IgbmFtZXMgYXJlIHN1ZmZpeGVkIHdp
dGggdGhlIGBEZWxheUVycm9yYCB3b3JkcyAod2hpbGUgb3RoZXJzIGZlYXR1
cmUgYSBgZGVsYXlFcnJvcmAgb3IgYGRlbGF5RXJyb3JzYCBib29sZWFuIGZs
YWcgaW4gb25lIG9mIHRoZWlyIG92ZXJsb2Fkcyk6CgpgYGBqYXZhCkZsb3dh
YmxlPFQ+IGNvbmNhdChQdWJsaXNoZXI8PyBleHRlbmRzIFB1Ymxpc2hlcjw/
IGV4dGVuZHMgVD4+IHNvdXJjZXMpOwoKRmxvd2FibGU8VD4gY29uY2F0RGVs
YXlFcnJvcihQdWJsaXNoZXI8PyBleHRlbmRzIFB1Ymxpc2hlcjw/IGV4dGVu
ZHMgVD4+IHNvdXJjZXMpOwpgYGAKCk9mIGNvdXJzZSwgc3VmZml4ZXMgb2Yg
dmFyaW91cyBraW5kcyBtYXkgYXBwZWFyIHRvZ2V0aGVyOgoKYGBgamF2YQpG
bG93YWJsZTxUPiBjb25jYXRBcnJheUVhZ2VyRGVsYXlFcnJvcihQdWJsaXNo
ZXI8PyBleHRlbmRzIFQ+Li4uIHNvdXJjZXMpOwpgYGAKCiMjIyMgQmFzZSBj
bGFzcyB2cyBiYXNlIHR5cGUKClRoZSBiYXNlIGNsYXNzZXMgY2FuIGJlIGNv
bnNpZGVyZWQgaGVhdnkgZHVlIHRvIHRoZSBzaGVlciBudW1iZXIgb2Ygc3Rh
dGljIGFuZCBpbnN0YW5jZSBtZXRob2RzIG9uIHRoZW0uIFJ4SmF2YSAzJ3Mg
ZGVzaWduIHdhcyBoZWF2aWx5IGluZmx1ZW5jZWQgYnkgdGhlIFtSZWFjdGl2
ZSBTdHJlYW1zXShodHRwczovL2dpdGh1Yi5jb20vcmVhY3RpdmUtc3RyZWFt
cy9yZWFjdGl2ZS1zdHJlYW1zLWp2bSNyZWFjdGl2ZS1zdHJlYW1zKSBzcGVj
aWZpY2F0aW9uLCB0aGVyZWZvcmUsIHRoZSBsaWJyYXJ5IGZlYXR1cmVzIGEg
Y2xhc3MgYW5kIGFuIGludGVyZmFjZSBwZXIgZWFjaCByZWFjdGl2ZSB0eXBl
OgoKfCBUeXBlIHwgQ2xhc3MgfCBJbnRlcmZhY2UgfCBDb25zdW1lciB8Cnwt
LS0tLS18LS0tLS0tLXwtLS0tLS0tLS0tLXwtLS0tLS0tLS0tfAp8IDAuLk4g
YmFja3ByZXNzdXJlZCB8IGBGbG93YWJsZWAgfCBgUHVibGlzaGVyYDxzdXA+
MTwvc3VwPiB8IGBTdWJzY3JpYmVyYCB8CnwgMC4uTiB1bmJvdW5kZWQgfCBg
T2JzZXJ2YWJsZWAgfCBgT2JzZXJ2YWJsZVNvdXJjZWA8c3VwPjI8L3N1cD4g
fCBgT2JzZXJ2ZXJgIHwKfCAxIGVsZW1lbnQgb3IgZXJyb3IgfCBgU2luZ2xl
YCB8IGBTaW5nbGVTb3VyY2VgIHwgYFNpbmdsZU9ic2VydmVyYCB8CnwgMC4u
MSBlbGVtZW50IG9yIGVycm9yIHwgYE1heWJlYCB8IGBNYXliZVNvdXJjZWAg
fCBgTWF5YmVPYnNlcnZlcmAgfAp8IDAgZWxlbWVudCBvciBlcnJvciB8IGBD
b21wbGV0YWJsZWAgfCBgQ29tcGxldGFibGVTb3VyY2VgIHwgYENvbXBsZXRh
YmxlT2JzZXJ2ZXJgIHwKCjxzdXA+MTwvc3VwPlRoZSBgb3JnLnJlYWN0aXZl
c3RyZWFtcy5QdWJsaXNoZXJgIGlzIHBhcnQgb2YgdGhlIGV4dGVybmFsIFJl
YWN0aXZlIFN0cmVhbXMgbGlicmFyeS4gSXQgaXMgdGhlIG1haW4gdHlwZSB0
byBpbnRlcmFjdCB3aXRoIG90aGVyIHJlYWN0aXZlIGxpYnJhcmllcyB0aHJv
dWdoIGEgc3RhbmRhcmRpemVkIG1lY2hhbmlzbSBnb3Zlcm5lZCBieSB0aGUg
W1JlYWN0aXZlIFN0cmVhbXMgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9naXRo
dWIuY29tL3JlYWN0aXZlLXN0cmVhbXMvcmVhY3RpdmUtc3RyZWFtcy1qdm0j
c3BlY2lmaWNhdGlvbikuCgo8c3VwPjI8L3N1cD5UaGUgbmFtaW5nIGNvbnZl
bnRpb24gb2YgdGhlIGludGVyZmFjZSB3YXMgdG8gYXBwZW5kIGBTb3VyY2Vg
IHRvIHRoZSBzZW1pLXRyYWRpdGlvbmFsIGNsYXNzIG5hbWUuIFRoZXJlIGlz
IG5vIGBGbG93YWJsZVNvdXJjZWAgc2luY2UgYFB1Ymxpc2hlcmAgaXMgcHJv
dmlkZWQgYnkgdGhlIFJlYWN0aXZlIFN0cmVhbXMgbGlicmFyeSAoYW5kIHN1
YnR5cGluZyBpdCB3b3VsZG4ndCBoYXZlIGhlbHBlZCB3aXRoIGludGVyb3Bl
cmF0aW9uIGVpdGhlcikuIFRoZXNlIGludGVyZmFjZXMgYXJlLCBob3dldmVy
LCBub3Qgc3RhbmRhcmQgaW4gdGhlIHNlbnNlIG9mIHRoZSBSZWFjdGl2ZSBT
dHJlYW1zIHNwZWNpZmljYXRpb24gYW5kIGFyZSBjdXJyZW50bHkgUnhKYXZh
IHNwZWNpZmljIG9ubHkuCgojIyMgUjggYW5kIFByb0d1YXJkIHNldHRpbmdz
CgpCeSBkZWZhdWx0LCBSeEphdmEgaXRzZWxmIGRvZXNuJ3QgcmVxdWlyZSBh
bnkgUHJvR3VhcmQvUjggc2V0dGluZ3MgYW5kIHNob3VsZCB3b3JrIHdpdGhv
dXQgcHJvYmxlbXMuIFVuZm9ydHVuYXRlbHksIHRoZSBSZWFjdGl2ZSBTdHJl
YW1zIGRlcGVuZGVuY3kgc2luY2UgdmVyc2lvbiAxLjAuMyBoYXMgZW1iZWRk
ZWQgSmF2YSA5IGNsYXNzIGZpbGVzIGluIGl0cyBKQVIgdGhhdCBjYW4gY2F1
c2Ugd2FybmluZ3Mgd2l0aCB0aGUgcGxhaW4gUHJvR3VhcmQ6CgpgYGAKV2Fy
bmluZzogb3JnLnJlYWN0aXZlc3RyZWFtcy5GbG93QWRhcHRlcnMkRmxvd1B1
Ymxpc2hlckZyb21SZWFjdGl2ZTogY2FuJ3QgZmluZCBzdXBlcmNsYXNzIG9y
IGludGVyZmFjZSBqYXZhLnV0aWwuY29uY3VycmVudC5GbG93JFB1Ymxpc2hl
cgpXYXJuaW5nOiBvcmcucmVhY3RpdmVzdHJlYW1zLkZsb3dBZGFwdGVycyRG
bG93VG9SZWFjdGl2ZVByb2Nlc3NvcjogY2FuJ3QgZmluZCBzdXBlcmNsYXNz
IG9yIGludGVyZmFjZSBqYXZhLnV0aWwuY29uY3VycmVudC5GbG93JFByb2Nl
c3NvcgpXYXJuaW5nOiBvcmcucmVhY3RpdmVzdHJlYW1zLkZsb3dBZGFwdGVy
cyRGbG93VG9SZWFjdGl2ZVN1YnNjcmliZXI6IGNhbid0IGZpbmQgc3VwZXJj
bGFzcyBvciBpbnRlcmZhY2UgamF2YS51dGlsLmNvbmN1cnJlbnQuRmxvdyRT
dWJzY3JpYmVyCldhcm5pbmc6IG9yZy5yZWFjdGl2ZXN0cmVhbXMuRmxvd0Fk
YXB0ZXJzJEZsb3dUb1JlYWN0aXZlU3Vic2NyaXB0aW9uOiBjYW4ndCBmaW5k
IHN1cGVyY2xhc3Mgb3IgaW50ZXJmYWNlIGphdmEudXRpbC5jb25jdXJyZW50
LkZsb3ckU3Vic2NyaXB0aW9uCldhcm5pbmc6IG9yZy5yZWFjdGl2ZXN0cmVh
bXMuRmxvd0FkYXB0ZXJzOiBjYW4ndCBmaW5kIHJlZmVyZW5jZWQgY2xhc3Mg
amF2YS51dGlsLmNvbmN1cnJlbnQuRmxvdyRQdWJsaXNoZXIKYGBgCgpJdCBp
cyByZWNvbW1lbmRlZCBvbmUgc2V0cyB1cCB0aGUgZm9sbG93aW5nIGAtZG9u
dHdhcm5gIGVudHJ5IGluIHRoZSBhcHBsaWNhdGlvbidzIGBwcm9ndWFyZC1y
dWxlc2V0YCBmaWxlOgoKYGBgCi1kb250d2FybiBqYXZhLnV0aWwuY29uY3Vy
cmVudC5GbG93KgpgYGAKCkZvciBSOCwgdGhlIFJ4SmF2YSBqYXIgaW5jbHVk
ZXMgdGhlIGBNRVRBLUlORi9wcm9ndWFyZC9yeGphdmEzLnByb2Agd2l0aCB0
aGUgc2FtZSBuby13YXJuaW5nIGNsYXVzZSBhbmQgc2hvdWxkIGFwcGx5IGF1
dG9tYXRpY2FsbHkuCgojIyMgRnVydGhlciByZWFkaW5nCgpGb3IgZnVydGhl
ciBkZXRhaWxzLCBjb25zdWx0IHRoZSBbd2lraV0oaHR0cHM6Ly9naXRodWIu
Y29tL1JlYWN0aXZlWC9SeEphdmEvd2lraSkuCgojIyBDb21tdW5pY2F0aW9u
CgotIEdvb2dsZSBHcm91cDogW1J4SmF2YV0oaHR0cDovL2dyb3Vwcy5nb29n
bGUuY29tL2QvZm9ydW0vcnhqYXZhKQotIFR3aXR0ZXI6IFtAUnhKYXZhXSho
dHRwOi8vdHdpdHRlci5jb20vUnhKYXZhKQotIFtHaXRIdWIgSXNzdWVzXSho
dHRwczovL2dpdGh1Yi5jb20vUmVhY3RpdmVYL1J4SmF2YS9pc3N1ZXMpCi0g
U3RhY2tPdmVyZmxvdzogW3J4LWphdmFdKGh0dHA6Ly9zdGFja292ZXJmbG93
LmNvbS9xdWVzdGlvbnMvdGFnZ2VkL3J4LWphdmEpIGFuZCBbcngtamF2YTJd
KGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvdGFnZ2VkL3J4
LWphdmEyKQotIFtHaXR0ZXIuaW1dKGh0dHBzOi8vZ2l0dGVyLmltL1JlYWN0
aXZlWC9SeEphdmEpCgojIyBWZXJzaW9uaW5nCgpWZXJzaW9uIDMueCBpcyBp
biBkZXZlbG9wbWVudC4gQnVnZml4ZXMgd2lsbCBiZSBhcHBsaWVkIHRvIGJv
dGggMi54IGFuZCAzLnggYnJhbmNoZXMsIGJ1dCBuZXcgZmVhdHVyZXMgd2ls
bCBvbmx5IGJlIGFkZGVkIHRvIDMueC4KCk1pbm9yIDMueCBpbmNyZW1lbnRz
IChzdWNoIGFzIDMuMSwgMy4yLCBldGMpIHdpbGwgb2NjdXIgd2hlbiBub24t
dHJpdmlhbCBuZXcgZnVuY3Rpb25hbGl0eSBpcyBhZGRlZCBvciBzaWduaWZp
Y2FudCBlbmhhbmNlbWVudHMgb3IgYnVnIGZpeGVzIG9jY3VyIHRoYXQgbWF5
IGhhdmUgYmVoYXZpb3JhbCBjaGFuZ2VzIHRoYXQgbWF5IGFmZmVjdCBzb21l
IGVkZ2UgY2FzZXMgKHN1Y2ggYXMgZGVwZW5kZW5jZSBvbiBiZWhhdmlvciBy
ZXN1bHRpbmcgZnJvbSBhIGJ1ZykuIEFuIGV4YW1wbGUgb2YgYW4gZW5oYW5j
ZW1lbnQgdGhhdCB3b3VsZCBjbGFzc2lmeSBhcyB0aGlzIGlzIGFkZGluZyBy
ZWFjdGl2ZSBwdWxsIGJhY2twcmVzc3VyZSBzdXBwb3J0IHRvIGFuIG9wZXJh
dG9yIHRoYXQgcHJldmlvdXNseSBkaWQgbm90IHN1cHBvcnQgaXQuIFRoaXMg
c2hvdWxkIGJlIGJhY2t3YXJkcyBjb21wYXRpYmxlIGJ1dCBkb2VzIGJlaGF2
ZSBkaWZmZXJlbnRseS4KClBhdGNoIDMueC55IGluY3JlbWVudHMgKHN1Y2gg
YXMgMy4wLjAgLT4gMy4wLjEsIDMuMy4xIC0+IDMuMy4yLCBldGMpIHdpbGwg
b2NjdXIgZm9yIGJ1ZyBmaXhlcyBhbmQgdHJpdmlhbCBmdW5jdGlvbmFsaXR5
IChsaWtlIGFkZGluZyBhIG1ldGhvZCBvdmVybG9hZCkuIE5ldyBmdW5jdGlv
bmFsaXR5IG1hcmtlZCB3aXRoIGFuIFtgQEJldGFgXVtiZXRhIHNvdXJjZSBs
aW5rXSBvciBbYEBFeHBlcmltZW50YWxgXVtleHBlcmltZW50YWwgc291cmNl
IGxpbmtdIGFubm90YXRpb24gY2FuIGFsc28gYmUgYWRkZWQgaW4gdGhlIHBh
dGNoIHJlbGVhc2VzIHRvIGFsbG93IHJhcGlkIGV4cGxvcmF0aW9uIGFuZCBp
dGVyYXRpb24gb2YgdW5zdGFibGUgbmV3IGZ1bmN0aW9uYWxpdHkuIAoKIyMj
IyBAQmV0YQoKQVBJcyBtYXJrZWQgd2l0aCB0aGUgW2BAQmV0YWBdW2JldGEg
c291cmNlIGxpbmtdIGFubm90YXRpb24gYXQgdGhlIGNsYXNzIG9yIG1ldGhv
ZCBsZXZlbCBhcmUgc3ViamVjdCB0byBjaGFuZ2UuIFRoZXkgY2FuIGJlIG1v
ZGlmaWVkIGluIGFueSB3YXksIG9yIGV2ZW4gcmVtb3ZlZCwgYXQgYW55IHRp
bWUuIElmIHlvdXIgY29kZSBpcyBhIGxpYnJhcnkgaXRzZWxmIChpLmUuIGl0
IGlzIHVzZWQgb24gdGhlIENMQVNTUEFUSCBvZiB1c2VycyBvdXRzaWRlIHlv
dXIgY29udHJvbCksIHlvdSBzaG91bGQgbm90IHVzZSBiZXRhIEFQSXMsIHVu
bGVzcyB5b3UgcmVwYWNrYWdlIHRoZW0gKGUuZy4gdXNpbmcgUHJvR3VhcmQs
IHNoYWRpbmcsIGV0YykuCgojIyMjIEBFeHBlcmltZW50YWwKCkFQSXMgbWFy
a2VkIHdpdGggdGhlIFtgQEV4cGVyaW1lbnRhbGBdW2V4cGVyaW1lbnRhbCBz
b3VyY2UgbGlua10gYW5ub3RhdGlvbiBhdCB0aGUgY2xhc3Mgb3IgbWV0aG9k
IGxldmVsIHdpbGwgYWxtb3N0IGNlcnRhaW5seSBjaGFuZ2UuIFRoZXkgY2Fu
IGJlIG1vZGlmaWVkIGluIGFueSB3YXksIG9yIGV2ZW4gcmVtb3ZlZCwgYXQg
YW55IHRpbWUuIFlvdSBzaG91bGQgbm90IHVzZSBvciByZWx5IG9uIHRoZW0g
aW4gYW55IHByb2R1Y3Rpb24gY29kZS4gVGhleSBhcmUgcHVyZWx5IHRvIGFs
bG93IGJyb2FkIHRlc3RpbmcgYW5kIGZlZWRiYWNrLiAKCiMjIyMgQERlcHJl
Y2F0ZWQKCkFQSXMgbWFya2VkIHdpdGggdGhlIGBARGVwcmVjYXRlZGAgYW5u
b3RhdGlvbiBhdCB0aGUgY2xhc3Mgb3IgbWV0aG9kIGxldmVsIHdpbGwgcmVt
YWluIHN1cHBvcnRlZCB1bnRpbCB0aGUgbmV4dCBtYWpvciByZWxlYXNlIGJ1
dCBpdCBpcyByZWNvbW1lbmRlZCB0byBzdG9wIHVzaW5nIHRoZW0uIAoKIyMj
IyBpby5yZWFjdGl2ZXgucnhqYXZhMy5pbnRlcm5hbC4qCgpBbGwgY29kZSBp
bnNpZGUgdGhlIGBpby5yZWFjdGl2ZXgucnhqYXZhMy5pbnRlcm5hbC4qYCBw
YWNrYWdlcyBhcmUgY29uc2lkZXJlZCBwcml2YXRlIEFQSSBhbmQgc2hvdWxk
IG5vdCBiZSByZWxpZWQgdXBvbiBhdCBhbGwuIEl0IGNhbiBjaGFuZ2UgYXQg
YW55IHRpbWUuIAoKIyMgRnVsbCBEb2N1bWVudGF0aW9uCgotIFtXaWtpXSho
dHRwczovL2dpdGh1Yi5jb20vUmVhY3RpdmVYL1J4SmF2YS93aWtpKQotIFtK
YXZhZG9jXShodHRwOi8vcmVhY3RpdmV4LmlvL1J4SmF2YS8zLngvamF2YWRv
Yy8pCi0gW0xhdGVzdCBzbmFwaG90IEphdmFkb2NdKGh0dHA6Ly9yZWFjdGl2
ZXguaW8vUnhKYXZhLzMueC9qYXZhZG9jL3NuYXBzaG90LykKLSBKYXZhZG9j
IG9mIGEgc3BlY2lmaWMgW3JlbGVhc2UgdmVyc2lvbl0oaHR0cHM6Ly9naXRo
dWIuY29tL1JlYWN0aXZlWC9SeEphdmEvdGFncyk6IGBodHRwOi8vcmVhY3Rp
dmV4LmlvL1J4SmF2YS8zLngvamF2YWRvYy8zLngueS9gCgojIyBCaW5hcmll
cwoKQmluYXJpZXMgYW5kIGRlcGVuZGVuY3kgaW5mb3JtYXRpb24gZm9yIE1h
dmVuLCBJdnksIEdyYWRsZSBhbmQgb3RoZXJzIGNhbiBiZSBmb3VuZCBhdCBb
aHR0cDovL3NlYXJjaC5tYXZlbi5vcmddKGh0dHA6Ly9zZWFyY2gubWF2ZW4u
b3JnLyNzZWFyY2glN0NnYSU3QzElN0Npby5yZWFjdGl2ZXgucnhqYXZhMyku
CgpFeGFtcGxlIGZvciBHcmFkbGU6CgpgYGBncm9vdnkKY29tcGlsZSAnaW8u
cmVhY3RpdmV4LnJ4amF2YTM6cnhqYXZhOngueS56JwpgYGAKCmFuZCBmb3Ig
TWF2ZW46CgpgYGB4bWwKPGRlcGVuZGVuY3k+CiAgICA8Z3JvdXBJZD5pby5y
ZWFjdGl2ZXgucnhqYXZhMzwvZ3JvdXBJZD4KICAgIDxhcnRpZmFjdElkPnJ4
amF2YTwvYXJ0aWZhY3RJZD4KICAgIDx2ZXJzaW9uPngueS56PC92ZXJzaW9u
Pgo8L2RlcGVuZGVuY3k+CmBgYAphbmQgZm9yIEl2eToKCmBgYHhtbAo8ZGVw
ZW5kZW5jeSBvcmc9ImlvLnJlYWN0aXZleC5yeGphdmEzIiBuYW1lPSJyeGph
dmEiIHJldj0ieC55LnoiIC8+CmBgYAoKU25hcHNob3RzIGFyZSBhdmFpbGFi
bGUgdmlhIGh0dHBzOi8vb3NzLmpmcm9nLm9yZy9saWJzLXNuYXBzaG90L2lv
L3JlYWN0aXZleC9yeGphdmEzL3J4amF2YS8KCmBgYGdyb292eQpyZXBvc2l0
b3JpZXMgewogICAgbWF2ZW4geyB1cmwgJ2h0dHBzOi8vb3NzLmpmcm9nLm9y
Zy9saWJzLXNuYXBzaG90JyB9Cn0KCmRlcGVuZGVuY2llcyB7CiAgICBjb21w
aWxlICdpby5yZWFjdGl2ZXgucnhqYXZhMzpyeGphdmE6My4wLjAtU05BUFNI
T1QnCn0KYGBgCgojIyBCdWlsZAoKVG8gYnVpbGQ6CgpgYGAKJCBnaXQgY2xv
bmUgZ2l0QGdpdGh1Yi5jb206UmVhY3RpdmVYL1J4SmF2YS5naXQKJCBjZCBS
eEphdmEvCiQgLi9ncmFkbGV3IGJ1aWxkCmBgYAoKRnVydGhlciBkZXRhaWxz
IG9uIGJ1aWxkaW5nIGNhbiBiZSBmb3VuZCBvbiB0aGUgW0dldHRpbmcgU3Rh
cnRlZF0oaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0aXZlWC9SeEphdmEvd2lr
aS9HZXR0aW5nLVN0YXJ0ZWQpIHBhZ2Ugb2YgdGhlIHdpa2kuCgojIyBCdWdz
IGFuZCBGZWVkYmFjawoKRm9yIGJ1Z3MsIHF1ZXN0aW9ucyBhbmQgZGlzY3Vz
c2lvbnMgcGxlYXNlIHVzZSB0aGUgW0dpdGh1YiBJc3N1ZXNdKGh0dHBzOi8v
Z2l0aHViLmNvbS9SZWFjdGl2ZVgvUnhKYXZhL2lzc3VlcykuCgogCiMjIExJ
Q0VOU0UKCiAgICBDb3B5cmlnaHQgKGMpIDIwMTYtcHJlc2VudCwgUnhKYXZh
IENvbnRyaWJ1dG9ycy4KCiAgICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hl
IExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKICAgIHlv
dSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ug
d2l0aCB0aGUgTGljZW5zZS4KICAgIFlvdSBtYXkgb2J0YWluIGEgY29weSBv
ZiB0aGUgTGljZW5zZSBhdAoKICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9s
aWNlbnNlcy9MSUNFTlNFLTIuMAoKICAgIFVubGVzcyByZXF1aXJlZCBieSBh
cHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdh
cmUKICAgIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3Ry
aWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAgICBXSVRIT1VUIFdBUlJB
TlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJl
c3Mgb3IgaW1wbGllZC4KICAgIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNw
ZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKICAg
IGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoKW2JldGEgc291cmNl
IGxpbmtdOiBodHRwczovL2dpdGh1Yi5jb20vUmVhY3RpdmVYL1J4SmF2YS9i
bG9iLzMueC9zcmMvbWFpbi9qYXZhL2lvL3JlYWN0aXZleC9hbm5vdGF0aW9u
cy9CZXRhLmphdmEKW2V4cGVyaW1lbnRhbCBzb3VyY2UgbGlua106IGh0dHBz
Oi8vZ2l0aHViLmNvbS9SZWFjdGl2ZVgvUnhKYXZhL2Jsb2IvMy54L3NyYy9t
YWluL2phdmEvaW8vcmVhY3RpdmV4L2Fubm90YXRpb25zL0V4cGVyaW1lbnRh
bC5qYXZhCg==
",,41199,"bGFuZ3VhZ2U6IGphdmEKamRrOgotIG9wZW5qZGs4CgojIHByZXZlbnQgdHJh
dmlzIHJ1bm5pbmcgZ3JhZGxlIGFzc2VtYmxlOyBsZXQgdGhlIGJ1aWxkIHNj
cmlwdCBkbyBpdCBhbnl3YXkKaW5zdGFsbDogdHJ1ZQoKIyBydW5uaW5nIGlu
IGNvbnRhaW5lciBjYXVzZXMgdGVzdCBmYWlsdXJlcyBhbmQgMngtM3ggbG9u
Z2VyIGJ1aWxkLCB1c2Ugc3RhbmRhbG9uZSBpbnN0YW5jZXMKc3VkbzogcmVx
dWlyZWQKCiMgc2NyaXB0IGZvciBidWlsZCBhbmQgcmVsZWFzZSB2aWEgVHJh
dmlzIHRvIEJpbnRyYXkKc2NyaXB0OiBncmFkbGUvYnVpbGRWaWFUcmF2aXMu
c2gKCiMgQ29kZSBjb3ZlcmFnZQphZnRlcl9zdWNjZXNzOgogIC0gYmFzaCA8
KGN1cmwgLXMgLS1yZXRyeSAxMCBodHRwczovL2NvZGVjb3YuaW8vYmFzaCkK
ICAtIGJhc2ggZ3JhZGxlL3B1c2hfamF2YWRvYy5zaAoKIyBjYWNoZSBiZXR3
ZWVuIGJ1aWxkcwpjYWNoZToKICBkaXJlY3RvcmllczoKICAtICRIT01FLy5t
MgogIC0gJEhPTUUvLmdyYWRsZQplbnY6CiAgZ2xvYmFsOgogIC0gc2VjdXJl
OiBZY0xwWWZOYy9keURPTitvRHZuSks1cEZOaHBQZUpIeGxBSFY4SkJ0NDJl
NTFwckFsNm5qcXJnMVFsZmRwMHB2Qmlza1RQUUhVeGJGeTlET0IxWis0M2xQ
ajV2bHF6NnFCZ3RTM3Z0Qm5zcmN6cis1WHg3TlRkVktxNm9aR2w0NVZqZk5Q
VDd6ZE02R1E1aWZkek9pZDZrSklGdTM0ZzlKWmtDek9ZM0JXR009CiAgLSBz
ZWN1cmU6IFdWbWZTZVcxVU1OZGVtNytYNGNWRGprRWtxZGVOYXZZSDR1ZG4z
YkZOMUlGYVdkbGlXRnA0RllWQlZpK3AxVC9JZ2tSU3F6b1c5Qm00M0RBQmUx
VU1Gb0VyRkNiZmQ3QjBPZmdiNE5aQXN4Rmdva0hHVkxDZTZrNStyUXlBU3Nl
aU83azBpdFNqM0txOVRyRHVlS1BoditnK0lHMHcxQTh5WlRuWGRoWEh2WT0K
ICAtIHNlY3VyZTogWHQ4RTA5bm1Tcis1cjdseTk1aEcvRWlCaXRaYmhGR1BS
R3A4b3FQa05uMUEyZnpHOStobnZsTkxnUWhWUHNJU1pHekp3a1dhM0xHQnhB
VkdtdXlzVk96N2VDd2tvcWxEWmFhU0xZQVBmV1hxa3IrY21ZR1BrRXJnSFNw
K24vaG5RRzRUeWxYMFl4enFYOGZscjZkYjIxeld5TmR1aXlIbW8reEZ5ZEk1
TGVNPQogIC0gc2VjdXJlOiBSbXBJc21ZYTVCZExMV1I2RElMamhFRS9keDJx
M08wTklrdm5NeDVHMWN5UkNOQ3JPZjFCN2ZZRkhuc1REd3B2UkErNkg2ZFpp
bm1leWY2RDNHK2N6T0c1cS9UVzJqY3U1bmgrWU9MaEJiNmpQSXFSRGZxL1dI
QWE1TGtkc3N4czVnOVJkV2xFRFZGTW9FNjJsR2M0Y25mSno1RjVwdUgyOWR5
MlN2WHhJUXc9Cg==
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
