name,id,description,language,open_issues,stargazers_count,topics,subscribers_count,fork,forks_url,readme,config,watch,travis0,travis1,travis2,travis3,travis4,travis5,travis6,travis7,travis8,travis9,travis10,travis11,travis12,travis13,travis14,travis15,travis16,travis17,travis18,travis19,travis20,travis21,travis22,travis23,gitlab0,gitlab1,gitlab2,gitlab3,gitlab4,gitlab5,gitlab6,gitlab7,gitlab8,gitlab9,gitlab10,gitlab11,gitlab12,gitlab13,gitlab14,gitlab15,gitlab16,gitlab17,gitlab18,gitlab19,gitlab20,gitlab21,gitlab22,gitlab23,jenkinsPipeline0,jenkinsPipeline1,jenkinsPipeline2,jenkinsPipeline3,jenkinsPipeline4,jenkinsPipeline5,jenkinsPipeline6,jenkinsPipeline7,jenkinsPipeline8,jenkinsPipeline9,jenkinsPipeline10,jenkinsPipeline11,jenkinsPipeline12,jenkinsPipeline13,jenkinsPipeline14,jenkinsPipeline15,jenkinsPipeline16,jenkinsPipeline17,jenkinsPipeline18,jenkinsPipeline19,jenkinsPipeline20,jenkinsPipeline21,jenkinsPipeline22,jenkinsPipeline23,cirrus0,cirrus1,cirrus2,cirrus3,cirrus4,cirrus5,cirrus6,cirrus7,cirrus8,cirrus9,cirrus10,cirrus11,cirrus12,cirrus13,cirrus14,cirrus15,cirrus16,cirrus17,cirrus18,cirrus19,cirrus20,cirrus21,cirrus22,cirrus23,github0,github1,github2,github3,github4,github5,github6,github7,github8,github9,github10,github11,github12,github13,github14,github15,github16,github17,github18,github19,github20,github21,github22,github23,cds0,cds1,cds2,cds3,cds4,cds5,cds6,cds7,cds8,cds9,cds10,cds11,cds12,cds13,cds14,cds15,cds16,cds17,cds18,cds19,cds20,cds21,cds22,cds23,azure0,azure1,azure2,azure3,azure4,azure5,azure6,azure7,azure8,azure9,azure10,azure11,azure12,azure13,azure14,azure15,azure16,azure17,azure18,azure19,azure20,azure21,azure22,azure23,circleci0,circleci1,circleci2,circleci3,circleci4,circleci5,circleci6,circleci7,circleci8,circleci9,circleci10,circleci11,circleci12,circleci13,circleci14,circleci15,circleci16,circleci17,circleci18,circleci19,circleci20,circleci21,circleci22,circleci23
b'handlebars.js',809601,,b'JavaScript',132,14936,,462,False,b'https://api.github.com/repos/wycats/handlebars.js/forks',"WyFbVHJhdmlzIEJ1aWxkIFN0YXR1c10oaHR0cHM6Ly9pbWcuc2hpZWxkcy5p
by90cmF2aXMvd3ljYXRzL2hhbmRsZWJhcnMuanMvbWFzdGVyLnN2ZyldKGh0
dHBzOi8vdHJhdmlzLWNpLm9yZy93eWNhdHMvaGFuZGxlYmFycy5qcykKWyFb
QXBwdmV5b3IgQnVpbGQgU3RhdHVzXShodHRwczovL2NpLmFwcHZleW9yLmNv
bS9hcGkvcHJvamVjdHMvc3RhdHVzL2dpdGh1Yi93eWNhdHMvaGFuZGxlYmFy
cy5qcz9icmFuY2g9bWFzdGVyJnN2Zz10cnVlKV0oaHR0cHM6Ly9jaS5hcHB2
ZXlvci5jb20vcHJvamVjdC93eWNhdHMvaGFuZGxlYmFycy1qcykKWyFbU2Vs
ZW5pdW0gVGVzdCBTdGF0dXNdKGh0dHBzOi8vc2F1Y2VsYWJzLmNvbS9idWls
ZHN0YXR1cy9oYW5kbGViYXJzKV0oaHR0cHM6Ly9zYXVjZWxhYnMuY29tL3Uv
aGFuZGxlYmFycykKWyFbanNEZWxpdnIgSGl0c10oaHR0cHM6Ly9kYXRhLmpz
ZGVsaXZyLmNvbS92MS9wYWNrYWdlL25wbS9oYW5kbGViYXJzL2JhZGdlP3N0
eWxlPXJvdW5kZWQpXShodHRwczovL3d3dy5qc2RlbGl2ci5jb20vcGFja2Fn
ZS9ucG0vaGFuZGxlYmFycykKCkhhbmRsZWJhcnMuanMKPT09PT09PT09PT09
PQoKSGFuZGxlYmFycyBwcm92aWRlcyB0aGUgcG93ZXIgbmVjZXNzYXJ5IHRv
IGxldCB5b3UgYnVpbGQgKipzZW1hbnRpYyB0ZW1wbGF0ZXMqKiBlZmZlY3Rp
dmVseSB3aXRoIG5vIGZydXN0cmF0aW9uLgpIYW5kbGViYXJzIGlzIGxhcmdl
bHkgY29tcGF0aWJsZSB3aXRoIE11c3RhY2hlIHRlbXBsYXRlcy4gSW4gbW9z
dCBjYXNlcyBpdCBpcyBwb3NzaWJsZSB0byBzd2FwIG91dCBNdXN0YWNoZSB3
aXRoIEhhbmRsZWJhcnMgYW5kIGNvbnRpbnVlIHVzaW5nIHlvdXIgY3VycmVu
dCB0ZW1wbGF0ZXMuCgpDaGVja291dCB0aGUgb2ZmaWNpYWwgSGFuZGxlYmFy
cyBkb2NzIHNpdGUgYXQKW2h0dHA6Ly93d3cuaGFuZGxlYmFyc2pzLmNvbV0o
aHR0cDovL3d3dy5oYW5kbGViYXJzanMuY29tKSBhbmQgdGhlIGxpdmUgZGVt
byBhdCBbaHR0cDovL3RyeWhhbmRsZWJhcnNqcy5jb20vXShodHRwOi8vdHJ5
aGFuZGxlYmFyc2pzLmNvbS8pLgoKSW5zdGFsbGluZwotLS0tLS0tLS0tCgpT
ZWUgb3VyIFtpbnN0YWxsYXRpb24gZG9jdW1lbnRhdGlvbl0oaHR0cDovL2hh
bmRsZWJhcnNqcy5jb20vaW5zdGFsbGF0aW9uLmh0bWwpLgoKVXNhZ2UKLS0t
LS0KSW4gZ2VuZXJhbCwgdGhlIHN5bnRheCBvZiBIYW5kbGViYXJzLmpzIHRl
bXBsYXRlcyBpcyBhIHN1cGVyc2V0Cm9mIE11c3RhY2hlIHRlbXBsYXRlcy4g
Rm9yIGJhc2ljIHN5bnRheCwgY2hlY2sgb3V0IHRoZSBbTXVzdGFjaGUKbWFu
cGFnZV0oaHR0cDovL211c3RhY2hlLmdpdGh1Yi5jb20vbXVzdGFjaGUuNS5o
dG1sKS4KCk9uY2UgeW91IGhhdmUgYSB0ZW1wbGF0ZSwgdXNlIHRoZSBgSGFu
ZGxlYmFycy5jb21waWxlYCBtZXRob2QgdG8gY29tcGlsZQp0aGUgdGVtcGxh
dGUgaW50byBhIGZ1bmN0aW9uLiBUaGUgZ2VuZXJhdGVkIGZ1bmN0aW9uIHRh
a2VzIGEgY29udGV4dAphcmd1bWVudCwgd2hpY2ggd2lsbCBiZSB1c2VkIHRv
IHJlbmRlciB0aGUgdGVtcGxhdGUuCgpgYGBqcwp2YXIgc291cmNlID0gIjxw
PkhlbGxvLCBteSBuYW1lIGlzIHt7bmFtZX19LiBJIGFtIGZyb20ge3tob21l
dG93bn19LiBJIGhhdmUgIiArCiAgICAgICAgICAgICAie3traWRzLmxlbmd0
aH19IGtpZHM6PC9wPiIgKwogICAgICAgICAgICAgIjx1bD57eyNraWRzfX08
bGk+e3tuYW1lfX0gaXMge3thZ2V9fTwvbGk+e3sva2lkc319PC91bD4iOwp2
YXIgdGVtcGxhdGUgPSBIYW5kbGViYXJzLmNvbXBpbGUoc291cmNlKTsKCnZh
ciBkYXRhID0geyAibmFtZSI6ICJBbGFuIiwgImhvbWV0b3duIjogIlNvbWV3
aGVyZSwgVFgiLAogICAgICAgICAgICAgImtpZHMiOiBbeyJuYW1lIjogIkpp
bW15IiwgImFnZSI6ICIxMiJ9LCB7Im5hbWUiOiAiU2FsbHkiLCAiYWdlIjog
IjQifV19Owp2YXIgcmVzdWx0ID0gdGVtcGxhdGUoZGF0YSk7CgovLyBXb3Vs
ZCByZW5kZXI6Ci8vIDxwPkhlbGxvLCBteSBuYW1lIGlzIEFsYW4uIEkgYW0g
ZnJvbSBTb21ld2hlcmUsIFRYLiBJIGhhdmUgMiBraWRzOjwvcD4KLy8gPHVs
PgovLyAgIDxsaT5KaW1teSBpcyAxMjwvbGk+Ci8vICAgPGxpPlNhbGx5IGlz
IDQ8L2xpPgovLyA8L3VsPgpgYGAKCkZ1bGwgZG9jdW1lbnRhdGlvbiBhbmQg
bW9yZSBleGFtcGxlcyBhcmUgYXQgW2hhbmRsZWJhcnNqcy5jb21dKGh0dHA6
Ly9oYW5kbGViYXJzanMuY29tLykuCgpQcmVjb21waWxpbmcgVGVtcGxhdGVz
Ci0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCkhhbmRsZWJhcnMgYWxsb3dzIHRl
bXBsYXRlcyB0byBiZSBwcmVjb21waWxlZCBhbmQgaW5jbHVkZWQgYXMgamF2
YXNjcmlwdCBjb2RlIHJhdGhlciB0aGFuIHRoZSBoYW5kbGViYXJzIHRlbXBs
YXRlIGFsbG93aW5nIGZvciBmYXN0ZXIgc3RhcnR1cCB0aW1lLiBGdWxsIGRl
dGFpbHMgYXJlIGxvY2F0ZWQgW2hlcmVdKGh0dHA6Ly9oYW5kbGViYXJzanMu
Y29tL3ByZWNvbXBpbGF0aW9uLmh0bWwpLgoKRGlmZmVyZW5jZXMgQmV0d2Vl
biBIYW5kbGViYXJzLmpzIGFuZCBNdXN0YWNoZQotLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCkhhbmRsZWJhcnMuanMg
YWRkcyBhIGNvdXBsZSBvZiBhZGRpdGlvbmFsIGZlYXR1cmVzIHRvIG1ha2Ug
d3JpdGluZwp0ZW1wbGF0ZXMgZWFzaWVyIGFuZCBhbHNvIGNoYW5nZXMgYSB0
aW55IGRldGFpbCBvZiBob3cgcGFydGlhbHMgd29yay4KCi0gW05lc3RlZCBQ
YXRoc10oaHR0cDovL2hhbmRsZWJhcnNqcy5jb20vI3BhdGhzKQotIFtIZWxw
ZXJzXShodHRwOi8vaGFuZGxlYmFyc2pzLmNvbS8jaGVscGVycykKLSBbQmxv
Y2sgRXhwcmVzc2lvbnNdKGh0dHA6Ly9oYW5kbGViYXJzanMuY29tLyNibG9j
ay1leHByZXNzaW9ucykKLSBbTGl0ZXJhbCBWYWx1ZXNdKGh0dHA6Ly9oYW5k
bGViYXJzanMuY29tLyNsaXRlcmFscykKLSBbRGVsaW1pdGVkIENvbW1lbnRz
XShodHRwOi8vaGFuZGxlYmFyc2pzLmNvbS8jY29tbWVudHMpCgpCbG9jayBl
eHByZXNzaW9ucyBoYXZlIHRoZSBzYW1lIHN5bnRheCBhcyBtdXN0YWNoZSBz
ZWN0aW9ucyBidXQgc2hvdWxkIG5vdCBiZSBjb25mdXNlZCB3aXRoIG9uZSBh
bm90aGVyLiBTZWN0aW9ucyBhcmUgYWtpbiB0byBhbiBpbXBsaWNpdCBgZWFj
aGAgb3IgYHdpdGhgIHN0YXRlbWVudCBkZXBlbmRpbmcgb24gdGhlIGlucHV0
IGRhdGEgYW5kIGhlbHBlcnMgYXJlIGV4cGxpY2l0IHBpZWNlcyBvZiBjb2Rl
IHRoYXQgYXJlIGZyZWUgdG8gaW1wbGVtZW50IHdoYXRldmVyIGJlaGF2aW9y
IHRoZXkgbGlrZS4gVGhlIFttdXN0YWNoZSBzcGVjXShodHRwOi8vbXVzdGFj
aGUuZ2l0aHViLmlvL211c3RhY2hlLjUuaHRtbCkgZGVmaW5lcyB0aGUgZXhh
Y3QgYmVoYXZpb3Igb2Ygc2VjdGlvbnMuIEluIHRoZSBjYXNlIG9mIG5hbWUg
Y29uZmxpY3RzLCBoZWxwZXJzIGFyZSBnaXZlbiBwcmlvcml0eS4KCiMjIyBD
b21wYXRpYmlsaXR5CgpUaGVyZSBhcmUgYSBmZXcgTXVzdGFjaGUgYmVoYXZp
b3JzIHRoYXQgSGFuZGxlYmFycyBkb2VzIG5vdCBpbXBsZW1lbnQuCi0gSGFu
ZGxlYmFycyBkZXZpYXRlcyBmcm9tIE11c3RhY2hlIHNsaWdodGx5IGluIHRo
YXQgaXQgZG9lcyBub3QgcGVyZm9ybSByZWN1cnNpdmUgbG9va3VwIGJ5IGRl
ZmF1bHQuIFRoZSBjb21waWxlIHRpbWUgYGNvbXBhdGAgZmxhZyBtdXN0IGJl
IHNldCB0byBlbmFibGUgdGhpcyBmdW5jdGlvbmFsaXR5LiBVc2VycyBzaG91
bGQgbm90ZSB0aGF0IHRoZXJlIGlzIGEgcGVyZm9ybWFuY2UgY29zdCBmb3Ig
ZW5hYmxpbmcgdGhpcyBmbGFnLiBUaGUgZXhhY3QgY29zdCB2YXJpZXMgYnkg
dGVtcGxhdGUsIGJ1dCBpdCdzIHJlY29tbWVuZGVkIHRoYXQgcGVyZm9ybWFu
Y2Ugc2Vuc2l0aXZlIG9wZXJhdGlvbnMgc2hvdWxkIGF2b2lkIHRoaXMgbW9k
ZSBhbmQgaW5zdGVhZCBvcHQgZm9yIGV4cGxpY2l0IHBhdGggcmVmZXJlbmNl
cy4KLSBUaGUgb3B0aW9uYWwgTXVzdGFjaGUtc3R5bGUgbGFtYmRhcyBhcmUg
bm90IHN1cHBvcnRlZC4gSW5zdGVhZCBIYW5kbGViYXJzIHByb3ZpZGVzIGl0
cyBvd24gbGFtYmRhIHJlc29sdXRpb24gdGhhdCBmb2xsb3dzIHRoZSBiZWhh
dmlvcnMgb2YgaGVscGVycy4KLSBIYW5kbGViYXJzIGRvZXMgbm90IGFsbG93
IHNwYWNlIGJldHdlZW4gdGhlIG9wZW5pbmcgYHt7YCBhbmQgYSBjb21tYW5k
IGNoYXJhY3RlciBzdWNoIGFzIGAjYCwgYC9gIG9yIGA+YC4gVGhlIGNvbW1h
bmQgY2hhcmFjdGVyIG11c3QgaW1tZWRpYXRlbHkgZm9sbG93IHRoZSBicmFj
ZXMsIHNvIGZvciBleGFtcGxlIGB7ez7CoHBhcnRpYWzCoH19YCBpcyBhbGxv
d2VkIGJ1dCBge3vCoD7CoHBhcnRpYWzCoH19YCBpcyBub3QuCi0gQWx0ZXJu
YXRpdmUgZGVsaW1pdGVycyBhcmUgbm90IHN1cHBvcnRlZC4KCgpTdXBwb3J0
ZWQgRW52aXJvbm1lbnRzCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCkhhbmRs
ZWJhcnMgaGFzIGJlZW4gZGVzaWduZWQgdG8gd29yayBpbiBhbnkgRUNNQVNj
cmlwdCAzIGVudmlyb25tZW50LiBUaGlzIGluY2x1ZGVzCgotIE5vZGUuanMK
LSBDaHJvbWUKLSBGaXJlZm94Ci0gU2FmYXJpIDUrCi0gT3BlcmEgMTErCi0g
SUUgNisKCk9sZGVyIHZlcnNpb25zIGFuZCBvdGhlciBydW50aW1lcyBhcmUg
bGlrZWx5IHRvIHdvcmsgYnV0IGhhdmUgbm90IGJlZW4gZm9ybWFsbHkKdGVz
dGVkLiBUaGUgY29tcGlsZXIgcmVxdWlyZXMgYEpTT04uc3RyaW5naWZ5YCB0
byBiZSBpbXBsZW1lbnRlZCBuYXRpdmVseSBvciB2aWEgYSBwb2x5ZmlsbC4g
SWYgdXNpbmcgdGhlIHByZWNvbXBpbGVyIHRoaXMgaXMgbm90IG5lY2Vzc2Fy
eS4KClshW1NlbGVuaXVtIFRlc3QgU3RhdHVzXShodHRwczovL3NhdWNlbGFi
cy5jb20vYnJvd3Nlci1tYXRyaXgvaGFuZGxlYmFycy5zdmcpXShodHRwczov
L3NhdWNlbGFicy5jb20vdS9oYW5kbGViYXJzKQoKUGVyZm9ybWFuY2UKLS0t
LS0tLS0tLS0KCkluIGEgcm91Z2ggcGVyZm9ybWFuY2UgdGVzdCwgcHJlY29t
cGlsZWQgSGFuZGxlYmFycy5qcyB0ZW1wbGF0ZXMgKGluCnRoZSBvcmlnaW5h
bCB2ZXJzaW9uIG9mIEhhbmRsZWJhcnMuanMpIHJlbmRlcmVkIGluIGFib3V0
IGhhbGYgdGhlCnRpbWUgb2YgTXVzdGFjaGUgdGVtcGxhdGVzLiBJdCB3b3Vs
ZCBiZSBhIHNoYW1lIGlmIGl0IHdlcmUgYW55IG90aGVyCndheSwgc2luY2Ug
dGhleSB3ZXJlIHByZWNvbXBpbGVkLCBidXQgdGhlIGRpZmZlcmVuY2UgaW4g
YXJjaGl0ZWN0dXJlCmRvZXMgaGF2ZSBzb21lIGJpZyBwZXJmb3JtYW5jZSBh
ZHZhbnRhZ2VzLiBKdXN0aW4gTWFybmV5LCBhLmsuYS4KW2dvdGFzY2lpXSho
dHRwOi8vZ2l0aHViLmNvbS9nb3Rhc2NpaSksIGNvbmZpcm1lZCB0aGF0IHdp
dGggYW4KW2luZGVwZW5kZW50IHRlc3RdKGh0dHA6Ly9zb3Jlc2NvZGUuY29t
LzIwMTAvMDkvMTIvYmVuY2htYXJrcy5odG1sKS4gVGhlCnJld3JpdHRlbiBI
YW5kbGViYXJzIChjdXJyZW50IHZlcnNpb24pIGlzIGZhc3RlciB0aGFuIHRo
ZSBvbGQgdmVyc2lvbiwKd2l0aCBtYW55IFtwZXJmb3JtYW5jZSB0ZXN0c10o
aHR0cHM6Ly90cmF2aXMtY2kub3JnL3d5Y2F0cy9oYW5kbGViYXJzLmpzL2J1
aWxkcy8zMzM5MjE4MiNMNTM4KSBiZWluZyA1IHRvIDcgdGltZXMgZmFzdGVy
IHRoYW4gdGhlIE11c3RhY2hlIGVxdWl2YWxlbnQuCgoKVXBncmFkaW5nCi0t
LS0tLS0tLQoKU2VlIFtyZWxlYXNlLW5vdGVzLm1kXShodHRwczovL2dpdGh1
Yi5jb20vd3ljYXRzL2hhbmRsZWJhcnMuanMvYmxvYi9tYXN0ZXIvcmVsZWFz
ZS1ub3Rlcy5tZCkgZm9yIHVwZ3JhZGUgbm90ZXMuCgpJZiB5b3UgYXJlIHVz
aW5nIEhhbmRsZWJhcnMgaW4gcHJvZHVjdGlvbiwgcGxlYXNlIHJlZ3VsYXJs
eSBsb29rIGZvciBpc3N1ZXMgbGFiZWxlZCAKW3Bvc3NpYmx5IGJyZWFraW5n
XShodHRwczovL2dpdGh1Yi5jb20vd3ljYXRzL2hhbmRsZWJhcnMuanMvaXNz
dWVzP3E9aXMlM0FvcGVuK2lzJTNBaXNzdWUrbGFiZWwlM0ElMjJwb3NzaWJs
eSticmVha2luZyUyMikuCklmIHRoaXMgbGFiZWwgaXMgYXBwbGllZCB0byBh
biBpc3N1ZSwgaXQgbWVhbnMgdGhhdCB0aGUgcmVxdWVzdGVkIGNoYW5nZSBp
cyBwcm9iYWJseSBub3QgYSBicmVha2luZyBjaGFuZ2UsCmJ1dCBzaW5jZSBI
YW5kbGViYXJzIGlzIHdpZGVseSBpbiB1c2UgYnkgYSBsb3Qgb2YgcGVvcGxl
LCBjaGFuY2VzIGFyZSBhbHdheXMgdGhlcmUgdGhhdCBpdCBicmVha3Mgc29t
ZWJvZGllcyBidWlsZC4KCgpLbm93biBJc3N1ZXMKLS0tLS0tLS0tLS0tCgpT
ZWUgW0ZBUS5tZF0oaHR0cHM6Ly9naXRodWIuY29tL3d5Y2F0cy9oYW5kbGVi
YXJzLmpzL2Jsb2IvbWFzdGVyL0ZBUS5tZCkgZm9yIGtub3duIGlzc3VlcyBh
bmQgY29tbW9uIHBpdGZhbGxzLgoKCkhhbmRsZWJhcnMgaW4gdGhlIFdpbGQK
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKKiBbQXNzZW1ibGVdKGh0dHA6Ly9h
c3NlbWJsZS5pbyksIGJ5IFtAam9uc2NobGlua2VydF0oaHR0cHM6Ly9naXRo
dWIuY29tL2pvbnNjaGxpbmtlcnQpCiAgYW5kIFtAZG9vd2JdKGh0dHBzOi8v
Z2l0aHViLmNvbS9kb293YiksIGlzIGEgc3RhdGljIHNpdGUgZ2VuZXJhdG9y
IHRoYXQgdXNlcyBIYW5kbGViYXJzLmpzCiAgYXMgaXRzIHRlbXBsYXRlIGVu
Z2luZS4KKiBbQ29yeV0oaHR0cHM6Ly9naXRodWIuY29tL2xlby9jb3J5KSwg
YnkgW0BsZW9dKGh0dHBzOi8vZ2l0aHViLmNvbS9sZW8pLCBpcyBhbm90aGVy
IHRpbnkgc3RhdGljIHNpdGUgZ2VuZXJhdG9yCiogW0NvU2NoZWR1bGVdKGh0
dHA6Ly9jb3NjaGVkdWxlLmNvbSkgQW4gZWRpdG9yaWFsIGNhbGVuZGFyIGZv
ciBXb3JkUHJlc3MgdGhhdCB1c2VzIEhhbmRsZWJhcnMuanMKKiBbZGFzaGJh
cnNdKGh0dHBzOi8vZ2l0aHViLmNvbS9waXNtdXRlL2Rhc2hiYXJzKSBBIG1v
ZGVybiBoZWxwZXIgbGlicmFyeSBmb3IgSGFuZGxlYmFycy5qcy4KKiBbRW1i
ZXIuanNdKGh0dHA6Ly93d3cuZW1iZXJqcy5jb20pIG1ha2VzIEhhbmRsZWJh
cnMuanMgdGhlIHByaW1hcnkgd2F5IHRvCiAgc3RydWN0dXJlIHlvdXIgdmll
d3MsIGFsc28gd2l0aCBhdXRvbWF0aWMgZGF0YSBiaW5kaW5nIHN1cHBvcnQu
CiogW0dob3N0XShodHRwczovL2dob3N0Lm9yZy8pIEp1c3QgYSBibG9nZ2lu
ZyBwbGF0Zm9ybS4KKiBbaGFuZGxlYmFyc19hc3NldHNdKGh0dHA6Ly9naXRo
dWIuY29tL2xlc2hpbGwvaGFuZGxlYmFyc19hc3NldHMpOiBBIFJhaWxzIEFz
c2V0IFBpcGVsaW5lIGdlbQogIGZyb20gTGVzIEhpbGwgKEBsZXNoaWxsKS4K
KiBbaGFuZGxlYmFycy1oZWxwZXJzXShodHRwczovL2dpdGh1Yi5jb20vYXNz
ZW1ibGUvaGFuZGxlYmFycy1oZWxwZXJzKSBpcyBhbiBleHRlbnNpdmUgbGli
cmFyeQogIHdpdGggMTAwKyBoYW5kbGViYXJzIGhlbHBlcnMuCiogW2hhbmRs
ZWJhcnMtbGF5b3V0c10oaHR0cHM6Ly9naXRodWIuY29tL3NoYW5ub25tb2Vs
bGVyL2hhbmRsZWJhcnMtbGF5b3V0cykgaXMgYSBzZXQgb2YgaGVscGVycyB3
aGljaCBpbXBsZW1lbnQgZXh0ZW5kaWJsZSBhbmQgZW1iZWRkYWJsZSBsYXlv
dXQgYmxvY2tzIGFzIHNlZW4gaW4gb3RoZXIgcG9wdWxhciB0ZW1wbGF0aW5n
IGxhbmd1YWdlcy4KKiBbaGJzXShodHRwOi8vZ2l0aHViLmNvbS9kb25wYXJr
L2hicyk6IEFuIEV4cHJlc3MuanMgdmlldyBlbmdpbmUgYWRhcHRlciBmb3Ig
SGFuZGxlYmFycy5qcywKICBmcm9tIERvbiBQYXJrLgoqIFtrb2EtaGJzXSho
dHRwczovL2dpdGh1Yi5jb20vandpbG0va29hLWhicyk6IFtrb2FdKGh0dHBz
Oi8vZ2l0aHViLmNvbS9rb2Fqcy9rb2EpIGdlbmVyYXRvciBiYXNlZAogIHJl
bmRlcmVyIGZvciBIYW5kbGViYXJzLmpzLgoqIFtqYmxvdHVzXShodHRwOi8v
Z2l0aHViLmNvbS9qYmxvdHVzKSBjcmVhdGVkIFtodHRwOi8vdHJ5aGFuZGxl
YmFyc2pzLmNvbV0oaHR0cDovL3RyeWhhbmRsZWJhcnNqcy5jb20pCiAgZm9y
IGFueW9uZSB3aG8gd291bGQgbGlrZSB0byB0cnkgb3V0IEhhbmRsZWJhcnMu
anMgaW4gdGhlaXIgYnJvd3Nlci4KKiBbalF1ZXJ5IHBsdWdpbl0oaHR0cDov
LzcxMTA0LmdpdGh1Yi5pby9qcXVlcnktaGFuZGxlYmFycy8pOiBhbGxvd3Mg
eW91IHRvIHVzZQogIEhhbmRsZWJhcnMuanMgd2l0aCBbalF1ZXJ5XShodHRw
Oi8vanF1ZXJ5LmNvbS8pLgoqIFtMdW1iYXJdKGh0dHA6Ly93YWxtYXJ0bGFi
cy5naXRodWIuaW8vbHVtYmFyKSBwcm92aWRlcyBlYXN5IG1vZHVsZS1iYXNl
ZCB0ZW1wbGF0ZSBtYW5hZ2VtZW50IGZvcgogIGhhbmRsZWJhcnMgcHJvamVj
dHMuCiogW01hcmlvbmV0dGUuSGFuZGxlYmFyc10oaHR0cHM6Ly9naXRodWIu
Y29tL2hhc2hjaGFuZ2UvbWFyaW9uZXR0ZS5oYW5kbGViYXJzKSBhZGRzIHN1
cHBvcnQgZm9yIEhhbmRsZWJhcnMgYW5kIE11c3RhY2hlIHRlbXBsYXRlcyB0
byBNYXJpb25ldHRlLgoqIFtzYW1teS5qc10oaHR0cDovL2dpdGh1Yi5jb20v
cXVpcmtleS9zYW1teSkgYnkgQWFyb24gUXVpbnQsIGEuay5hLiBxdWlya2V5
LAogIHN1cHBvcnRzIEhhbmRsZWJhcnMuanMgYXMgb25lIG9mIGl0cyB0ZW1w
bGF0ZSBwbHVnaW5zLgoqIFtTcHJvdXRDb3JlXShodHRwOi8vd3d3LnNwcm91
dGNvcmUuY29tKSB1c2VzIEhhbmRsZWJhcnMuanMgYXMgaXRzIG1haW4KICB0
ZW1wbGF0aW5nIGVuZ2luZSwgZXh0ZW5kaW5nIGl0IHdpdGggYXV0b21hdGlj
IGRhdGEgYmluZGluZyBzdXBwb3J0LgoqIFtZVUldKGh0dHA6Ly95dWlsaWJy
YXJ5LmNvbS95dWkvZG9jcy9oYW5kbGViYXJzLykgaW1wbGVtZW50cyBhIHBv
cnQgb2YgaGFuZGxlYmFycwoqIFtTd2FnXShodHRwczovL2dpdGh1Yi5jb20v
ZWx2aW5nL3N3YWcpIGJ5IFtAZWx2aW5nXShodHRwczovL2dpdGh1Yi5jb20v
ZWx2aW5nKSBpcyBhIGdyb3dpbmcgY29sbGVjdGlvbiBvZiBoZWxwZXJzIGZv
ciBoYW5kbGViYXJzLmpzLiBHaXZlIHlvdXIgaGFuZGxlYmFycy5qcyB0ZW1w
bGF0ZXMgc29tZSBzd2FnIHNvbiEKKiBbRE9NQmFyc10oaHR0cHM6Ly9naXRo
dWIuY29tL2JsYWtlZW1icmV5L2RvbWJhcnMpIGlzIGEgRE9NLWJhc2VkIHRl
bXBsYXRpbmcgZW5naW5lIGJ1aWx0IG9uIHRoZSBIYW5kbGViYXJzIHBhcnNl
ciBhbmQgcnVudGltZSAqKkRFUFJFQ0FURUQqKgoqIFtwcm9taXNlZC1oYW5k
bGViYXJzXShodHRwczovL2dpdGh1Yi5jb20vbmtuYXBwL3Byb21pc2VkLWhh
bmRsZWJhcnMpIGlzIGEgd3JhcHBlciBmb3IgSGFuZGxlYmFycyB0aGF0IGFs
bG93cyBoZWxwZXJzIHRvIHJldHVybiBQcm9taXNlcy4KKiBbanVzdC1oYW5k
bGViYXJzLWhlbHBlcnNdKGh0dHBzOi8vZ2l0aHViLmNvbS9sZWFwZnJvZ3Rl
Y2hub2xvZ3kvanVzdC1oYW5kbGViYXJzLWhlbHBlcnMpIEEgZnVsbHkgdGVz
dGVkIGxpZ2h0d2VpZ2h0IHBhY2thZ2Ugd2l0aCBjb21tb24gSGFuZGxlYmFy
cyBoZWxwZXJzLgoqIFtpbmNyZW1lbnRhbC1iYXJzXShodHRwczovL2dpdGh1
Yi5jb20vYXRvbWljdGFnL2luY3JlbWVudGFsLWJhcnMpIGFkZHMgc3VwcG9y
dCBmb3IgW2luY3JlbWVudGFsLWRvbV0oaHR0cHM6Ly9naXRodWIuY29tL2dv
b2dsZS9pbmNyZW1lbnRhbC1kb20pIGFzIHRlbXBsYXRlIHRhcmdldCB0byBI
YW5kbGViYXJzLgoqIFthcGlEb2NdKGh0dHBzOi8vZ2l0aHViLmNvbS9hcGlk
b2MvYXBpZG9jKSBhcGlEb2MgdXNlcyBoYW5kbGViYXJzIGFzIHBhcnNpbmcg
ZW5naW5lIGZvciBhcGkgZG9jdW1lbnRhdGlvbiB2aWV3IGdlbmVyYXRpb24u
CiogW2hhbmRsZWJhcnMtd2F4XShodHRwczovL2dpdGh1Yi5jb20vc2hhbm5v
bm1vZWxsZXIvaGFuZGxlYmFycy13YXgpIFRoZSBtaXNzaW5nIEhhbmRsZWJh
cnMgQVBJLiBFZmZvcnRsZXNzIHJlZ2lzdHJhdGlvbiBvZiBkYXRhLCBwYXJ0
aWFscywgaGVscGVycywgYW5kIGRlY29yYXRvcnMgdXNpbmcgZmlsZS1zeXN0
ZW0gZ2xvYnMsIG1vZHVsZXMsIGFuZCBwbGFpbi1vbGQgSmF2YVNjcmlwdCBv
YmplY3RzLgoKRXh0ZXJuYWwgUmVzb3VyY2VzCi0tLS0tLS0tLS0tLS0tLS0t
LQoKKiBbR2lzdCBhYm91dCBTeW5jaHJvbm91cyBhbmQgYXN5bmNocm9ub3Vz
IGxvYWRpbmcgb2YgZXh0ZXJuYWwgaGFuZGxlYmFycyB0ZW1wbGF0ZXNdKGh0
dHBzOi8vZ2lzdC5naXRodWIuY29tLzIyODcwNzApCgpIYXZlIGEgcHJvamVj
dCB1c2luZyBIYW5kbGViYXJzPyBTZW5kIHVzIGEgW3B1bGwgcmVxdWVzdF1b
cHVsbC1yZXF1ZXN0XSEKCkxpY2Vuc2UKLS0tLS0tLQpIYW5kbGViYXJzLmpz
IGlzIHJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4KCltwdWxsLXJl
cXVlc3RdOiBodHRwczovL2dpdGh1Yi5jb20vd3ljYXRzL2hhbmRsZWJhcnMu
anMvcHVsbC9uZXcvbWFzdGVyCg==
",,14936,"bGFuZ3VhZ2U6IG5vZGVfanMKYmVmb3JlX2luc3RhbGw6Ci0gbnBtIGluc3Rh
bGwgLWcgZ3J1bnQtY2xpCnNjcmlwdDoKLSBncnVudCAtLXN0YWNrIHRyYXZp
cwplbWFpbDoKICBvbl9mYWlsdXJlOiBjaGFuZ2UKICBvbl9zdWNjZXNzOiBu
ZXZlcgplbnY6CiAgZ2xvYmFsOgogIC0gUzNfQlVDS0VUX05BTUU9YnVpbGRz
LmhhbmRsZWJhcnNqcy5jb20KICAtIHNlY3VyZTogY2t5RWU1ZHpqZEZEam1a
NndJcmhHbTBDRkJFbktxOGMxZFlwdGZnVlYvUTUvbkpGR3p1OFQweVRqb3VT
L0VSeHpkVDJIMzI3LzYzVkN4aEZuTENSSHJzaDRybFcvckN5NFhJM08vMFRl
TUxnRlBhNFRYa084MzU5cVo0Q0I0NFRCYjNOc0p5UVhOTVlkSnBQTFRDVlRN
cHVpcXFrRkZPcis2T2VnZ1I3dWZBPQogIC0gc2VjdXJlOiBObTRBZ1Nmc2dO
QjIxa2dLckY5VGw3cVZaVThZWVJFaG91UXVuRnJhY1RjWlpoMk5aMlhINWFI
dVNpWENqODhCMTNDci9qR2JKS3NaNFQzUVMzd1dZdHo2bGt5Vk94M0gzaUkr
VE10cWhEOVJNM2E3QTRPKzR2Vk44SWlvQjJZamhFdTBPS2p3Z1g1Z3ArMHVG
K3BMRWk3SHBqNmZ1cEQzQWJiTDV1WWNLZzg9Cm1hdHJpeDoKICBpbmNsdWRl
OgogIC0gbm9kZV9qczogJzEwJwogICAgZW52OgogICAgLSBQVUJMSVNIPXRy
dWUKICAgIC0gc2VjdXJlOiBwTFR6Z2h0VmxsOXlHS0pJMEFhQjB1SThHeXBm
V3hMVGFJQjBaTDgvL3lOM25BRUlLTWhmL1JSaWxZVHNuL3JLajJOVWE3dnQy
ZWRZSUxpM2x0dE9VbENCT3dUYzlhbWlSbXMxVzhMd3IvM0lkV1BlQkx2THVI
MXpOSlJtMmxCQXdVNExCU3FhT3doR2F4T1FyNktIVG5XdWRoTmhnT3VjeHBa
ZnZmSS9kRnc9CiAgICAtIHNlY3VyZTogeUVSWUNmN0F3TDExRDl1TXRhY2x5
L1RIR1Y4Qmx6c01tcnQraVFWdkdBM0dhWTZRTW1mWXFmNlA2Y0NIOThzSDVl
dGQxWSsxZTZZclBlTWpxSTZseVJsbFQ3RnB0b3lPZEh1bGF6UWU4NlZRTjRz
YzBFcHFNbEgwODhrQjdnR2pUdXQ5WitYOVZpb29UNVhFaDlXQTVqWEVJOXBY
aFFKTm9JSGtXUHV3R3VZPQpjYWNoZToKICBkaXJlY3RvcmllczoKICAtIG5v
ZGVfbW9kdWxlcwoKZ2l0OgogIGRlcHRoOiAxMDAK
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
b'Mask_RCNN',107595270,b'Mask R-CNN for object detection and instance segmentation on Keras and TensorFlow',b'Python',1199,14931,,563,False,b'https://api.github.com/repos/matterport/Mask_RCNN/forks',"IyBNYXNrIFItQ05OIGZvciBPYmplY3QgRGV0ZWN0aW9uIGFuZCBTZWdtZW50
YXRpb24KClRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgW01hc2sgUi1D
Tk5dKGh0dHBzOi8vYXJ4aXYub3JnL2Ficy8xNzAzLjA2ODcwKSBvbiBQeXRo
b24gMywgS2VyYXMsIGFuZCBUZW5zb3JGbG93LiBUaGUgbW9kZWwgZ2VuZXJh
dGVzIGJvdW5kaW5nIGJveGVzIGFuZCBzZWdtZW50YXRpb24gbWFza3MgZm9y
IGVhY2ggaW5zdGFuY2Ugb2YgYW4gb2JqZWN0IGluIHRoZSBpbWFnZS4gSXQn
cyBiYXNlZCBvbiBGZWF0dXJlIFB5cmFtaWQgTmV0d29yayAoRlBOKSBhbmQg
YSBSZXNOZXQxMDEgYmFja2JvbmUuCgohW0luc3RhbmNlIFNlZ21lbnRhdGlv
biBTYW1wbGVdKGFzc2V0cy9zdHJlZXQucG5nKQoKVGhlIHJlcG9zaXRvcnkg
aW5jbHVkZXM6CiogU291cmNlIGNvZGUgb2YgTWFzayBSLUNOTiBidWlsdCBv
biBGUE4gYW5kIFJlc05ldDEwMS4KKiBUcmFpbmluZyBjb2RlIGZvciBNUyBD
T0NPCiogUHJlLXRyYWluZWQgd2VpZ2h0cyBmb3IgTVMgQ09DTwoqIEp1cHl0
ZXIgbm90ZWJvb2tzIHRvIHZpc3VhbGl6ZSB0aGUgZGV0ZWN0aW9uIHBpcGVs
aW5lIGF0IGV2ZXJ5IHN0ZXAKKiBQYXJhbGxlbE1vZGVsIGNsYXNzIGZvciBt
dWx0aS1HUFUgdHJhaW5pbmcKKiBFdmFsdWF0aW9uIG9uIE1TIENPQ08gbWV0
cmljcyAoQVApCiogRXhhbXBsZSBvZiB0cmFpbmluZyBvbiB5b3VyIG93biBk
YXRhc2V0CgoKVGhlIGNvZGUgaXMgZG9jdW1lbnRlZCBhbmQgZGVzaWduZWQg
dG8gYmUgZWFzeSB0byBleHRlbmQuIElmIHlvdSB1c2UgaXQgaW4geW91ciBy
ZXNlYXJjaCwgcGxlYXNlIGNvbnNpZGVyIGNpdGluZyB0aGlzIHJlcG9zaXRv
cnkgKGJpYnRleCBiZWxvdykuIElmIHlvdSB3b3JrIG9uIDNEIHZpc2lvbiwg
eW91IG1pZ2h0IGZpbmQgb3VyIHJlY2VudGx5IHJlbGVhc2VkIFtNYXR0ZXJw
b3J0M0RdKGh0dHBzOi8vbWF0dGVycG9ydC5jb20vYmxvZy8yMDE3LzA5LzIw
L2Fubm91bmNpbmctbWF0dGVycG9ydDNkLXJlc2VhcmNoLWRhdGFzZXQvKSBk
YXRhc2V0IHVzZWZ1bCBhcyB3ZWxsLgpUaGlzIGRhdGFzZXQgd2FzIGNyZWF0
ZWQgZnJvbSAzRC1yZWNvbnN0cnVjdGVkIHNwYWNlcyBjYXB0dXJlZCBieSBv
dXIgY3VzdG9tZXJzIHdobyBhZ3JlZWQgdG8gbWFrZSB0aGVtIHB1YmxpY2x5
IGF2YWlsYWJsZSBmb3IgYWNhZGVtaWMgdXNlLiBZb3UgY2FuIHNlZSBtb3Jl
IGV4YW1wbGVzIFtoZXJlXShodHRwczovL21hdHRlcnBvcnQuY29tL2dhbGxl
cnkvKS4KCiMgR2V0dGluZyBTdGFydGVkCiogW2RlbW8uaXB5bmJdKHNhbXBs
ZXMvZGVtby5pcHluYikgSXMgdGhlIGVhc2llc3Qgd2F5IHRvIHN0YXJ0LiBJ
dCBzaG93cyBhbiBleGFtcGxlIG9mIHVzaW5nIGEgbW9kZWwgcHJlLXRyYWlu
ZWQgb24gTVMgQ09DTyB0byBzZWdtZW50IG9iamVjdHMgaW4geW91ciBvd24g
aW1hZ2VzLgpJdCBpbmNsdWRlcyBjb2RlIHRvIHJ1biBvYmplY3QgZGV0ZWN0
aW9uIGFuZCBpbnN0YW5jZSBzZWdtZW50YXRpb24gb24gYXJiaXRyYXJ5IGlt
YWdlcy4KCiogW3RyYWluX3NoYXBlcy5pcHluYl0oc2FtcGxlcy9zaGFwZXMv
dHJhaW5fc2hhcGVzLmlweW5iKSBzaG93cyBob3cgdG8gdHJhaW4gTWFzayBS
LUNOTiBvbiB5b3VyIG93biBkYXRhc2V0LiBUaGlzIG5vdGVib29rIGludHJv
ZHVjZXMgYSB0b3kgZGF0YXNldCAoU2hhcGVzKSB0byBkZW1vbnN0cmF0ZSB0
cmFpbmluZyBvbiBhIG5ldyBkYXRhc2V0LgoKKiAoW21vZGVsLnB5XShtcmNu
bi9tb2RlbC5weSksIFt1dGlscy5weV0obXJjbm4vdXRpbHMucHkpLCBbY29u
ZmlnLnB5XShtcmNubi9jb25maWcucHkpKTogVGhlc2UgZmlsZXMgY29udGFp
biB0aGUgbWFpbiBNYXNrIFJDTk4gaW1wbGVtZW50YXRpb24uIAoKCiogW2lu
c3BlY3RfZGF0YS5pcHluYl0oc2FtcGxlcy9jb2NvL2luc3BlY3RfZGF0YS5p
cHluYikuIFRoaXMgbm90ZWJvb2sgdmlzdWFsaXplcyB0aGUgZGlmZmVyZW50
IHByZS1wcm9jZXNzaW5nIHN0ZXBzCnRvIHByZXBhcmUgdGhlIHRyYWluaW5n
IGRhdGEuCgoqIFtpbnNwZWN0X21vZGVsLmlweW5iXShzYW1wbGVzL2NvY28v
aW5zcGVjdF9tb2RlbC5pcHluYikgVGhpcyBub3RlYm9vayBnb2VzIGluIGRl
cHRoIGludG8gdGhlIHN0ZXBzIHBlcmZvcm1lZCB0byBkZXRlY3QgYW5kIHNl
Z21lbnQgb2JqZWN0cy4gSXQgcHJvdmlkZXMgdmlzdWFsaXphdGlvbnMgb2Yg
ZXZlcnkgc3RlcCBvZiB0aGUgcGlwZWxpbmUuCgoqIFtpbnNwZWN0X3dlaWdo
dHMuaXB5bmJdKHNhbXBsZXMvY29jby9pbnNwZWN0X3dlaWdodHMuaXB5bmIp
ClRoaXMgbm90ZWJvb2tzIGluc3BlY3RzIHRoZSB3ZWlnaHRzIG9mIGEgdHJh
aW5lZCBtb2RlbCBhbmQgbG9va3MgZm9yIGFub21hbGllcyBhbmQgb2RkIHBh
dHRlcm5zLgoKCiMgU3RlcCBieSBTdGVwIERldGVjdGlvbgpUbyBoZWxwIHdp
dGggZGVidWdnaW5nIGFuZCB1bmRlcnN0YW5kaW5nIHRoZSBtb2RlbCwgdGhl
cmUgYXJlIDMgbm90ZWJvb2tzIAooW2luc3BlY3RfZGF0YS5pcHluYl0oc2Ft
cGxlcy9jb2NvL2luc3BlY3RfZGF0YS5pcHluYiksIFtpbnNwZWN0X21vZGVs
LmlweW5iXShzYW1wbGVzL2NvY28vaW5zcGVjdF9tb2RlbC5pcHluYiksCltp
bnNwZWN0X3dlaWdodHMuaXB5bmJdKHNhbXBsZXMvY29jby9pbnNwZWN0X3dl
aWdodHMuaXB5bmIpKSB0aGF0IHByb3ZpZGUgYSBsb3Qgb2YgdmlzdWFsaXph
dGlvbnMgYW5kIGFsbG93IHJ1bm5pbmcgdGhlIG1vZGVsIHN0ZXAgYnkgc3Rl
cCB0byBpbnNwZWN0IHRoZSBvdXRwdXQgYXQgZWFjaCBwb2ludC4gSGVyZSBh
cmUgYSBmZXcgZXhhbXBsZXM6CgoKCiMjIDEuIEFuY2hvciBzb3J0aW5nIGFu
ZCBmaWx0ZXJpbmcKVmlzdWFsaXplcyBldmVyeSBzdGVwIG9mIHRoZSBmaXJz
dCBzdGFnZSBSZWdpb24gUHJvcG9zYWwgTmV0d29yayBhbmQgZGlzcGxheXMg
cG9zaXRpdmUgYW5kIG5lZ2F0aXZlIGFuY2hvcnMgYWxvbmcgd2l0aCBhbmNo
b3IgYm94IHJlZmluZW1lbnQuCiFbXShhc3NldHMvZGV0ZWN0aW9uX2FuY2hv
cnMucG5nKQoKIyMgMi4gQm91bmRpbmcgQm94IFJlZmluZW1lbnQKVGhpcyBp
cyBhbiBleGFtcGxlIG9mIGZpbmFsIGRldGVjdGlvbiBib3hlcyAoZG90dGVk
IGxpbmVzKSBhbmQgdGhlIHJlZmluZW1lbnQgYXBwbGllZCB0byB0aGVtIChz
b2xpZCBsaW5lcykgaW4gdGhlIHNlY29uZCBzdGFnZS4KIVtdKGFzc2V0cy9k
ZXRlY3Rpb25fcmVmaW5lbWVudC5wbmcpCgojIyAzLiBNYXNrIEdlbmVyYXRp
b24KRXhhbXBsZXMgb2YgZ2VuZXJhdGVkIG1hc2tzLiBUaGVzZSB0aGVuIGdl
dCBzY2FsZWQgYW5kIHBsYWNlZCBvbiB0aGUgaW1hZ2UgaW4gdGhlIHJpZ2h0
IGxvY2F0aW9uLgoKIVtdKGFzc2V0cy9kZXRlY3Rpb25fbWFza3MucG5nKQoK
IyMgNC5MYXllciBhY3RpdmF0aW9ucwpPZnRlbiBpdCdzIHVzZWZ1bCB0byBp
bnNwZWN0IHRoZSBhY3RpdmF0aW9ucyBhdCBkaWZmZXJlbnQgbGF5ZXJzIHRv
IGxvb2sgZm9yIHNpZ25zIG9mIHRyb3VibGUgKGFsbCB6ZXJvcyBvciByYW5k
b20gbm9pc2UpLgoKIVtdKGFzc2V0cy9kZXRlY3Rpb25fYWN0aXZhdGlvbnMu
cG5nKQoKIyMgNS4gV2VpZ2h0IEhpc3RvZ3JhbXMKQW5vdGhlciB1c2VmdWwg
ZGVidWdnaW5nIHRvb2wgaXMgdG8gaW5zcGVjdCB0aGUgd2VpZ2h0IGhpc3Rv
Z3JhbXMuIFRoZXNlIGFyZSBpbmNsdWRlZCBpbiB0aGUgaW5zcGVjdF93ZWln
aHRzLmlweW5iIG5vdGVib29rLgoKIVtdKGFzc2V0cy9kZXRlY3Rpb25faGlz
dG9ncmFtcy5wbmcpCgojIyA2LiBMb2dnaW5nIHRvIFRlbnNvckJvYXJkClRl
bnNvckJvYXJkIGlzIGFub3RoZXIgZ3JlYXQgZGVidWdnaW5nIGFuZCB2aXN1
YWxpemF0aW9uIHRvb2wuIFRoZSBtb2RlbCBpcyBjb25maWd1cmVkIHRvIGxv
ZyBsb3NzZXMgYW5kIHNhdmUgd2VpZ2h0cyBhdCB0aGUgZW5kIG9mIGV2ZXJ5
IGVwb2NoLgoKIVtdKGFzc2V0cy9kZXRlY3Rpb25fdGVuc29yYm9hcmQucG5n
KQoKIyMgNi4gQ29tcG9zaW5nIHRoZSBkaWZmZXJlbnQgcGllY2VzIGludG8g
YSBmaW5hbCByZXN1bHQKCiFbXShhc3NldHMvZGV0ZWN0aW9uX2ZpbmFsLnBu
ZykKCgojIFRyYWluaW5nIG9uIE1TIENPQ08KV2UncmUgcHJvdmlkaW5nIHBy
ZS10cmFpbmVkIHdlaWdodHMgZm9yIE1TIENPQ08gdG8gbWFrZSBpdCBlYXNp
ZXIgdG8gc3RhcnQuIFlvdSBjYW4KdXNlIHRob3NlIHdlaWdodHMgYXMgYSBz
dGFydGluZyBwb2ludCB0byB0cmFpbiB5b3VyIG93biB2YXJpYXRpb24gb24g
dGhlIG5ldHdvcmsuClRyYWluaW5nIGFuZCBldmFsdWF0aW9uIGNvZGUgaXMg
aW4gYHNhbXBsZXMvY29jby9jb2NvLnB5YC4gWW91IGNhbiBpbXBvcnQgdGhp
cwptb2R1bGUgaW4gSnVweXRlciBub3RlYm9vayAoc2VlIHRoZSBwcm92aWRl
ZCBub3RlYm9va3MgZm9yIGV4YW1wbGVzKSBvciB5b3UKY2FuIHJ1biBpdCBk
aXJlY3RseSBmcm9tIHRoZSBjb21tYW5kIGxpbmUgYXMgc3VjaDoKCmBgYAoj
IFRyYWluIGEgbmV3IG1vZGVsIHN0YXJ0aW5nIGZyb20gcHJlLXRyYWluZWQg
Q09DTyB3ZWlnaHRzCnB5dGhvbjMgc2FtcGxlcy9jb2NvL2NvY28ucHkgdHJh
aW4gLS1kYXRhc2V0PS9wYXRoL3RvL2NvY28vIC0tbW9kZWw9Y29jbwoKIyBU
cmFpbiBhIG5ldyBtb2RlbCBzdGFydGluZyBmcm9tIEltYWdlTmV0IHdlaWdo
dHMKcHl0aG9uMyBzYW1wbGVzL2NvY28vY29jby5weSB0cmFpbiAtLWRhdGFz
ZXQ9L3BhdGgvdG8vY29jby8gLS1tb2RlbD1pbWFnZW5ldAoKIyBDb250aW51
ZSB0cmFpbmluZyBhIG1vZGVsIHRoYXQgeW91IGhhZCB0cmFpbmVkIGVhcmxp
ZXIKcHl0aG9uMyBzYW1wbGVzL2NvY28vY29jby5weSB0cmFpbiAtLWRhdGFz
ZXQ9L3BhdGgvdG8vY29jby8gLS1tb2RlbD0vcGF0aC90by93ZWlnaHRzLmg1
CgojIENvbnRpbnVlIHRyYWluaW5nIHRoZSBsYXN0IG1vZGVsIHlvdSB0cmFp
bmVkLiBUaGlzIHdpbGwgZmluZAojIHRoZSBsYXN0IHRyYWluZWQgd2VpZ2h0
cyBpbiB0aGUgbW9kZWwgZGlyZWN0b3J5LgpweXRob24zIHNhbXBsZXMvY29j
by9jb2NvLnB5IHRyYWluIC0tZGF0YXNldD0vcGF0aC90by9jb2NvLyAtLW1v
ZGVsPWxhc3QKYGBgCgpZb3UgY2FuIGFsc28gcnVuIHRoZSBDT0NPIGV2YWx1
YXRpb24gY29kZSB3aXRoOgpgYGAKIyBSdW4gQ09DTyBldmFsdWF0aW9uIG9u
IHRoZSBsYXN0IHRyYWluZWQgbW9kZWwKcHl0aG9uMyBzYW1wbGVzL2NvY28v
Y29jby5weSBldmFsdWF0ZSAtLWRhdGFzZXQ9L3BhdGgvdG8vY29jby8gLS1t
b2RlbD1sYXN0CmBgYAoKVGhlIHRyYWluaW5nIHNjaGVkdWxlLCBsZWFybmlu
ZyByYXRlLCBhbmQgb3RoZXIgcGFyYW1ldGVycyBzaG91bGQgYmUgc2V0IGlu
IGBzYW1wbGVzL2NvY28vY29jby5weWAuCgoKIyBUcmFpbmluZyBvbiBZb3Vy
IE93biBEYXRhc2V0CgpTdGFydCBieSByZWFkaW5nIHRoaXMgW2Jsb2cgcG9z
dCBhYm91dCB0aGUgYmFsbG9vbiBjb2xvciBzcGxhc2ggc2FtcGxlXShodHRw
czovL2VuZ2luZWVyaW5nLm1hdHRlcnBvcnQuY29tL3NwbGFzaC1vZi1jb2xv
ci1pbnN0YW5jZS1zZWdtZW50YXRpb24td2l0aC1tYXNrLXItY25uLWFuZC10
ZW5zb3JmbG93LTdjNzYxZTIzOGI0NikuIEl0IGNvdmVycyB0aGUgcHJvY2Vz
cyBzdGFydGluZyBmcm9tIGFubm90YXRpbmcgaW1hZ2VzIHRvIHRyYWluaW5n
IHRvIHVzaW5nIHRoZSByZXN1bHRzIGluIGEgc2FtcGxlIGFwcGxpY2F0aW9u
LgoKSW4gc3VtbWFyeSwgdG8gdHJhaW4gdGhlIG1vZGVsIG9uIHlvdXIgb3du
IGRhdGFzZXQgeW91J2xsIG5lZWQgdG8gZXh0ZW5kIHR3byBjbGFzc2VzOgoK
YGBgQ29uZmlnYGBgClRoaXMgY2xhc3MgY29udGFpbnMgdGhlIGRlZmF1bHQg
Y29uZmlndXJhdGlvbi4gU3ViY2xhc3MgaXQgYW5kIG1vZGlmeSB0aGUgYXR0
cmlidXRlcyB5b3UgbmVlZCB0byBjaGFuZ2UuCgpgYGBEYXRhc2V0YGBgClRo
aXMgY2xhc3MgcHJvdmlkZXMgYSBjb25zaXN0ZW50IHdheSB0byB3b3JrIHdp
dGggYW55IGRhdGFzZXQuIApJdCBhbGxvd3MgeW91IHRvIHVzZSBuZXcgZGF0
YXNldHMgZm9yIHRyYWluaW5nIHdpdGhvdXQgaGF2aW5nIHRvIGNoYW5nZSAK
dGhlIGNvZGUgb2YgdGhlIG1vZGVsLiBJdCBhbHNvIHN1cHBvcnRzIGxvYWRp
bmcgbXVsdGlwbGUgZGF0YXNldHMgYXQgdGhlCnNhbWUgdGltZSwgd2hpY2gg
aXMgdXNlZnVsIGlmIHRoZSBvYmplY3RzIHlvdSB3YW50IHRvIGRldGVjdCBh
cmUgbm90IAphbGwgYXZhaWxhYmxlIGluIG9uZSBkYXRhc2V0LiAKClNlZSBl
eGFtcGxlcyBpbiBgc2FtcGxlcy9zaGFwZXMvdHJhaW5fc2hhcGVzLmlweW5i
YCwgYHNhbXBsZXMvY29jby9jb2NvLnB5YCwgYHNhbXBsZXMvYmFsbG9vbi9i
YWxsb29uLnB5YCwgYW5kIGBzYW1wbGVzL251Y2xldXMvbnVjbGV1cy5weWAu
CgojIyBEaWZmZXJlbmNlcyBmcm9tIHRoZSBPZmZpY2lhbCBQYXBlcgpUaGlz
IGltcGxlbWVudGF0aW9uIGZvbGxvd3MgdGhlIE1hc2sgUkNOTiBwYXBlciBm
b3IgdGhlIG1vc3QgcGFydCwgYnV0IHRoZXJlIGFyZSBhIGZldyBjYXNlcyB3
aGVyZSB3ZSBkZXZpYXRlZCBpbiBmYXZvciBvZiBjb2RlIHNpbXBsaWNpdHkg
YW5kIGdlbmVyYWxpemF0aW9uLiBUaGVzZSBhcmUgc29tZSBvZiB0aGUgZGlm
ZmVyZW5jZXMgd2UncmUgYXdhcmUgb2YuIElmIHlvdSBlbmNvdW50ZXIgb3Ro
ZXIgZGlmZmVyZW5jZXMsIHBsZWFzZSBkbyBsZXQgdXMga25vdy4KCiogKipJ
bWFnZSBSZXNpemluZzoqKiBUbyBzdXBwb3J0IHRyYWluaW5nIG11bHRpcGxl
IGltYWdlcyBwZXIgYmF0Y2ggd2UgcmVzaXplIGFsbCBpbWFnZXMgdG8gdGhl
IHNhbWUgc2l6ZS4gRm9yIGV4YW1wbGUsIDEwMjR4MTAyNHB4IG9uIE1TIENP
Q08uIFdlIHByZXNlcnZlIHRoZSBhc3BlY3QgcmF0aW8sIHNvIGlmIGFuIGlt
YWdlIGlzIG5vdCBzcXVhcmUgd2UgcGFkIGl0IHdpdGggemVyb3MuIEluIHRo
ZSBwYXBlciB0aGUgcmVzaXppbmcgaXMgZG9uZSBzdWNoIHRoYXQgdGhlIHNt
YWxsZXN0IHNpZGUgaXMgODAwcHggYW5kIHRoZSBsYXJnZXN0IGlzIHRyaW1t
ZWQgYXQgMTAwMHB4LgoqICoqQm91bmRpbmcgQm94ZXMqKjogU29tZSBkYXRh
c2V0cyBwcm92aWRlIGJvdW5kaW5nIGJveGVzIGFuZCBzb21lIHByb3ZpZGUg
bWFza3Mgb25seS4gVG8gc3VwcG9ydCB0cmFpbmluZyBvbiBtdWx0aXBsZSBk
YXRhc2V0cyB3ZSBvcHRlZCB0byBpZ25vcmUgdGhlIGJvdW5kaW5nIGJveGVz
IHRoYXQgY29tZSB3aXRoIHRoZSBkYXRhc2V0IGFuZCBnZW5lcmF0ZSB0aGVt
IG9uIHRoZSBmbHkgaW5zdGVhZC4gV2UgcGljayB0aGUgc21hbGxlc3QgYm94
IHRoYXQgZW5jYXBzdWxhdGVzIGFsbCB0aGUgcGl4ZWxzIG9mIHRoZSBtYXNr
IGFzIHRoZSBib3VuZGluZyBib3guIFRoaXMgc2ltcGxpZmllcyB0aGUgaW1w
bGVtZW50YXRpb24gYW5kIGFsc28gbWFrZXMgaXQgZWFzeSB0byBhcHBseSBp
bWFnZSBhdWdtZW50YXRpb25zIHRoYXQgd291bGQgb3RoZXJ3aXNlIGJlIGhh
cmRlciB0byBhcHBseSB0byBib3VuZGluZyBib3hlcywgc3VjaCBhcyBpbWFn
ZSByb3RhdGlvbi4KCiAgICBUbyB2YWxpZGF0ZSB0aGlzIGFwcHJvYWNoLCB3
ZSBjb21wYXJlZCBvdXIgY29tcHV0ZWQgYm91bmRpbmcgYm94ZXMgdG8gdGhv
c2UgcHJvdmlkZWQgYnkgdGhlIENPQ08gZGF0YXNldC4KV2UgZm91bmQgdGhh
dCB+MiUgb2YgYm91bmRpbmcgYm94ZXMgZGlmZmVyZWQgYnkgMXB4IG9yIG1v
cmUsIH4wLjA1JSBkaWZmZXJlZCBieSA1cHggb3IgbW9yZSwgCmFuZCBvbmx5
IDAuMDElIGRpZmZlcmVkIGJ5IDEwcHggb3IgbW9yZS4KCiogKipMZWFybmlu
ZyBSYXRlOioqIFRoZSBwYXBlciB1c2VzIGEgbGVhcm5pbmcgcmF0ZSBvZiAw
LjAyLCBidXQgd2UgZm91bmQgdGhhdCB0byBiZQp0b28gaGlnaCwgYW5kIG9m
dGVuIGNhdXNlcyB0aGUgd2VpZ2h0cyB0byBleHBsb2RlLCBlc3BlY2lhbGx5
IHdoZW4gdXNpbmcgYSBzbWFsbCBiYXRjaApzaXplLiBJdCBtaWdodCBiZSBy
ZWxhdGVkIHRvIGRpZmZlcmVuY2VzIGJldHdlZW4gaG93IENhZmZlIGFuZCBU
ZW5zb3JGbG93IGNvbXB1dGUgCmdyYWRpZW50cyAoc3VtIHZzIG1lYW4gYWNy
b3NzIGJhdGNoZXMgYW5kIEdQVXMpLiBPciwgbWF5YmUgdGhlIG9mZmljaWFs
IG1vZGVsIHVzZXMgZ3JhZGllbnQKY2xpcHBpbmcgdG8gYXZvaWQgdGhpcyBp
c3N1ZS4gV2UgZG8gdXNlIGdyYWRpZW50IGNsaXBwaW5nLCBidXQgZG9uJ3Qg
c2V0IGl0IHRvbyBhZ2dyZXNzaXZlbHkuCldlIGZvdW5kIHRoYXQgc21hbGxl
ciBsZWFybmluZyByYXRlcyBjb252ZXJnZSBmYXN0ZXIgYW55d2F5IHNvIHdl
IGdvIHdpdGggdGhhdC4KCiMjIENpdGF0aW9uClVzZSB0aGlzIGJpYnRleCB0
byBjaXRlIHRoaXMgcmVwb3NpdG9yeToKYGBgCkBtaXNje21hdHRlcnBvcnRf
bWFza3Jjbm5fMjAxNywKICB0aXRsZT17TWFzayBSLUNOTiBmb3Igb2JqZWN0
IGRldGVjdGlvbiBhbmQgaW5zdGFuY2Ugc2VnbWVudGF0aW9uIG9uIEtlcmFz
IGFuZCBUZW5zb3JGbG93fSwKICBhdXRob3I9e1dhbGVlZCBBYmR1bGxhfSwK
ICB5ZWFyPXsyMDE3fSwKICBwdWJsaXNoZXI9e0dpdGh1Yn0sCiAgam91cm5h
bD17R2l0SHViIHJlcG9zaXRvcnl9LAogIGhvd3B1Ymxpc2hlZD17XHVybHto
dHRwczovL2dpdGh1Yi5jb20vbWF0dGVycG9ydC9NYXNrX1JDTk59fSwKfQpg
YGAKCiMjIENvbnRyaWJ1dGluZwpDb250cmlidXRpb25zIHRvIHRoaXMgcmVw
b3NpdG9yeSBhcmUgd2VsY29tZS4gRXhhbXBsZXMgb2YgdGhpbmdzIHlvdSBj
YW4gY29udHJpYnV0ZToKKiBTcGVlZCBJbXByb3ZlbWVudHMuIExpa2UgcmUt
d3JpdGluZyBzb21lIFB5dGhvbiBjb2RlIGluIFRlbnNvckZsb3cgb3IgQ3l0
aG9uLgoqIFRyYWluaW5nIG9uIG90aGVyIGRhdGFzZXRzLgoqIEFjY3VyYWN5
IEltcHJvdmVtZW50cy4KKiBWaXN1YWxpemF0aW9ucyBhbmQgZXhhbXBsZXMu
CgpZb3UgY2FuIGFsc28gW2pvaW4gb3VyIHRlYW1dKGh0dHBzOi8vbWF0dGVy
cG9ydC5jb20vY2FyZWVycy8pIGFuZCBoZWxwIHVzIGJ1aWxkIGV2ZW4gbW9y
ZSBwcm9qZWN0cyBsaWtlIHRoaXMgb25lLgoKIyMgUmVxdWlyZW1lbnRzClB5
dGhvbiAzLjQsIFRlbnNvckZsb3cgMS4zLCBLZXJhcyAyLjAuOCBhbmQgb3Ro
ZXIgY29tbW9uIHBhY2thZ2VzIGxpc3RlZCBpbiBgcmVxdWlyZW1lbnRzLnR4
dGAuCgojIyMgTVMgQ09DTyBSZXF1aXJlbWVudHM6ClRvIHRyYWluIG9yIHRl
c3Qgb24gTVMgQ09DTywgeW91J2xsIGFsc28gbmVlZDoKKiBweWNvY290b29s
cyAoaW5zdGFsbGF0aW9uIGluc3RydWN0aW9ucyBiZWxvdykKKiBbTVMgQ09D
TyBEYXRhc2V0XShodHRwOi8vY29jb2RhdGFzZXQub3JnLyNob21lKQoqIERv
d25sb2FkIHRoZSA1SyBbbWluaXZhbF0oaHR0cHM6Ly9kbC5kcm9wYm94dXNl
cmNvbnRlbnQuY29tL3MvbzQzbzkwYm5hNzhvbW9iL2luc3RhbmNlc19taW5p
dmFsMjAxNC5qc29uLnppcD9kbD0wKQogIGFuZCB0aGUgMzVLIFt2YWxpZGF0
aW9uLW1pbnVzLW1pbml2YWxdKGh0dHBzOi8vZGwuZHJvcGJveHVzZXJjb250
ZW50LmNvbS9zL3MzdHc1emNnNzM5NTM2OC9pbnN0YW5jZXNfdmFsbWludXNt
aW5pdmFsMjAxNC5qc29uLnppcD9kbD0wKQogIHN1YnNldHMuIE1vcmUgZGV0
YWlscyBpbiB0aGUgb3JpZ2luYWwgW0Zhc3RlciBSLUNOTiBpbXBsZW1lbnRh
dGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL3JiZ2lyc2hpY2svcHktZmFzdGVy
LXJjbm4vYmxvYi9tYXN0ZXIvZGF0YS9SRUFETUUubWQpLgoKSWYgeW91IHVz
ZSBEb2NrZXIsIHRoZSBjb2RlIGhhcyBiZWVuIHZlcmlmaWVkIHRvIHdvcmsg
b24KW3RoaXMgRG9ja2VyIGNvbnRhaW5lcl0oaHR0cHM6Ly9odWIuZG9ja2Vy
LmNvbS9yL3dhbGVlZGthL21vZGVybi1kZWVwLWxlYXJuaW5nLykuCgoKIyMg
SW5zdGFsbGF0aW9uCjEuIENsb25lIHRoaXMgcmVwb3NpdG9yeQoyLiBJbnN0
YWxsIGRlcGVuZGVuY2llcwogICBgYGBiYXNoCiAgIHBpcDMgaW5zdGFsbCAt
ciByZXF1aXJlbWVudHMudHh0CiAgIGBgYAozLiBSdW4gc2V0dXAgZnJvbSB0
aGUgcmVwb3NpdG9yeSByb290IGRpcmVjdG9yeQogICAgYGBgYmFzaAogICAg
cHl0aG9uMyBzZXR1cC5weSBpbnN0YWxsCiAgICBgYGAgCjMuIERvd25sb2Fk
IHByZS10cmFpbmVkIENPQ08gd2VpZ2h0cyAobWFza19yY25uX2NvY28uaDUp
IGZyb20gdGhlIFtyZWxlYXNlcyBwYWdlXShodHRwczovL2dpdGh1Yi5jb20v
bWF0dGVycG9ydC9NYXNrX1JDTk4vcmVsZWFzZXMpLgo0LiAoT3B0aW9uYWwp
IFRvIHRyYWluIG9yIHRlc3Qgb24gTVMgQ09DTyBpbnN0YWxsIGBweWNvY290
b29sc2AgZnJvbSBvbmUgb2YgdGhlc2UgcmVwb3MuIFRoZXkgYXJlIGZvcmtz
IG9mIHRoZSBvcmlnaW5hbCBweWNvY290b29scyB3aXRoIGZpeGVzIGZvciBQ
eXRob24zIGFuZCBXaW5kb3dzICh0aGUgb2ZmaWNpYWwgcmVwbyBkb2Vzbid0
IHNlZW0gdG8gYmUgYWN0aXZlIGFueW1vcmUpLgoKICAgICogTGludXg6IGh0
dHBzOi8vZ2l0aHViLmNvbS93YWxlZWRrYS9jb2NvCiAgICAqIFdpbmRvd3M6
IGh0dHBzOi8vZ2l0aHViLmNvbS9waGlsZmVycmllcmUvY29jb2FwaS4KICAg
IFlvdSBtdXN0IGhhdmUgdGhlIFZpc3VhbCBDKysgMjAxNSBidWlsZCB0b29s
cyBvbiB5b3VyIHBhdGggKHNlZSB0aGUgcmVwbyBmb3IgYWRkaXRpb25hbCBk
ZXRhaWxzKQoKIyBQcm9qZWN0cyBVc2luZyB0aGlzIE1vZGVsCklmIHlvdSBl
eHRlbmQgdGhpcyBtb2RlbCB0byBvdGhlciBkYXRhc2V0cyBvciBidWlsZCBw
cm9qZWN0cyB0aGF0IHVzZSBpdCwgd2UnZCBsb3ZlIHRvIGhlYXIgZnJvbSB5
b3UuCgojIyMgWzRLIFZpZGVvIERlbW9dKGh0dHBzOi8vd3d3LnlvdXR1YmUu
Y29tL3dhdGNoP3Y9T09UM1VJWFp6dEUpIGJ5IEthcm9sIE1hamVrLgpbIVtN
YXNrIFJDTk4gb24gNEsgVmlkZW9dKGFzc2V0cy80a192aWRlby5naWYpXSho
dHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PU9PVDNVSVhaenRFKQoK
IyMjIFtJbWFnZXMgdG8gT1NNXShodHRwczovL2dpdGh1Yi5jb20vanJlbWls
bGFyZC9pbWFnZXMtdG8tb3NtKTogSW1wcm92ZSBPcGVuU3RyZWV0TWFwIGJ5
IGFkZGluZyBiYXNlYmFsbCwgc29jY2VyLCB0ZW5uaXMsIGZvb3RiYWxsLCBh
bmQgYmFza2V0YmFsbCBmaWVsZHMuCgohW0lkZW50aWZ5IHNwb3J0IGZpZWxk
cyBpbiBzYXRlbGxpdGUgaW1hZ2VzXShhc3NldHMvaW1hZ2VzX3RvX29zbS5w
bmcpCgojIyMgW1NwbGFzaCBvZiBDb2xvcl0oaHR0cHM6Ly9lbmdpbmVlcmlu
Zy5tYXR0ZXJwb3J0LmNvbS9zcGxhc2gtb2YtY29sb3ItaW5zdGFuY2Utc2Vn
bWVudGF0aW9uLXdpdGgtbWFzay1yLWNubi1hbmQtdGVuc29yZmxvdy03Yzc2
MWUyMzhiNDYpLiBBIGJsb2cgcG9zdCBleHBsYWluaW5nIGhvdyB0byB0cmFp
biB0aGlzIG1vZGVsIGZyb20gc2NyYXRjaCBhbmQgdXNlIGl0IHRvIGltcGxl
bWVudCBhIGNvbG9yIHNwbGFzaCBlZmZlY3QuCiFbQmFsbG9vbiBDb2xvciBT
cGxhc2hdKGFzc2V0cy9iYWxsb29uX2NvbG9yX3NwbGFzaC5naWYpCgoKIyMj
IFtTZWdtZW50aW5nIE51Y2xlaSBpbiBNaWNyb3Njb3B5IEltYWdlc10oc2Ft
cGxlcy9udWNsZXVzKS4gQnVpbHQgZm9yIHRoZSBbMjAxOCBEYXRhIFNjaWVu
Y2UgQm93bF0oaHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9jL2RhdGEtc2NpZW5j
ZS1ib3dsLTIwMTgpCkNvZGUgaXMgaW4gdGhlIGBzYW1wbGVzL251Y2xldXNg
IGRpcmVjdG9yeS4KCiFbTnVjbGV1cyBTZWdtZW50YXRpb25dKGFzc2V0cy9u
dWNsZXVzX3NlZ21lbnRhdGlvbi5wbmcpCgojIyMgW0RldGVjdGlvbiBhbmQg
U2VnbWVudGF0aW9uIGZvciBTdXJnZXJ5IFJvYm90c10oaHR0cHM6Ly9naXRo
dWIuY29tL1NVWUVnaXQvU3VyZ2VyeS1Sb2JvdC1EZXRlY3Rpb24tU2VnbWVu
dGF0aW9uKSBieSB0aGUgTlVTIENvbnRyb2wgJiBNZWNoYXRyb25pY3MgTGFi
LgohW1N1cmdlcnkgUm9ib3QgRGV0ZWN0aW9uIGFuZCBTZWdtZW50YXRpb25d
KGh0dHBzOi8vZ2l0aHViLmNvbS9TVVlFZ2l0L1N1cmdlcnktUm9ib3QtRGV0
ZWN0aW9uLVNlZ21lbnRhdGlvbi9yYXcvbWFzdGVyL2Fzc2V0cy92aWRlby5n
aWYpCgojIyMgW1JlY29uc3RydWN0aW5nIDNEIGJ1aWxkaW5ncyBmcm9tIGFl
cmlhbCBMaURBUl0oaHR0cHM6Ly9tZWRpdW0uY29tL2dlb2FpL3JlY29uc3Ry
dWN0aW5nLTNkLWJ1aWxkaW5ncy1mcm9tLWFlcmlhbC1saWRhci13aXRoLWFp
LWRldGFpbHMtNmE4MWNiMzA3OWMwKQpBIHByb29mIG9mIGNvbmNlcHQgcHJv
amVjdCBieSBbRXNyaV0oaHR0cHM6Ly93d3cuZXNyaS5jb20vKSwgaW4gY29s
bGFib3JhdGlvbiB3aXRoIE52aWRpYSBhbmQgTWlhbWktRGFkZSBDb3VudHku
IEFsb25nIHdpdGggYSBncmVhdCB3cml0ZSB1cCBhbmQgY29kZSBieSBEbWl0
cnkgS3VkaW5vdiwgRGFuaWVsIEhlZGdlcywgYW5kIE9tYXIgTWFoZXIuCiFb
M0QgQnVpbGRpbmcgUmVjb25zdHJ1Y3Rpb25dKGFzc2V0cy9wcm9qZWN0XzNk
YnVpbGRpbmdzLnBuZykKCiMjIyBbVXNpaWdhY2k6IExhYmVsLWZyZWUgQ2Vs
bCBUcmFja2luZyBpbiBQaGFzZSBDb250cmFzdCBNaWNyb3Njb3B5XShodHRw
czovL2dpdGh1Yi5jb20vb2lzdC91c2lpZ2FjaSkKQSBwcm9qZWN0IGZyb20g
SmFwYW4gdG8gYXV0b21hdGljYWxseSB0cmFjayBjZWxscyBpbiBhIG1pY3Jv
Zmx1aWRpY3MgcGxhdGZvcm0uIFBhcGVyIGlzIHBlbmRpbmcsIGJ1dCB0aGUg
c291cmNlIGNvZGUgaXMgcmVsZWFzZWQuCgohW10oYXNzZXRzL3Byb2plY3Rf
dXNpaWdhY2kxLmdpZikgIVtdKGFzc2V0cy9wcm9qZWN0X3VzaWlnYWNpMi5n
aWYpCgojIyMgW0NoYXJhY3Rlcml6YXRpb24gb2YgQXJjdGljIEljZS1XZWRn
ZSBQb2x5Z29ucyBpbiBWZXJ5IEhpZ2ggU3BhdGlhbCBSZXNvbHV0aW9uIEFl
cmlhbCBJbWFnZXJ5XShodHRwOi8vd3d3Lm1kcGkuY29tLzIwNzItNDI5Mi8x
MC85LzE0ODcpClJlc2VhcmNoIHByb2plY3QgdG8gdW5kZXJzdGFuZCB0aGUg
Y29tcGxleCBwcm9jZXNzZXMgYmV0d2VlbiBkZWdyYWRhdGlvbnMgaW4gdGhl
IEFyY3RpYyBhbmQgY2xpbWF0ZSBjaGFuZ2UuIEJ5IFdlaXhpbmcgWmhhbmcs
IENoYW5kaSBXaXRoYXJhbmEsIEFubmEgTGlsamVkYWhsLCBhbmQgTWlraGFp
bCBLYW5ldnNraXkuCiFbaW1hZ2VdKGFzc2V0cy9wcm9qZWN0X2ljZV93ZWRn
ZV9wb2x5Z29ucy5wbmcpCgojIyMgW01hc2stUkNOTiBTaGlueV0oaHR0cHM6
Ly9naXRodWIuY29tL2h1dXV1dXN5L01hc2stUkNOTi1TaGlueSkKQSBjb21w
dXRlciB2aXNpb24gY2xhc3MgcHJvamVjdCBieSBIVSBTaGl5dSB0byBhcHBs
eSB0aGUgY29sb3IgcG9wIGVmZmVjdCBvbiBwZW9wbGUgd2l0aCBiZWF1dGlm
dWwgcmVzdWx0cy4KIVtdKGFzc2V0cy9wcm9qZWN0X3NoaW55MS5qcGcpCgoj
IyMgW01hcHBpbmcgQ2hhbGxlbmdlXShodHRwczovL2dpdGh1Yi5jb20vY3Jv
d2RBSS9jcm93ZGFpLW1hcHBpbmctY2hhbGxlbmdlLW1hc2stcmNubik6IENv
bnZlcnQgc2F0ZWxsaXRlIGltYWdlcnkgdG8gbWFwcyBmb3IgdXNlIGJ5IGh1
bWFuaXRhcmlhbiBvcmdhbmlzYXRpb25zLgohW01hcHBpbmcgQ2hhbGxlbmdl
XShhc3NldHMvbWFwcGluZ19jaGFsbGVuZ2UucG5nKQoKIyMjIFtHUkFTUyBH
SVMgQWRkb25dKGh0dHBzOi8vZ2l0aHViLmNvbS9jdHUtZ2VvZm9yYWxsLWxh
Yi9pLmFubi5tYXNrcmNubikgdG8gZ2VuZXJhdGUgdmVjdG9yIG1hc2tzIGZy
b20gZ2Vvc3BhdGlhbCBpbWFnZXJ5LiBCYXNlZCBvbiBhIFtNYXN0ZXIncyB0
aGVzaXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9jdHUtZ2VvZm9yYWxsLWxhYi1w
cm9qZWN0cy9kcC1wZXNlay0yMDE4KSBieSBPbmTFmWVqIFBlxaFlay4KIVtH
UkFTUyBHSVMgSW1hZ2VdKGFzc2V0cy9wcm9qZWN0X2dyYXNzX2dpcy5wbmcp
Cg==
",,14931,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
